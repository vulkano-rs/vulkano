// This file is auto-generated by vulkano autogen from vk.xml header version 1.3.281.
// It should not be edited manually. Changes should be made by editing autogen.


/// Represents all the properties of a physical device.
///
/// Depending on the highest version of Vulkan supported by the physical device, and
/// the available extensions, not every property may be available. For that reason,
/// some properties are wrapped in an `Option`.
#[derive(Clone, Debug)]
pub struct DeviceProperties {
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-accelerationStructureCaptureReplayDescriptorDataSize)
    pub acceleration_structure_capture_replay_descriptor_data_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-accelerationStructureDescriptorSize)
    pub acceleration_structure_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreProperties2AMD.html#limits-activeComputeUnitCount)
    pub active_compute_unit_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendAllOperations)
    pub advanced_blend_all_operations: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendCorrelatedOverlap)
    pub advanced_blend_correlated_overlap: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendIndependentBlend)
    pub advanced_blend_independent_blend: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendMaxColorAttachments)
    pub advanced_blend_max_color_attachments: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendNonPremultipliedDstColor)
    pub advanced_blend_non_premultiplied_dst_color: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html#limits-advancedBlendNonPremultipliedSrcColor)
    pub advanced_blend_non_premultiplied_src_color: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerformanceQueryPropertiesKHR.html#limits-allowCommandBufferQueryCopies)
    pub allow_command_buffer_query_copies: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-allowSamplerImageViewPostSubmitCreation)
    pub allow_sampler_image_view_post_submit_creation: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-apiVersion)
    pub api_version: Version,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-bidirectionalFlowSupported)
    pub bidirectional_flow_supported: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6PropertiesKHR.html#limits-blockTexelViewCompatibleMultipleLayers)
    pub block_texel_view_compatible_multiple_layers: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-bufferCaptureReplayDescriptorDataSize)
    pub buffer_capture_replay_descriptor_data_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-bufferImageGranularity)
    pub buffer_image_granularity: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-bufferlessPushDescriptors)
    pub bufferless_push_descriptors: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT.html#limits-combinedImageSamplerDensityMapDescriptorSize)
    pub combined_image_sampler_density_map_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-combinedImageSamplerDescriptorSingleArray)
    pub combined_image_sampler_descriptor_single_array: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-combinedImageSamplerDescriptorSize)
    pub combined_image_sampler_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCudaKernelLaunchPropertiesNV.html#limits-computeCapabilityMajor)
    pub compute_capability_major: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCudaKernelLaunchPropertiesNV.html#limits-computeCapabilityMinor)
    pub compute_capability_minor: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-computeUnitsPerShaderArray)
    pub compute_units_per_shader_array: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-conformanceVersion)
    pub conformance_version: Option<ConformanceVersion>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-conservativePointAndLineRasterization)
    pub conservative_point_and_line_rasterization: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-conservativeRasterizationPostDepthCoverage)
    pub conservative_rasterization_post_depth_coverage: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixPropertiesKHR.html#limits-cooperativeMatrixSupportedStages)
    pub cooperative_matrix_supported_stages: Option<ShaderStages>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyPropertiesEXT.html#limits-pCopyDstLayouts)
    pub copy_dst_layouts: Option<Vec<ImageLayout>>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyPropertiesEXT.html#limits-pCopySrcLayouts)
    pub copy_src_layouts: Option<Vec<ImageLayout>>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-costSupported)
    pub cost_supported: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryDecompressionPropertiesNV.html#limits-decompressionMethods)
    pub decompression_methods: Option<MemoryDecompressionMethods>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessPropertiesEXT.html#limits-defaultRobustnessImages)
    pub default_robustness_images: Option<PipelineRobustnessImageBehavior>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessPropertiesEXT.html#limits-defaultRobustnessStorageBuffers)
    pub default_robustness_storage_buffers: Option<PipelineRobustnessBufferBehavior>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessPropertiesEXT.html#limits-defaultRobustnessUniformBuffers)
    pub default_robustness_uniform_buffers: Option<PipelineRobustnessBufferBehavior>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessPropertiesEXT.html#limits-defaultRobustnessVertexInputs)
    pub default_robustness_vertex_inputs: Option<PipelineRobustnessBufferBehavior>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-degenerateLinesRasterized)
    pub degenerate_lines_rasterized: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-degenerateTrianglesRasterized)
    pub degenerate_triangles_rasterized: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-denormBehaviorIndependence)
    pub denorm_behavior_independence: Option<ShaderFloatControlsIndependence>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-depthStencilSwizzleOneSupport)
    pub depth_stencil_swizzle_one_support: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-descriptorBufferAddressSpaceSize)
    pub descriptor_buffer_address_space_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-descriptorBufferOffsetAlignment)
    pub descriptor_buffer_offset_alignment: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-deviceID)
    pub device_id: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-deviceLUID)
    pub device_luid: Option<[u8; 8usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-deviceLUIDValid)
    pub device_luid_valid: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-deviceName)
    pub device_name: String,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-deviceNodeMask)
    pub device_node_mask: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-deviceType)
    pub device_type: PhysicalDeviceType,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-deviceUUID)
    pub device_uuid: Option<[u8; 16usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-discreteQueuePriorities)
    pub discrete_queue_priorities: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-driverID)
    pub driver_id: Option<DriverId>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-driverInfo)
    pub driver_info: Option<String>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-driverName)
    pub driver_name: Option<String>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-driverUUID)
    pub driver_uuid: Option<[u8; 16usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-driverVersion)
    pub driver_version: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3PropertiesEXT.html#limits-dynamicPrimitiveTopologyUnrestricted)
    pub dynamic_primitive_topology_unrestricted: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-earlyFragmentMultisampleCoverageAfterSampleCounting)
    pub early_fragment_multisample_coverage_after_sample_counting: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-earlyFragmentSampleMaskTestBeforeSampleCounting)
    pub early_fragment_sample_mask_test_before_sample_counting: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html#limits-executionGraphDispatchAddressAlignment)
    pub execution_graph_dispatch_address_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV.html#limits-extendedSparseAddressSpaceSize)
    pub extended_sparse_address_space_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV.html#limits-extendedSparseBufferUsageFlags)
    pub extended_sparse_buffer_usage_flags: Option<BufferUsage>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV.html#limits-extendedSparseImageUsageFlags)
    pub extended_sparse_image_usage_flags: Option<ImageUsage>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolvePropertiesANDROID.html#limits-externalFormatResolveChromaOffsetX)
    pub external_format_resolve_chroma_offset_x: Option<ChromaLocation>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolvePropertiesANDROID.html#limits-externalFormatResolveChromaOffsetY)
    pub external_format_resolve_chroma_offset_y: Option<ChromaLocation>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-extraPrimitiveOverestimationSizeGranularity)
    pub extra_primitive_overestimation_size_granularity: Option<f32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-filterMinmaxImageComponentMapping)
    pub filter_minmax_image_component_mapping: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-filterMinmaxSingleComponentFormats)
    pub filter_minmax_single_component_formats: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesARM.html#limits-fmaRate)
    pub fma_rate: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html#limits-fragmentDensityInvocations)
    pub fragment_density_invocations: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.html#limits-fragmentDensityOffsetGranularity)
    pub fragment_density_offset_granularity: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6PropertiesKHR.html#limits-fragmentShadingRateClampCombinerInputs)
    pub fragment_shading_rate_clamp_combiner_inputs: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateNonTrivialCombinerOps)
    pub fragment_shading_rate_non_trivial_combiner_ops: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateStrictMultiplyCombiner)
    pub fragment_shading_rate_strict_multiply_combiner: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithConservativeRasterization)
    pub fragment_shading_rate_with_conservative_rasterization: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithCustomSampleLocations)
    pub fragment_shading_rate_with_custom_sample_locations: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithFragmentShaderInterlock)
    pub fragment_shading_rate_with_fragment_shader_interlock: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithSampleMask)
    pub fragment_shading_rate_with_sample_mask: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithShaderDepthStencilWrites)
    pub fragment_shading_rate_with_shader_depth_stencil_writes: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-fragmentShadingRateWithShaderSampleMask)
    pub fragment_shading_rate_with_shader_sample_mask: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-framebufferColorSampleCounts)
    pub framebuffer_color_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-framebufferDepthSampleCounts)
    pub framebuffer_depth_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-framebufferIntegerColorSampleCounts)
    pub framebuffer_integer_color_sample_counts: Option<SampleCounts>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-framebufferNoAttachmentsSampleCounts)
    pub framebuffer_no_attachments_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-framebufferStencilSampleCounts)
    pub framebuffer_stencil_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-fullyCoveredFragmentShaderInputVariable)
    pub fully_covered_fragment_shader_input_variable: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-globalFlowSupported)
    pub global_flow_supported: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.html#limits-graphicsPipelineLibraryFastLinking)
    pub graphics_pipeline_library_fast_linking: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT.html#limits-graphicsPipelineLibraryIndependentInterpolationDecoration)
    pub graphics_pipeline_library_independent_interpolation_decoration: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-hasPrimary)
    pub has_primary: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-hasRender)
    pub has_render: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-hintSupported)
    pub hint_supported: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyPropertiesEXT.html#limits-identicalMemoryTypeRequirements)
    pub identical_memory_type_requirements: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-imageCaptureReplayDescriptorDataSize)
    pub image_capture_replay_descriptor_data_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-imageViewCaptureReplayDescriptorDataSize)
    pub image_view_capture_replay_descriptor_data_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-independentResolve)
    pub independent_resolve: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-independentResolveNone)
    pub independent_resolve_none: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI.html#limits-indirectBufferOffsetAlignment)
    pub indirect_buffer_offset_alignment: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-inputAttachmentDescriptorSize)
    pub input_attachment_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct16BitMixedSignednessAccelerated)
    pub integer_dot_product16_bit_mixed_signedness_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct16BitSignedAccelerated)
    pub integer_dot_product16_bit_signed_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct16BitUnsignedAccelerated)
    pub integer_dot_product16_bit_unsigned_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct32BitMixedSignednessAccelerated)
    pub integer_dot_product32_bit_mixed_signedness_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct32BitSignedAccelerated)
    pub integer_dot_product32_bit_signed_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct32BitUnsignedAccelerated)
    pub integer_dot_product32_bit_unsigned_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct4x8BitPackedMixedSignednessAccelerated)
    pub integer_dot_product4x8_bit_packed_mixed_signedness_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct4x8BitPackedSignedAccelerated)
    pub integer_dot_product4x8_bit_packed_signed_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct4x8BitPackedUnsignedAccelerated)
    pub integer_dot_product4x8_bit_packed_unsigned_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct64BitMixedSignednessAccelerated)
    pub integer_dot_product64_bit_mixed_signedness_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct64BitSignedAccelerated)
    pub integer_dot_product64_bit_signed_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct64BitUnsignedAccelerated)
    pub integer_dot_product64_bit_unsigned_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct8BitMixedSignednessAccelerated)
    pub integer_dot_product8_bit_mixed_signedness_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct8BitSignedAccelerated)
    pub integer_dot_product8_bit_signed_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProduct8BitUnsignedAccelerated)
    pub integer_dot_product8_bit_unsigned_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)
    pub integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating16BitSignedAccelerated)
    pub integer_dot_product_accumulating_saturating16_bit_signed_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)
    pub integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)
    pub integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating32BitSignedAccelerated)
    pub integer_dot_product_accumulating_saturating32_bit_signed_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)
    pub integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated)
    pub integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)
    pub integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)
    pub integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)
    pub integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating64BitSignedAccelerated)
    pub integer_dot_product_accumulating_saturating64_bit_signed_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)
    pub integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)
    pub integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating8BitSignedAccelerated)
    pub integer_dot_product_accumulating_saturating8_bit_signed_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)
    pub integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated: Option<
        bool,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-layeredShadingRateAttachments)
    pub layered_shading_rate_attachments: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationPropertiesKHR.html#limits-lineSubPixelPrecisionBits)
    pub line_sub_pixel_precision_bits: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-lineWidthGranularity)
    pub line_width_granularity: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-lineWidthRange)
    pub line_width_range: [f32; 2usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingPropertiesQCOM.html#limits-maxBlockMatchRegion)
    pub max_block_match_region: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessing2PropertiesQCOM.html#limits-maxBlockMatchWindow)
    pub max_block_match_window: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxBoundDescriptorSets)
    pub max_bound_descriptor_sets: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingPropertiesQCOM.html#limits-maxBoxFilterBlockSize)
    pub max_box_filter_block_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxBufferSize)
    pub max_buffer_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxClipDistances)
    pub max_clip_distances: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxColorAttachments)
    pub max_color_attachments: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxCombinedClipAndCullDistances)
    pub max_combined_clip_and_cull_distances: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6PropertiesKHR.html#limits-maxCombinedImageSamplerDescriptorCount)
    pub max_combined_image_sampler_descriptor_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferPropertiesEXT.html#limits-maxCommandBufferNestingLevel)
    pub max_command_buffer_nesting_level: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxComputeSharedMemorySize)
    pub max_compute_shared_memory_size: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxComputeWorkGroupCount)
    pub max_compute_work_group_count: [u32; 3usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxComputeWorkGroupInvocations)
    pub max_compute_work_group_invocations: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxComputeWorkGroupSize)
    pub max_compute_work_group_size: [u32; 3usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxComputeWorkgroupSubgroups)
    pub max_compute_workgroup_subgroups: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxCullDistances)
    pub max_cull_distances: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCustomBorderColorPropertiesEXT.html#limits-maxCustomBorderColorSamplers)
    pub max_custom_border_color_samplers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryDecompressionPropertiesNV.html#limits-maxDecompressionIndirectCount)
    pub max_decompression_indirect_count: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxDescriptorBufferBindings)
    pub max_descriptor_buffer_bindings: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxDescriptorSetAccelerationStructures)
    pub max_descriptor_set_acceleration_structures: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxDescriptorSetInlineUniformBlocks)
    pub max_descriptor_set_inline_uniform_blocks: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetInputAttachments)
    pub max_descriptor_set_input_attachments: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetSampledImages)
    pub max_descriptor_set_sampled_images: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetSamplers)
    pub max_descriptor_set_samplers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetStorageBuffers)
    pub max_descriptor_set_storage_buffers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetStorageBuffersDynamic)
    pub max_descriptor_set_storage_buffers_dynamic: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetStorageImages)
    pub max_descriptor_set_storage_images: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html#limits-maxDescriptorSetSubsampledSamplers)
    pub max_descriptor_set_subsampled_samplers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetUniformBuffers)
    pub max_descriptor_set_uniform_buffers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDescriptorSetUniformBuffersDynamic)
    pub max_descriptor_set_uniform_buffers_dynamic: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxDescriptorSetUpdateAfterBindAccelerationStructures)
    pub max_descriptor_set_update_after_bind_acceleration_structures: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
    pub max_descriptor_set_update_after_bind_inline_uniform_blocks: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindInputAttachments)
    pub max_descriptor_set_update_after_bind_input_attachments: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindSampledImages)
    pub max_descriptor_set_update_after_bind_sampled_images: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindSamplers)
    pub max_descriptor_set_update_after_bind_samplers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindStorageBuffers)
    pub max_descriptor_set_update_after_bind_storage_buffers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
    pub max_descriptor_set_update_after_bind_storage_buffers_dynamic: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindStorageImages)
    pub max_descriptor_set_update_after_bind_storage_images: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindUniformBuffers)
    pub max_descriptor_set_update_after_bind_uniform_buffers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
    pub max_descriptor_set_update_after_bind_uniform_buffers_dynamic: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDiscardRectanglePropertiesEXT.html#limits-maxDiscardRectangles)
    pub max_discard_rectangles: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDisplacementMicromapPropertiesNV.html#limits-maxDisplacementMicromapSubdivisionLevel)
    pub max_displacement_micromap_subdivision_level: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDrawIndexedIndexValue)
    pub max_draw_indexed_index_value: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxDrawIndirectCount)
    pub max_draw_indirect_count: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html#limits-maxDrawMeshTasksCount)
    pub max_draw_mesh_tasks_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxEmbeddedImmutableSamplerBindings)
    pub max_embedded_immutable_sampler_bindings: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxEmbeddedImmutableSamplers)
    pub max_embedded_immutable_samplers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html#limits-maxExecutionGraphDepth)
    pub max_execution_graph_depth: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html#limits-maxExecutionGraphShaderOutputNodes)
    pub max_execution_graph_shader_output_nodes: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html#limits-maxExecutionGraphShaderPayloadCount)
    pub max_execution_graph_shader_payload_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueuePropertiesAMDX.html#limits-maxExecutionGraphShaderPayloadSize)
    pub max_execution_graph_shader_payload_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-maxExtraPrimitiveOverestimationSize)
    pub max_extra_primitive_overestimation_size: Option<f32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFragmentCombinedOutputResources)
    pub max_fragment_combined_output_resources: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html#limits-maxFragmentDensityTexelSize)
    pub max_fragment_density_texel_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFragmentDualSrcAttachments)
    pub max_fragment_dual_src_attachments: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFragmentInputComponents)
    pub max_fragment_input_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFragmentOutputAttachments)
    pub max_fragment_output_attachments: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentShadingRateAttachmentTexelSize)
    pub max_fragment_shading_rate_attachment_texel_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentShadingRateAttachmentTexelSizeAspectRatio)
    pub max_fragment_shading_rate_attachment_texel_size_aspect_ratio: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentShadingRateCoverageSamples)
    pub max_fragment_shading_rate_coverage_samples: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.html#limits-maxFragmentShadingRateInvocationCount)
    pub max_fragment_shading_rate_invocation_count: Option<SampleCount>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentShadingRateRasterizationSamples)
    pub max_fragment_shading_rate_rasterization_samples: Option<SampleCount>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentSize)
    pub max_fragment_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-maxFragmentSizeAspectRatio)
    pub max_fragment_size_aspect_ratio: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFramebufferHeight)
    pub max_framebuffer_height: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFramebufferLayers)
    pub max_framebuffer_layers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxFramebufferWidth)
    pub max_framebuffer_width: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxGeometryCount)
    pub max_geometry_count: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxGeometryInputComponents)
    pub max_geometry_input_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxGeometryOutputComponents)
    pub max_geometry_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxGeometryOutputVertices)
    pub max_geometry_output_vertices: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxGeometryShaderInvocations)
    pub max_geometry_shader_invocations: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxGeometryTotalOutputComponents)
    pub max_geometry_total_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxGraphicsShaderGroupCount)
    pub max_graphics_shader_group_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-maxHeight)
    pub max_height: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxImageArrayLayers)
    pub max_image_array_layers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxImageDimension1D)
    pub max_image_dimension1_d: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxImageDimension2D)
    pub max_image_dimension2_d: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxImageDimension3D)
    pub max_image_dimension3_d: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxImageDimensionCube)
    pub max_image_dimension_cube: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxIndirectCommandsStreamCount)
    pub max_indirect_commands_stream_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxIndirectCommandsStreamStride)
    pub max_indirect_commands_stream_stride: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxIndirectCommandsTokenCount)
    pub max_indirect_commands_token_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxIndirectCommandsTokenOffset)
    pub max_indirect_commands_token_offset: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-maxIndirectSequenceCount)
    pub max_indirect_sequence_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxInlineUniformBlockSize)
    pub max_inline_uniform_block_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxInlineUniformTotalSize)
    pub max_inline_uniform_total_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxInstanceCount)
    pub max_instance_count: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxInterpolationOffset)
    pub max_interpolation_offset: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxMemoryAllocationCount)
    pub max_memory_allocation_count: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-maxMemoryAllocationSize)
    pub max_memory_allocation_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshMultiviewViewCount)
    pub max_mesh_multiview_view_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshOutputComponents)
    pub max_mesh_output_components: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshOutputLayers)
    pub max_mesh_output_layers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshOutputMemorySize)
    pub max_mesh_output_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshOutputPrimitives)
    pub max_mesh_output_primitives: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshOutputVertices)
    pub max_mesh_output_vertices: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshPayloadAndOutputMemorySize)
    pub max_mesh_payload_and_output_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshPayloadAndSharedMemorySize)
    pub max_mesh_payload_and_shared_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshSharedMemorySize)
    pub max_mesh_shared_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html#limits-maxMeshTotalMemorySize)
    pub max_mesh_total_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshWorkGroupCount)
    pub max_mesh_work_group_count: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshWorkGroupInvocations)
    pub max_mesh_work_group_invocations: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshWorkGroupSize)
    pub max_mesh_work_group_size: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxMeshWorkGroupTotalCount)
    pub max_mesh_work_group_total_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiDrawPropertiesEXT.html#limits-maxMultiDrawCount)
    pub max_multi_draw_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-maxMultiviewInstanceIndex)
    pub max_multiview_instance_index: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-maxMultiviewViewCount)
    pub max_multiview_view_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-maxNumRegionsOfInterest)
    pub max_num_regions_of_interest: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapPropertiesEXT.html#limits-maxOpacity2StateSubdivisionLevel)
    pub max_opacity2_state_subdivision_level: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapPropertiesEXT.html#limits-maxOpacity4StateSubdivisionLevel)
    pub max_opacity4_state_subdivision_level: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI.html#limits-maxOutputClusterCount)
    pub max_output_cluster_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-maxPerSetDescriptors)
    pub max_per_set_descriptors: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxPerStageDescriptorAccelerationStructures)
    pub max_per_stage_descriptor_acceleration_structures: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxPerStageDescriptorInlineUniformBlocks)
    pub max_per_stage_descriptor_inline_uniform_blocks: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorInputAttachments)
    pub max_per_stage_descriptor_input_attachments: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorSampledImages)
    pub max_per_stage_descriptor_sampled_images: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorSamplers)
    pub max_per_stage_descriptor_samplers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorStorageBuffers)
    pub max_per_stage_descriptor_storage_buffers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorStorageImages)
    pub max_per_stage_descriptor_storage_images: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageDescriptorUniformBuffers)
    pub max_per_stage_descriptor_uniform_buffers: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxPerStageDescriptorUpdateAfterBindAccelerationStructures)
    pub max_per_stage_descriptor_update_after_bind_acceleration_structures: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
    pub max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindInputAttachments)
    pub max_per_stage_descriptor_update_after_bind_input_attachments: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindSampledImages)
    pub max_per_stage_descriptor_update_after_bind_sampled_images: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindSamplers)
    pub max_per_stage_descriptor_update_after_bind_samplers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindStorageBuffers)
    pub max_per_stage_descriptor_update_after_bind_storage_buffers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindStorageImages)
    pub max_per_stage_descriptor_update_after_bind_storage_images: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageDescriptorUpdateAfterBindUniformBuffers)
    pub max_per_stage_descriptor_update_after_bind_uniform_buffers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPerStageResources)
    pub max_per_stage_resources: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxPerStageUpdateAfterBindResources)
    pub max_per_stage_update_after_bind_resources: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxPreferredMeshWorkGroupInvocations)
    pub max_preferred_mesh_work_group_invocations: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxPreferredTaskWorkGroupInvocations)
    pub max_preferred_task_work_group_invocations: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-maxPrimitiveCount)
    pub max_primitive_count: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxPushConstantsSize)
    pub max_push_constants_size: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePushDescriptorPropertiesKHR.html#limits-maxPushDescriptors)
    pub max_push_descriptors: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-maxRayDispatchInvocationCount)
    pub max_ray_dispatch_invocation_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-maxRayHitAttributeSize)
    pub max_ray_hit_attribute_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-maxRayRecursionDepth)
    pub max_ray_recursion_depth: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPropertiesNV.html#limits-maxRecursionDepth)
    pub max_recursion_depth: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRenderPassStripedPropertiesARM.html#limits-maxRenderPassStripes)
    pub max_render_pass_stripes: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxResourceDescriptorBufferBindings)
    pub max_resource_descriptor_buffer_bindings: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxResourceDescriptorBufferRange)
    pub max_resource_descriptor_buffer_range: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html#limits-maxSampleLocationGridSize)
    pub max_sample_location_grid_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxSampleMaskWords)
    pub max_sample_mask_words: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxSamplerAllocationCount)
    pub max_sampler_allocation_count: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxSamplerAnisotropy)
    pub max_sampler_anisotropy: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxSamplerDescriptorBufferBindings)
    pub max_sampler_descriptor_buffer_bindings: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-maxSamplerDescriptorBufferRange)
    pub max_sampler_descriptor_buffer_range: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxSamplerLodBias)
    pub max_sampler_lod_bias: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-maxSgprAllocation)
    pub max_sgpr_allocation: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-maxShaderGroupStride)
    pub max_shader_group_stride: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxStorageBufferRange)
    pub max_storage_buffer_range: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-maxSubgroupSize)
    pub max_subgroup_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.html#limits-maxSubpassShadingWorkgroupSizeAspectRatio)
    pub max_subpass_shading_workgroup_size_aspect_ratio: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html#limits-maxSubsampledArrayLayers)
    pub max_subsampled_array_layers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html#limits-maxTaskOutputCount)
    pub max_task_output_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskPayloadAndSharedMemorySize)
    pub max_task_payload_and_shared_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskPayloadSize)
    pub max_task_payload_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskSharedMemorySize)
    pub max_task_shared_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesNV.html#limits-maxTaskTotalMemorySize)
    pub max_task_total_memory_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskWorkGroupCount)
    pub max_task_work_group_count: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskWorkGroupInvocations)
    pub max_task_work_group_invocations: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskWorkGroupSize)
    pub max_task_work_group_size: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-maxTaskWorkGroupTotalCount)
    pub max_task_work_group_total_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationControlPerPatchOutputComponents)
    pub max_tessellation_control_per_patch_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationControlPerVertexInputComponents)
    pub max_tessellation_control_per_vertex_input_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationControlPerVertexOutputComponents)
    pub max_tessellation_control_per_vertex_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationControlTotalOutputComponents)
    pub max_tessellation_control_total_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationEvaluationInputComponents)
    pub max_tessellation_evaluation_input_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationEvaluationOutputComponents)
    pub max_tessellation_evaluation_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationGenerationLevel)
    pub max_tessellation_generation_level: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTessellationPatchSize)
    pub max_tessellation_patch_size: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTexelBufferElements)
    pub max_texel_buffer_elements: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTexelGatherOffset)
    pub max_texel_gather_offset: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxTexelOffset)
    pub max_texel_offset: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxTimelineSemaphoreValueDifference)
    pub max_timeline_semaphore_value_difference: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackBufferDataSize)
    pub max_transform_feedback_buffer_data_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackBufferDataStride)
    pub max_transform_feedback_buffer_data_stride: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackBufferSize)
    pub max_transform_feedback_buffer_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackBuffers)
    pub max_transform_feedback_buffers: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackStreamDataSize)
    pub max_transform_feedback_stream_data_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-maxTransformFeedbackStreams)
    pub max_transform_feedback_streams: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPropertiesNV.html#limits-maxTriangleCount)
    pub max_triangle_count: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxUniformBufferRange)
    pub max_uniform_buffer_range: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-maxUpdateAfterBindDescriptorsInAllPools)
    pub max_update_after_bind_descriptors_in_all_pools: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR.html#limits-maxVertexAttribDivisor)
    pub max_vertex_attrib_divisor: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxVertexInputAttributeOffset)
    pub max_vertex_input_attribute_offset: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxVertexInputAttributes)
    pub max_vertex_input_attributes: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxVertexInputBindingStride)
    pub max_vertex_input_binding_stride: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxVertexInputBindings)
    pub max_vertex_input_bindings: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxVertexOutputComponents)
    pub max_vertex_output_components: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-maxVgprAllocation)
    pub max_vgpr_allocation: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxViewportDimensions)
    pub max_viewport_dimensions: [u32; 2usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-maxViewports)
    pub max_viewports: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingPropertiesQCOM.html#limits-maxWeightFilterDimension)
    pub max_weight_filter_dimension: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingPropertiesQCOM.html#limits-maxWeightFilterPhases)
    pub max_weight_filter_phases: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-maxWidth)
    pub max_width: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI.html#limits-maxWorkGroupCount)
    pub max_work_group_count: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI.html#limits-maxWorkGroupSize)
    pub max_work_group_size: Option<[u32; 3usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-meshOutputPerPrimitiveGranularity)
    pub mesh_output_per_primitive_granularity: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-meshOutputPerVertexGranularity)
    pub mesh_output_per_vertex_granularity: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructurePropertiesKHR.html#limits-minAccelerationStructureScratchOffsetAlignment)
    pub min_acceleration_structure_scratch_offset_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html#limits-minFragmentDensityTexelSize)
    pub min_fragment_density_texel_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-minFragmentShadingRateAttachmentTexelSize)
    pub min_fragment_shading_rate_attachment_texel_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-minHeight)
    pub min_height: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryHostPropertiesEXT.html#limits-minImportedHostPointerAlignment)
    pub min_imported_host_pointer_alignment: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-minIndirectCommandsBufferOffsetAlignment)
    pub min_indirect_commands_buffer_offset_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minInterpolationOffset)
    pub min_interpolation_offset: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minMemoryMapAlignment)
    pub min_memory_map_alignment: usize,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedPropertiesEXT.html#limits-minPlacedMemoryMapAlignment)
    pub min_placed_memory_map_alignment: Option<DeviceAlignment>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-minSequencesCountBufferOffsetAlignment)
    pub min_sequences_count_buffer_offset_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.html#limits-minSequencesIndexBufferOffsetAlignment)
    pub min_sequences_index_buffer_offset_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-minSgprAllocation)
    pub min_sgpr_allocation: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minStorageBufferOffsetAlignment)
    pub min_storage_buffer_offset_alignment: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-minSubgroupSize)
    pub min_subgroup_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minTexelBufferOffsetAlignment)
    pub min_texel_buffer_offset_alignment: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minTexelGatherOffset)
    pub min_texel_gather_offset: i32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minTexelOffset)
    pub min_texel_offset: i32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-minUniformBufferOffsetAlignment)
    pub min_uniform_buffer_offset_alignment: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetPropertiesKHR.html#limits-minVertexInputBindingStrideAlignment)
    pub min_vertex_input_binding_stride_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-minVgprAllocation)
    pub min_vgpr_allocation: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-minWidth)
    pub min_width: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-mipmapPrecisionBits)
    pub mipmap_precision_bits: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-nonCoherentAtomSize)
    pub non_coherent_atom_size: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-nonStrictSinglePixelWideLinesUseParallelogram)
    pub non_strict_single_pixel_wide_lines_use_parallelogram: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-nonStrictWideLinesUseParallelogram)
    pub non_strict_wide_lines_use_parallelogram: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolvePropertiesANDROID.html#limits-nullColorAttachmentWithExternalFormatResolve)
    pub null_color_attachment_with_external_format_resolve: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-optimalBufferCopyOffsetAlignment)
    pub optimal_buffer_copy_offset_alignment: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-optimalBufferCopyRowPitchAlignment)
    pub optimal_buffer_copy_row_pitch_alignment: DeviceAlignment,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyPropertiesEXT.html#limits-optimalTilingLayoutUUID)
    pub optimal_tiling_layout_uuid: Option<[u8; 16usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html#limits-pciBus)
    pub pci_bus: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html#limits-pciDevice)
    pub pci_device: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html#limits-pciDomain)
    pub pci_domain: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePCIBusInfoPropertiesEXT.html#limits-pciFunction)
    pub pci_function: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.html#limits-perViewPositionAllComponents)
    pub per_view_position_all_components: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-pipelineCacheUUID)
    pub pipeline_cache_uuid: [u8; 16usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesARM.html#limits-pixelRate)
    pub pixel_rate: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-pointClippingBehavior)
    pub point_clipping_behavior: Option<PointClippingBehavior>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-pointSizeGranularity)
    pub point_size_granularity: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-pointSizeRange)
    pub point_size_range: [f32; 2usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5PropertiesKHR.html#limits-polygonModePointSize)
    pub polygon_mode_point_size: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-prefersCompactPrimitiveOutput)
    pub prefers_compact_primitive_output: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-prefersCompactVertexOutput)
    pub prefers_compact_vertex_output: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-prefersLocalInvocationPrimitiveOutput)
    pub prefers_local_invocation_primitive_output: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderPropertiesEXT.html#limits-prefersLocalInvocationVertexOutput)
    pub prefers_local_invocation_vertex_output: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-primaryMajor)
    pub primary_major: Option<i64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-primaryMinor)
    pub primary_minor: Option<i64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRatePropertiesKHR.html#limits-primitiveFragmentShadingRateWithMultipleViewports)
    pub primitive_fragment_shading_rate_with_multiple_viewports: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-primitiveOverestimationSize)
    pub primitive_overestimation_size: Option<f32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConservativeRasterizationPropertiesEXT.html#limits-primitiveUnderestimation)
    pub primitive_underestimation: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-protectedNoFault)
    pub protected_no_fault: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexPropertiesEXT.html#limits-provokingVertexModePerPipeline)
    pub provoking_vertex_mode_per_pipeline: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-quadDivergentImplicitLod)
    pub quad_divergent_implicit_lod: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html#limits-quadOperationsInAllStages)
    pub quad_operations_in_all_stages: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV.html#limits-rayTracingInvocationReorderReorderingHint)
    pub ray_tracing_invocation_reorder_reordering_hint: Option<
        RayTracingInvocationReorderMode,
    >,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-renderMajor)
    pub render_major: Option<i64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDrmPropertiesEXT.html#limits-renderMinor)
    pub render_minor: Option<i64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRenderPassStripedPropertiesARM.html#limits-renderPassStripeGranularity)
    pub render_pass_stripe_granularity: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-requiredSubgroupSizeStages)
    pub required_subgroup_size_stages: Option<ShaderStages>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html#limits-residencyAlignedMipSize)
    pub residency_aligned_mip_size: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html#limits-residencyNonResidentStrict)
    pub residency_non_resident_strict: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html#limits-residencyStandard2DBlockShape)
    pub residency_standard2_d_block_shape: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html#limits-residencyStandard2DMultisampleBlockShape)
    pub residency_standard2_d_multisample_block_shape: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html#limits-residencyStandard3DBlockShape)
    pub residency_standard3_d_block_shape: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-resourceDescriptorBufferAddressSpaceSize)
    pub resource_descriptor_buffer_address_space_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-robustBufferAccessUpdateAfterBind)
    pub robust_buffer_access_update_after_bind: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2PropertiesEXT.html#limits-robustStorageBufferAccessSizeAlignment)
    pub robust_storage_buffer_access_size_alignment: Option<DeviceAlignment>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-robustStorageBufferDescriptorSize)
    pub robust_storage_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-robustStorageTexelBufferDescriptorSize)
    pub robust_storage_texel_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2PropertiesEXT.html#limits-robustUniformBufferAccessSizeAlignment)
    pub robust_uniform_buffer_access_size_alignment: Option<DeviceAlignment>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-robustUniformBufferDescriptorSize)
    pub robust_uniform_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-robustUniformTexelBufferDescriptorSize)
    pub robust_uniform_texel_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-roundingModeIndependence)
    pub rounding_mode_independence: Option<ShaderFloatControlsIndependence>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html#limits-sampleLocationCoordinateRange)
    pub sample_location_coordinate_range: Option<[f32; 2usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html#limits-sampleLocationSampleCounts)
    pub sample_location_sample_counts: Option<SampleCounts>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html#limits-sampleLocationSubPixelBits)
    pub sample_location_sub_pixel_bits: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-sampledImageColorSampleCounts)
    pub sampled_image_color_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-sampledImageDepthSampleCounts)
    pub sampled_image_depth_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-sampledImageDescriptorSize)
    pub sampled_image_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-sampledImageIntegerSampleCounts)
    pub sampled_image_integer_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-sampledImageStencilSampleCounts)
    pub sampled_image_stencil_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-samplerCaptureReplayDescriptorDataSize)
    pub sampler_capture_replay_descriptor_data_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-samplerDescriptorBufferAddressSpaceSize)
    pub sampler_descriptor_buffer_address_space_size: Option<DeviceSize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-samplerDescriptorSize)
    pub sampler_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSchedulingControlsPropertiesARM.html#limits-schedulingControlsFlags)
    pub scheduling_controls_flags: Option<PhysicalDeviceSchedulingControlsFlags>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-sgprAllocationGranularity)
    pub sgpr_allocation_granularity: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-sgprsPerSimd)
    pub sgprs_per_simd: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-shaderArraysPerEngineCount)
    pub shader_arrays_per_engine_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderObjectPropertiesEXT.html#limits-shaderBinaryUUID)
    pub shader_binary_uuid: Option<[u8; 16usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderObjectPropertiesEXT.html#limits-shaderBinaryVersion)
    pub shader_binary_version: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.html#limits-shaderCoreCount)
    pub shader_core_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreProperties2AMD.html#limits-shaderCoreFeatures)
    pub shader_core_features: Option<ShaderCoreProperties>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.html#limits-shaderCoreMask)
    pub shader_core_mask: Option<u64>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormFlushToZeroFloat16)
    pub shader_denorm_flush_to_zero_float16: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormFlushToZeroFloat32)
    pub shader_denorm_flush_to_zero_float32: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormFlushToZeroFloat64)
    pub shader_denorm_flush_to_zero_float64: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormPreserveFloat16)
    pub shader_denorm_preserve_float16: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormPreserveFloat32)
    pub shader_denorm_preserve_float32: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderDenormPreserveFloat64)
    pub shader_denorm_preserve_float64: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-shaderEngineCount)
    pub shader_engine_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-shaderGroupBaseAlignment)
    pub shader_group_base_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-shaderGroupHandleAlignment)
    pub shader_group_handle_alignment: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-shaderGroupHandleCaptureReplaySize)
    pub shader_group_handle_capture_replay_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelinePropertiesKHR.html#limits-shaderGroupHandleSize)
    pub shader_group_handle_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderInputAttachmentArrayNonUniformIndexingNative)
    pub shader_input_attachment_array_non_uniform_indexing_native: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT.html#limits-shaderModuleIdentifierAlgorithmUUID)
    pub shader_module_identifier_algorithm_uuid: Option<[u8; 16usize]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTEFloat16)
    pub shader_rounding_mode_rte_float16: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTEFloat32)
    pub shader_rounding_mode_rte_float32: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTEFloat64)
    pub shader_rounding_mode_rte_float64: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTZFloat16)
    pub shader_rounding_mode_rtz_float16: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTZFloat32)
    pub shader_rounding_mode_rtz_float32: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderRoundingModeRTZFloat64)
    pub shader_rounding_mode_rtz_float64: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderSampledImageArrayNonUniformIndexingNative)
    pub shader_sampled_image_array_non_uniform_indexing_native: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderSignedZeroInfNanPreserveFloat16)
    pub shader_signed_zero_inf_nan_preserve_float16: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderSignedZeroInfNanPreserveFloat32)
    pub shader_signed_zero_inf_nan_preserve_float32: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderSignedZeroInfNanPreserveFloat64)
    pub shader_signed_zero_inf_nan_preserve_float64: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.html#limits-shaderSMCount)
    pub shader_sm_count: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderStorageBufferArrayNonUniformIndexingNative)
    pub shader_storage_buffer_array_non_uniform_indexing_native: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderStorageImageArrayNonUniformIndexingNative)
    pub shader_storage_image_array_non_uniform_indexing_native: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImagePropertiesEXT.html#limits-shaderTileImageCoherentReadAccelerated)
    pub shader_tile_image_coherent_read_accelerated: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImagePropertiesEXT.html#limits-shaderTileImageReadFromHelperInvocation)
    pub shader_tile_image_read_from_helper_invocation: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImagePropertiesEXT.html#limits-shaderTileImageReadSampleFromPixelRateInvocation)
    pub shader_tile_image_read_sample_from_pixel_rate_invocation: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-shaderUniformBufferArrayNonUniformIndexingNative)
    pub shader_uniform_buffer_array_non_uniform_indexing_native: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM.html#limits-shaderWarpsPerCore)
    pub shader_warps_per_core: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.html#limits-shaderWarpsPerSM)
    pub shader_warps_per_sm: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImagePropertiesNV.html#limits-shadingRateMaxCoarseSamples)
    pub shading_rate_max_coarse_samples: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImagePropertiesNV.html#limits-shadingRatePaletteSize)
    pub shading_rate_palette_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImagePropertiesNV.html#limits-shadingRateTexelSize)
    pub shading_rate_texel_size: Option<[u32; 2]>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-simdPerComputeUnit)
    pub simd_per_compute_unit: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-sparseAddressSpaceSize)
    pub sparse_address_space_size: DeviceSize,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-standardSampleLocations)
    pub standard_sample_locations: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-storageBufferDescriptorSize)
    pub storage_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-storageImageDescriptorSize)
    pub storage_image_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-storageImageSampleCounts)
    pub storage_image_sample_counts: SampleCounts,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-storageTexelBufferDescriptorSize)
    pub storage_texel_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-storageTexelBufferOffsetAlignmentBytes)
    pub storage_texel_buffer_offset_alignment_bytes: Option<DeviceAlignment>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-storageTexelBufferOffsetSingleTexelAlignment)
    pub storage_texel_buffer_offset_single_texel_alignment: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-strictLines)
    pub strict_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-subPixelInterpolationOffsetBits)
    pub sub_pixel_interpolation_offset_bits: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-subPixelPrecisionBits)
    pub sub_pixel_precision_bits: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-subTexelPrecisionBits)
    pub sub_texel_precision_bits: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-subgroupQuadOperationsInAllStages)
    pub subgroup_quad_operations_in_all_stages: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-subgroupSize)
    pub subgroup_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-subgroupSupportedOperations)
    pub subgroup_supported_operations: Option<SubgroupFeatures>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Properties.html#limits-subgroupSupportedStages)
    pub subgroup_supported_stages: Option<ShaderStages>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html#limits-subsampledCoarseReconstructionEarlyAccess)
    pub subsampled_coarse_reconstruction_early_access: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.html#limits-subsampledLoads)
    pub subsampled_loads: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-supportedDepthResolveModes)
    pub supported_depth_resolve_modes: Option<ResolveModes>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-supportedHintGridSizes)
    pub supported_hint_grid_sizes: Option<OpticalFlowGridSizes>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html#limits-supportedOperations)
    pub supported_operations: Option<SubgroupFeatures>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowPropertiesNV.html#limits-supportedOutputGridSizes)
    pub supported_output_grid_sizes: Option<OpticalFlowGridSizes>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCopyMemoryIndirectPropertiesNV.html#limits-supportedQueues)
    pub supported_queues: Option<QueueFlags>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html#limits-supportedStages)
    pub supported_stages: Option<ShaderStages>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Properties.html#limits-supportedStencilResolveModes)
    pub supported_stencil_resolve_modes: Option<ResolveModes>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR.html#limits-supportsNonZeroFirstInstance)
    pub supports_non_zero_first_instance: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesARM.html#limits-texelRate)
    pub texel_rate: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-timestampComputeAndGraphics)
    pub timestamp_compute_and_graphics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-timestampPeriod)
    pub timestamp_period: f32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-transformFeedbackDraw)
    pub transform_feedback_draw: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexPropertiesEXT.html#limits-transformFeedbackPreservesTriangleFanProvokingVertex)
    pub transform_feedback_preserves_triangle_fan_provoking_vertex: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-transformFeedbackQueries)
    pub transform_feedback_queries: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-transformFeedbackRasterizationStreamSelect)
    pub transform_feedback_rasterization_stream_select: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackPropertiesEXT.html#limits-transformFeedbackStreamsLinesTriangles)
    pub transform_feedback_streams_lines_triangles: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR.html#limits-triStripVertexOrderIndependentOfProvokingVertex)
    pub tri_strip_vertex_order_independent_of_provoking_vertex: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLayeredDriverPropertiesMSFT.html#limits-underlyingAPI)
    pub underlying_api: Option<LayeredDriverUnderlyingApi>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-uniformBufferDescriptorSize)
    pub uniform_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferPropertiesEXT.html#limits-uniformTexelBufferDescriptorSize)
    pub uniform_texel_buffer_descriptor_size: Option<usize>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-uniformTexelBufferOffsetAlignmentBytes)
    pub uniform_texel_buffer_offset_alignment_bytes: Option<DeviceAlignment>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Properties.html#limits-uniformTexelBufferOffsetSingleTexelAlignment)
    pub uniform_texel_buffer_offset_single_texel_alignment: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSampleLocationsPropertiesEXT.html#limits-variableSampleLocations)
    pub variable_sample_locations: Option<bool>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html#limits-vendorID)
    pub vendor_id: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-vgprAllocationGranularity)
    pub vgpr_allocation_granularity: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-vgprsPerSimd)
    pub vgprs_per_simd: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-viewportBoundsRange)
    pub viewport_bounds_range: [f32; 2usize],
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html#limits-viewportSubPixelBits)
    pub viewport_sub_pixel_bits: u32,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-wavefrontSize)
    pub wavefront_size: Option<u32>,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCorePropertiesAMD.html#limits-wavefrontsPerSimd)
    pub wavefronts_per_simd: Option<u32>,
    pub _ne: crate::NonExhaustive,
}
impl DeviceProperties {
    pub(crate) fn to_mut_vk() -> ash::vk::PhysicalDeviceProperties {
        ash::vk::PhysicalDeviceProperties::default()
    }
    pub(crate) fn to_mut_vk2<'a>(
        extensions_vk: &'a mut PhysicalDeviceProperties2ExtensionsVk<'_>,
    ) -> ash::vk::PhysicalDeviceProperties2<'a> {
        let mut val_vk = ash::vk::PhysicalDeviceProperties2::default();
        if let Some(next) = &mut extensions_vk.vulkan11_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.vulkan12_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.vulkan13_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.id_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.maintenance3_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.multiview_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.point_clipping_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.protected_memory_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.subgroup_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.depth_stencil_resolve_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.descriptor_indexing_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.driver_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.float_controls_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.sampler_filter_minmax_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.timeline_semaphore_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.inline_uniform_block_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.maintenance4_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_integer_dot_product_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.subgroup_size_control_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.texel_buffer_alignment_properties_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.acceleration_structure_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.cooperative_matrix_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .fragment_shader_barycentric_properties_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.fragment_shading_rate_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.line_rasterization_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.maintenance5_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.maintenance6_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.performance_query_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.portability_subset_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.push_descriptor_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.ray_tracing_pipeline_properties_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.vertex_attribute_divisor_properties_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.blend_operation_advanced_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .conservative_rasterization_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.custom_border_color_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .descriptor_buffer_density_map_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.descriptor_buffer_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.discard_rectangle_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.drm_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.extended_dynamic_state3_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.external_memory_host_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.fragment_density_map2_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.fragment_density_map_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .graphics_pipeline_library_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.host_image_copy_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.map_memory_placed_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.mesh_shader_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.multi_draw_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.nested_command_buffer_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.opacity_micromap_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.pci_bus_info_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.pipeline_robustness_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.provoking_vertex_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.robustness2_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.sample_locations_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_module_identifier_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_object_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_tile_image_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.transform_feedback_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.vertex_attribute_divisor_properties_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .cluster_culling_shader_properties_huawei_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.cooperative_matrix_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.copy_memory_indirect_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.cuda_kernel_launch_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.device_generated_commands_properties_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.displacement_micromap_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .extended_sparse_address_space_properties_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .external_format_resolve_properties_android_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .fragment_density_map_offset_properties_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .fragment_shading_rate_enums_properties_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.image_processing2_properties_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.image_processing_properties_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.layered_driver_properties_msft_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.memory_decompression_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.mesh_shader_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .multiview_per_view_attributes_properties_nvx_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.optical_flow_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .ray_tracing_invocation_reorder_properties_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.ray_tracing_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.render_pass_striped_properties_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.scheduling_controls_properties_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_core_builtins_properties_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_core_properties2_amd_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_core_properties_amd_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_core_properties_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_enqueue_properties_amdx_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shader_sm_builtins_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.shading_rate_image_properties_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.subpass_shading_properties_huawei_vk {
            val_vk = val_vk.push_next(next);
        }
        val_vk
    }
    pub(crate) fn to_mut_vk2_extensions<'a>(
        fields1_vk: &'a mut PhysicalDeviceProperties2Fields1Vk,
        api_version: Version,
        device_extensions: &DeviceExtensions,
        instance_extensions: &InstanceExtensions,
    ) -> PhysicalDeviceProperties2ExtensionsVk<'a> {
        let PhysicalDeviceProperties2Fields1Vk {
            physical_device_host_image_copy_properties_ext_fields1_vk,
        } = fields1_vk;
        PhysicalDeviceProperties2ExtensionsVk {
            vulkan11_properties_vk: (api_version >= Version::V1_2)
                .then(<ash::vk::PhysicalDeviceVulkan11Properties<'_>>::default),
            vulkan12_properties_vk: (api_version >= Version::V1_2)
                .then(<ash::vk::PhysicalDeviceVulkan12Properties<'_>>::default),
            vulkan13_properties_vk: (api_version >= Version::V1_3)
                .then(<ash::vk::PhysicalDeviceVulkan13Properties<'_>>::default),
            id_properties_vk: (api_version >= Version::V1_1
                || instance_extensions.khr_external_fence_capabilities
                || instance_extensions.khr_external_memory_capabilities
                || instance_extensions.khr_external_semaphore_capabilities)
                .then(<ash::vk::PhysicalDeviceIDProperties<'_>>::default),
            maintenance3_properties_vk: (api_version >= Version::V1_1
                || device_extensions.khr_maintenance3)
                .then(<ash::vk::PhysicalDeviceMaintenance3Properties<'_>>::default),
            multiview_properties_vk: (api_version >= Version::V1_1
                || device_extensions.khr_multiview)
                .then(<ash::vk::PhysicalDeviceMultiviewProperties<'_>>::default),
            point_clipping_properties_vk: (api_version >= Version::V1_1
                || device_extensions.khr_maintenance2)
                .then(<ash::vk::PhysicalDevicePointClippingProperties<'_>>::default),
            protected_memory_properties_vk: (api_version >= Version::V1_1)
                .then(<ash::vk::PhysicalDeviceProtectedMemoryProperties<'_>>::default),
            subgroup_properties_vk: (api_version >= Version::V1_1)
                .then(<ash::vk::PhysicalDeviceSubgroupProperties<'_>>::default),
            depth_stencil_resolve_properties_vk: (api_version >= Version::V1_2
                || device_extensions.khr_depth_stencil_resolve)
                .then(
                    <ash::vk::PhysicalDeviceDepthStencilResolveProperties<'_>>::default,
                ),
            descriptor_indexing_properties_vk: (api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
                .then(
                    <ash::vk::PhysicalDeviceDescriptorIndexingProperties<'_>>::default,
                ),
            driver_properties_vk: (api_version >= Version::V1_2
                || device_extensions.khr_driver_properties)
                .then(<ash::vk::PhysicalDeviceDriverProperties<'_>>::default),
            float_controls_properties_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_float_controls)
                .then(<ash::vk::PhysicalDeviceFloatControlsProperties<'_>>::default),
            sampler_filter_minmax_properties_vk: (api_version >= Version::V1_2
                || device_extensions.ext_sampler_filter_minmax)
                .then(
                    <ash::vk::PhysicalDeviceSamplerFilterMinmaxProperties<'_>>::default,
                ),
            timeline_semaphore_properties_vk: (api_version >= Version::V1_2
                || device_extensions.khr_timeline_semaphore)
                .then(<ash::vk::PhysicalDeviceTimelineSemaphoreProperties<'_>>::default),
            inline_uniform_block_properties_vk: (api_version >= Version::V1_3
                || device_extensions.ext_inline_uniform_block)
                .then(
                    <ash::vk::PhysicalDeviceInlineUniformBlockProperties<'_>>::default,
                ),
            maintenance4_properties_vk: (api_version >= Version::V1_3
                || device_extensions.khr_maintenance4)
                .then(<ash::vk::PhysicalDeviceMaintenance4Properties<'_>>::default),
            shader_integer_dot_product_properties_vk: (api_version >= Version::V1_3
                || device_extensions.khr_shader_integer_dot_product)
                .then(
                    <ash::vk::PhysicalDeviceShaderIntegerDotProductProperties<
                        '_,
                    >>::default,
                ),
            subgroup_size_control_properties_vk: (api_version >= Version::V1_3
                || device_extensions.ext_subgroup_size_control)
                .then(
                    <ash::vk::PhysicalDeviceSubgroupSizeControlProperties<'_>>::default,
                ),
            texel_buffer_alignment_properties_vk: (api_version >= Version::V1_3
                || device_extensions.ext_texel_buffer_alignment)
                .then(
                    <ash::vk::PhysicalDeviceTexelBufferAlignmentProperties<'_>>::default,
                ),
            acceleration_structure_properties_khr_vk: (device_extensions
                .khr_acceleration_structure)
                .then(
                    <ash::vk::PhysicalDeviceAccelerationStructurePropertiesKHR<
                        '_,
                    >>::default,
                ),
            cooperative_matrix_properties_khr_vk: (device_extensions
                .khr_cooperative_matrix)
                .then(
                    <ash::vk::PhysicalDeviceCooperativeMatrixPropertiesKHR<'_>>::default,
                ),
            fragment_shader_barycentric_properties_khr_vk: (device_extensions
                .khr_fragment_shader_barycentric)
                .then(
                    <ash::vk::PhysicalDeviceFragmentShaderBarycentricPropertiesKHR<
                        '_,
                    >>::default,
                ),
            fragment_shading_rate_properties_khr_vk: (device_extensions
                .khr_fragment_shading_rate)
                .then(
                    <ash::vk::PhysicalDeviceFragmentShadingRatePropertiesKHR<
                        '_,
                    >>::default,
                ),
            line_rasterization_properties_khr_vk: (device_extensions
                .khr_line_rasterization || device_extensions.ext_line_rasterization)
                .then(
                    <ash::vk::PhysicalDeviceLineRasterizationPropertiesKHR<'_>>::default,
                ),
            maintenance5_properties_khr_vk: (device_extensions.khr_maintenance5)
                .then(<ash::vk::PhysicalDeviceMaintenance5PropertiesKHR<'_>>::default),
            maintenance6_properties_khr_vk: (device_extensions.khr_maintenance6)
                .then(<ash::vk::PhysicalDeviceMaintenance6PropertiesKHR<'_>>::default),
            performance_query_properties_khr_vk: (device_extensions
                .khr_performance_query)
                .then(
                    <ash::vk::PhysicalDevicePerformanceQueryPropertiesKHR<'_>>::default,
                ),
            portability_subset_properties_khr_vk: (device_extensions
                .khr_portability_subset)
                .then(
                    <ash::vk::PhysicalDevicePortabilitySubsetPropertiesKHR<'_>>::default,
                ),
            push_descriptor_properties_khr_vk: (device_extensions.khr_push_descriptor)
                .then(<ash::vk::PhysicalDevicePushDescriptorPropertiesKHR<'_>>::default),
            ray_tracing_pipeline_properties_khr_vk: (device_extensions
                .khr_ray_tracing_pipeline)
                .then(
                    <ash::vk::PhysicalDeviceRayTracingPipelinePropertiesKHR<'_>>::default,
                ),
            vertex_attribute_divisor_properties_khr_vk: (device_extensions
                .khr_vertex_attribute_divisor)
                .then(
                    <ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesKHR<
                        '_,
                    >>::default,
                ),
            blend_operation_advanced_properties_ext_vk: (device_extensions
                .ext_blend_operation_advanced)
                .then(
                    <ash::vk::PhysicalDeviceBlendOperationAdvancedPropertiesEXT<
                        '_,
                    >>::default,
                ),
            conservative_rasterization_properties_ext_vk: (device_extensions
                .ext_conservative_rasterization)
                .then(
                    <ash::vk::PhysicalDeviceConservativeRasterizationPropertiesEXT<
                        '_,
                    >>::default,
                ),
            custom_border_color_properties_ext_vk: (device_extensions
                .ext_custom_border_color)
                .then(
                    <ash::vk::PhysicalDeviceCustomBorderColorPropertiesEXT<'_>>::default,
                ),
            descriptor_buffer_density_map_properties_ext_vk: (device_extensions
                .ext_descriptor_buffer)
                .then(
                    <ash::vk::PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT<
                        '_,
                    >>::default,
                ),
            descriptor_buffer_properties_ext_vk: (device_extensions
                .ext_descriptor_buffer)
                .then(
                    <ash::vk::PhysicalDeviceDescriptorBufferPropertiesEXT<'_>>::default,
                ),
            discard_rectangle_properties_ext_vk: (device_extensions
                .ext_discard_rectangles)
                .then(
                    <ash::vk::PhysicalDeviceDiscardRectanglePropertiesEXT<'_>>::default,
                ),
            drm_properties_ext_vk: (device_extensions.ext_physical_device_drm)
                .then(<ash::vk::PhysicalDeviceDrmPropertiesEXT<'_>>::default),
            extended_dynamic_state3_properties_ext_vk: (device_extensions
                .ext_extended_dynamic_state3)
                .then(
                    <ash::vk::PhysicalDeviceExtendedDynamicState3PropertiesEXT<
                        '_,
                    >>::default,
                ),
            external_memory_host_properties_ext_vk: (device_extensions
                .ext_external_memory_host)
                .then(
                    <ash::vk::PhysicalDeviceExternalMemoryHostPropertiesEXT<'_>>::default,
                ),
            fragment_density_map2_properties_ext_vk: (device_extensions
                .ext_fragment_density_map2)
                .then(
                    <ash::vk::PhysicalDeviceFragmentDensityMap2PropertiesEXT<
                        '_,
                    >>::default,
                ),
            fragment_density_map_properties_ext_vk: (device_extensions
                .ext_fragment_density_map)
                .then(
                    <ash::vk::PhysicalDeviceFragmentDensityMapPropertiesEXT<'_>>::default,
                ),
            graphics_pipeline_library_properties_ext_vk: (device_extensions
                .ext_graphics_pipeline_library)
                .then(
                    <ash::vk::PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT<
                        '_,
                    >>::default,
                ),
            host_image_copy_properties_ext_vk: physical_device_host_image_copy_properties_ext_fields1_vk
                .as_mut()
                .filter(|_| device_extensions.ext_host_image_copy)
                .map(|fields_struct| {
                    let PhysicalDeviceHostImageCopyPropertiesEXTFields1Vk {
                        copy_src_layouts,
                        copy_dst_layouts,
                    } = fields_struct;
                    <ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT<'_>>::default()
                        .copy_src_layouts(copy_src_layouts)
                        .copy_dst_layouts(copy_dst_layouts)
                }),
            map_memory_placed_properties_ext_vk: (device_extensions
                .ext_map_memory_placed)
                .then(
                    <ash::vk::PhysicalDeviceMapMemoryPlacedPropertiesEXT<'_>>::default,
                ),
            mesh_shader_properties_ext_vk: (device_extensions.ext_mesh_shader)
                .then(<ash::vk::PhysicalDeviceMeshShaderPropertiesEXT<'_>>::default),
            multi_draw_properties_ext_vk: (device_extensions.ext_multi_draw)
                .then(<ash::vk::PhysicalDeviceMultiDrawPropertiesEXT<'_>>::default),
            nested_command_buffer_properties_ext_vk: (device_extensions
                .ext_nested_command_buffer)
                .then(
                    <ash::vk::PhysicalDeviceNestedCommandBufferPropertiesEXT<
                        '_,
                    >>::default,
                ),
            opacity_micromap_properties_ext_vk: (device_extensions.ext_opacity_micromap)
                .then(
                    <ash::vk::PhysicalDeviceOpacityMicromapPropertiesEXT<'_>>::default,
                ),
            pci_bus_info_properties_ext_vk: (device_extensions.ext_pci_bus_info)
                .then(<ash::vk::PhysicalDevicePCIBusInfoPropertiesEXT<'_>>::default),
            pipeline_robustness_properties_ext_vk: (device_extensions
                .ext_pipeline_robustness)
                .then(
                    <ash::vk::PhysicalDevicePipelineRobustnessPropertiesEXT<'_>>::default,
                ),
            provoking_vertex_properties_ext_vk: (device_extensions.ext_provoking_vertex)
                .then(
                    <ash::vk::PhysicalDeviceProvokingVertexPropertiesEXT<'_>>::default,
                ),
            robustness2_properties_ext_vk: (device_extensions.ext_robustness2)
                .then(<ash::vk::PhysicalDeviceRobustness2PropertiesEXT<'_>>::default),
            sample_locations_properties_ext_vk: (device_extensions.ext_sample_locations)
                .then(
                    <ash::vk::PhysicalDeviceSampleLocationsPropertiesEXT<'_>>::default,
                ),
            shader_module_identifier_properties_ext_vk: (device_extensions
                .ext_shader_module_identifier)
                .then(
                    <ash::vk::PhysicalDeviceShaderModuleIdentifierPropertiesEXT<
                        '_,
                    >>::default,
                ),
            shader_object_properties_ext_vk: (device_extensions.ext_shader_object)
                .then(<ash::vk::PhysicalDeviceShaderObjectPropertiesEXT<'_>>::default),
            shader_tile_image_properties_ext_vk: (device_extensions
                .ext_shader_tile_image)
                .then(
                    <ash::vk::PhysicalDeviceShaderTileImagePropertiesEXT<'_>>::default,
                ),
            transform_feedback_properties_ext_vk: (device_extensions
                .ext_transform_feedback)
                .then(
                    <ash::vk::PhysicalDeviceTransformFeedbackPropertiesEXT<'_>>::default,
                ),
            vertex_attribute_divisor_properties_ext_vk: (device_extensions
                .ext_vertex_attribute_divisor)
                .then(
                    <ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesEXT<
                        '_,
                    >>::default,
                ),
            cluster_culling_shader_properties_huawei_vk: (device_extensions
                .huawei_cluster_culling_shader)
                .then(
                    <ash::vk::PhysicalDeviceClusterCullingShaderPropertiesHUAWEI<
                        '_,
                    >>::default,
                ),
            cooperative_matrix_properties_nv_vk: (device_extensions
                .nv_cooperative_matrix)
                .then(
                    <ash::vk::PhysicalDeviceCooperativeMatrixPropertiesNV<'_>>::default,
                ),
            copy_memory_indirect_properties_nv_vk: (device_extensions
                .nv_copy_memory_indirect)
                .then(
                    <ash::vk::PhysicalDeviceCopyMemoryIndirectPropertiesNV<'_>>::default,
                ),
            cuda_kernel_launch_properties_nv_vk: (device_extensions
                .nv_cuda_kernel_launch)
                .then(
                    <ash::vk::PhysicalDeviceCudaKernelLaunchPropertiesNV<'_>>::default,
                ),
            device_generated_commands_properties_nv_vk: (device_extensions
                .nv_device_generated_commands)
                .then(
                    <ash::vk::PhysicalDeviceDeviceGeneratedCommandsPropertiesNV<
                        '_,
                    >>::default,
                ),
            displacement_micromap_properties_nv_vk: (device_extensions
                .nv_displacement_micromap)
                .then(
                    <ash::vk::PhysicalDeviceDisplacementMicromapPropertiesNV<
                        '_,
                    >>::default,
                ),
            extended_sparse_address_space_properties_nv_vk: (device_extensions
                .nv_extended_sparse_address_space)
                .then(
                    <ash::vk::PhysicalDeviceExtendedSparseAddressSpacePropertiesNV<
                        '_,
                    >>::default,
                ),
            external_format_resolve_properties_android_vk: (device_extensions
                .android_external_format_resolve)
                .then(
                    <ash::vk::PhysicalDeviceExternalFormatResolvePropertiesANDROID<
                        '_,
                    >>::default,
                ),
            fragment_density_map_offset_properties_qcom_vk: (device_extensions
                .qcom_fragment_density_map_offset)
                .then(
                    <ash::vk::PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM<
                        '_,
                    >>::default,
                ),
            fragment_shading_rate_enums_properties_nv_vk: (device_extensions
                .nv_fragment_shading_rate_enums)
                .then(
                    <ash::vk::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV<
                        '_,
                    >>::default,
                ),
            image_processing2_properties_qcom_vk: (device_extensions
                .qcom_image_processing2)
                .then(
                    <ash::vk::PhysicalDeviceImageProcessing2PropertiesQCOM<'_>>::default,
                ),
            image_processing_properties_qcom_vk: (device_extensions
                .qcom_image_processing)
                .then(
                    <ash::vk::PhysicalDeviceImageProcessingPropertiesQCOM<'_>>::default,
                ),
            layered_driver_properties_msft_vk: (device_extensions.msft_layered_driver)
                .then(<ash::vk::PhysicalDeviceLayeredDriverPropertiesMSFT<'_>>::default),
            memory_decompression_properties_nv_vk: (device_extensions
                .nv_memory_decompression)
                .then(
                    <ash::vk::PhysicalDeviceMemoryDecompressionPropertiesNV<'_>>::default,
                ),
            mesh_shader_properties_nv_vk: (device_extensions.nv_mesh_shader)
                .then(<ash::vk::PhysicalDeviceMeshShaderPropertiesNV<'_>>::default),
            multiview_per_view_attributes_properties_nvx_vk: (device_extensions
                .nvx_multiview_per_view_attributes)
                .then(
                    <ash::vk::PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX<
                        '_,
                    >>::default,
                ),
            optical_flow_properties_nv_vk: (device_extensions.nv_optical_flow)
                .then(<ash::vk::PhysicalDeviceOpticalFlowPropertiesNV<'_>>::default),
            ray_tracing_invocation_reorder_properties_nv_vk: (device_extensions
                .nv_ray_tracing_invocation_reorder)
                .then(
                    <ash::vk::PhysicalDeviceRayTracingInvocationReorderPropertiesNV<
                        '_,
                    >>::default,
                ),
            ray_tracing_properties_nv_vk: (device_extensions.nv_ray_tracing)
                .then(<ash::vk::PhysicalDeviceRayTracingPropertiesNV<'_>>::default),
            render_pass_striped_properties_arm_vk: (device_extensions
                .arm_render_pass_striped)
                .then(
                    <ash::vk::PhysicalDeviceRenderPassStripedPropertiesARM<'_>>::default,
                ),
            scheduling_controls_properties_arm_vk: (device_extensions
                .arm_scheduling_controls)
                .then(
                    <ash::vk::PhysicalDeviceSchedulingControlsPropertiesARM<'_>>::default,
                ),
            shader_core_builtins_properties_arm_vk: (device_extensions
                .arm_shader_core_builtins)
                .then(
                    <ash::vk::PhysicalDeviceShaderCoreBuiltinsPropertiesARM<'_>>::default,
                ),
            shader_core_properties2_amd_vk: (device_extensions
                .amd_shader_core_properties2)
                .then(<ash::vk::PhysicalDeviceShaderCoreProperties2AMD<'_>>::default),
            shader_core_properties_amd_vk: (device_extensions.amd_shader_core_properties)
                .then(<ash::vk::PhysicalDeviceShaderCorePropertiesAMD<'_>>::default),
            shader_core_properties_arm_vk: (device_extensions.arm_shader_core_properties)
                .then(<ash::vk::PhysicalDeviceShaderCorePropertiesARM<'_>>::default),
            shader_enqueue_properties_amdx_vk: (device_extensions.amdx_shader_enqueue)
                .then(<ash::vk::PhysicalDeviceShaderEnqueuePropertiesAMDX<'_>>::default),
            shader_sm_builtins_properties_nv_vk: (device_extensions
                .nv_shader_sm_builtins)
                .then(
                    <ash::vk::PhysicalDeviceShaderSMBuiltinsPropertiesNV<'_>>::default,
                ),
            shading_rate_image_properties_nv_vk: (device_extensions
                .nv_shading_rate_image)
                .then(
                    <ash::vk::PhysicalDeviceShadingRateImagePropertiesNV<'_>>::default,
                ),
            subpass_shading_properties_huawei_vk: (device_extensions
                .huawei_subpass_shading)
                .then(
                    <ash::vk::PhysicalDeviceSubpassShadingPropertiesHUAWEI<'_>>::default,
                ),
        }
    }
    pub(crate) fn to_mut_vk2_extensions_query_count(
        #[allow(unused)]
        api_version: Version,
        device_extensions: &DeviceExtensions,
        #[allow(unused)]
        instance_extensions: &InstanceExtensions,
    ) -> PhysicalDeviceProperties2ExtensionsVk<'static> {
        PhysicalDeviceProperties2ExtensionsVk {
            vulkan11_properties_vk: None,
            vulkan12_properties_vk: None,
            vulkan13_properties_vk: None,
            id_properties_vk: None,
            maintenance3_properties_vk: None,
            multiview_properties_vk: None,
            point_clipping_properties_vk: None,
            protected_memory_properties_vk: None,
            subgroup_properties_vk: None,
            depth_stencil_resolve_properties_vk: None,
            descriptor_indexing_properties_vk: None,
            driver_properties_vk: None,
            float_controls_properties_vk: None,
            sampler_filter_minmax_properties_vk: None,
            timeline_semaphore_properties_vk: None,
            inline_uniform_block_properties_vk: None,
            maintenance4_properties_vk: None,
            shader_integer_dot_product_properties_vk: None,
            subgroup_size_control_properties_vk: None,
            texel_buffer_alignment_properties_vk: None,
            acceleration_structure_properties_khr_vk: None,
            cooperative_matrix_properties_khr_vk: None,
            fragment_shader_barycentric_properties_khr_vk: None,
            fragment_shading_rate_properties_khr_vk: None,
            line_rasterization_properties_khr_vk: None,
            maintenance5_properties_khr_vk: None,
            maintenance6_properties_khr_vk: None,
            performance_query_properties_khr_vk: None,
            portability_subset_properties_khr_vk: None,
            push_descriptor_properties_khr_vk: None,
            ray_tracing_pipeline_properties_khr_vk: None,
            vertex_attribute_divisor_properties_khr_vk: None,
            blend_operation_advanced_properties_ext_vk: None,
            conservative_rasterization_properties_ext_vk: None,
            custom_border_color_properties_ext_vk: None,
            descriptor_buffer_density_map_properties_ext_vk: None,
            descriptor_buffer_properties_ext_vk: None,
            discard_rectangle_properties_ext_vk: None,
            drm_properties_ext_vk: None,
            extended_dynamic_state3_properties_ext_vk: None,
            external_memory_host_properties_ext_vk: None,
            fragment_density_map2_properties_ext_vk: None,
            fragment_density_map_properties_ext_vk: None,
            graphics_pipeline_library_properties_ext_vk: None,
            host_image_copy_properties_ext_vk: (device_extensions.ext_host_image_copy)
                .then(<ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT<'_>>::default),
            map_memory_placed_properties_ext_vk: None,
            mesh_shader_properties_ext_vk: None,
            multi_draw_properties_ext_vk: None,
            nested_command_buffer_properties_ext_vk: None,
            opacity_micromap_properties_ext_vk: None,
            pci_bus_info_properties_ext_vk: None,
            pipeline_robustness_properties_ext_vk: None,
            provoking_vertex_properties_ext_vk: None,
            robustness2_properties_ext_vk: None,
            sample_locations_properties_ext_vk: None,
            shader_module_identifier_properties_ext_vk: None,
            shader_object_properties_ext_vk: None,
            shader_tile_image_properties_ext_vk: None,
            transform_feedback_properties_ext_vk: None,
            vertex_attribute_divisor_properties_ext_vk: None,
            cluster_culling_shader_properties_huawei_vk: None,
            cooperative_matrix_properties_nv_vk: None,
            copy_memory_indirect_properties_nv_vk: None,
            cuda_kernel_launch_properties_nv_vk: None,
            device_generated_commands_properties_nv_vk: None,
            displacement_micromap_properties_nv_vk: None,
            extended_sparse_address_space_properties_nv_vk: None,
            external_format_resolve_properties_android_vk: None,
            fragment_density_map_offset_properties_qcom_vk: None,
            fragment_shading_rate_enums_properties_nv_vk: None,
            image_processing2_properties_qcom_vk: None,
            image_processing_properties_qcom_vk: None,
            layered_driver_properties_msft_vk: None,
            memory_decompression_properties_nv_vk: None,
            mesh_shader_properties_nv_vk: None,
            multiview_per_view_attributes_properties_nvx_vk: None,
            optical_flow_properties_nv_vk: None,
            ray_tracing_invocation_reorder_properties_nv_vk: None,
            ray_tracing_properties_nv_vk: None,
            render_pass_striped_properties_arm_vk: None,
            scheduling_controls_properties_arm_vk: None,
            shader_core_builtins_properties_arm_vk: None,
            shader_core_properties2_amd_vk: None,
            shader_core_properties_amd_vk: None,
            shader_core_properties_arm_vk: None,
            shader_enqueue_properties_amdx_vk: None,
            shader_sm_builtins_properties_nv_vk: None,
            shading_rate_image_properties_nv_vk: None,
            subpass_shading_properties_huawei_vk: None,
        }
    }
    pub(crate) fn to_mut_vk2_fields1(
        extensions_vk: PhysicalDeviceProperties2ExtensionsVk<'_>,
    ) -> PhysicalDeviceProperties2Fields1Vk {
        let PhysicalDeviceProperties2ExtensionsVk {
            host_image_copy_properties_ext_vk,
            ..
        } = extensions_vk;
        PhysicalDeviceProperties2Fields1Vk {
            physical_device_host_image_copy_properties_ext_fields1_vk: host_image_copy_properties_ext_vk
                .map(|val_vk| {
                    let ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT {
                        copy_src_layout_count,
                        copy_dst_layout_count,
                        ..
                    } = val_vk;
                    PhysicalDeviceHostImageCopyPropertiesEXTFields1Vk {
                        copy_src_layouts: vec![
                            Default::default(); copy_src_layout_count as usize
                        ],
                        copy_dst_layouts: vec![
                            Default::default(); copy_dst_layout_count as usize
                        ],
                    }
                }),
        }
    }
    pub(crate) fn from_vk(val_vk: &ash::vk::PhysicalDeviceProperties) -> Self {
        let ash::vk::PhysicalDeviceProperties { limits, sparse_properties, .. } = val_vk;
        let &ash::vk::PhysicalDeviceProperties {
            api_version,
            driver_version,
            vendor_id,
            device_id,
            device_type,
            device_name,
            pipeline_cache_uuid,
            ..
        } = val_vk;
        let &ash::vk::PhysicalDeviceLimits {
            max_image_dimension1_d,
            max_image_dimension2_d,
            max_image_dimension3_d,
            max_image_dimension_cube,
            max_image_array_layers,
            max_texel_buffer_elements,
            max_uniform_buffer_range,
            max_storage_buffer_range,
            max_push_constants_size,
            max_memory_allocation_count,
            max_sampler_allocation_count,
            buffer_image_granularity,
            sparse_address_space_size,
            max_bound_descriptor_sets,
            max_per_stage_descriptor_samplers,
            max_per_stage_descriptor_uniform_buffers,
            max_per_stage_descriptor_storage_buffers,
            max_per_stage_descriptor_sampled_images,
            max_per_stage_descriptor_storage_images,
            max_per_stage_descriptor_input_attachments,
            max_per_stage_resources,
            max_descriptor_set_samplers,
            max_descriptor_set_uniform_buffers,
            max_descriptor_set_uniform_buffers_dynamic,
            max_descriptor_set_storage_buffers,
            max_descriptor_set_storage_buffers_dynamic,
            max_descriptor_set_sampled_images,
            max_descriptor_set_storage_images,
            max_descriptor_set_input_attachments,
            max_vertex_input_attributes,
            max_vertex_input_bindings,
            max_vertex_input_attribute_offset,
            max_vertex_input_binding_stride,
            max_vertex_output_components,
            max_tessellation_generation_level,
            max_tessellation_patch_size,
            max_tessellation_control_per_vertex_input_components,
            max_tessellation_control_per_vertex_output_components,
            max_tessellation_control_per_patch_output_components,
            max_tessellation_control_total_output_components,
            max_tessellation_evaluation_input_components,
            max_tessellation_evaluation_output_components,
            max_geometry_shader_invocations,
            max_geometry_input_components,
            max_geometry_output_components,
            max_geometry_output_vertices,
            max_geometry_total_output_components,
            max_fragment_input_components,
            max_fragment_output_attachments,
            max_fragment_dual_src_attachments,
            max_fragment_combined_output_resources,
            max_compute_shared_memory_size,
            max_compute_work_group_count,
            max_compute_work_group_invocations,
            max_compute_work_group_size,
            sub_pixel_precision_bits,
            sub_texel_precision_bits,
            mipmap_precision_bits,
            max_draw_indexed_index_value,
            max_draw_indirect_count,
            max_sampler_lod_bias,
            max_sampler_anisotropy,
            max_viewports,
            max_viewport_dimensions,
            viewport_bounds_range,
            viewport_sub_pixel_bits,
            min_memory_map_alignment,
            min_texel_buffer_offset_alignment,
            min_uniform_buffer_offset_alignment,
            min_storage_buffer_offset_alignment,
            min_texel_offset,
            max_texel_offset,
            min_texel_gather_offset,
            max_texel_gather_offset,
            min_interpolation_offset,
            max_interpolation_offset,
            sub_pixel_interpolation_offset_bits,
            max_framebuffer_width,
            max_framebuffer_height,
            max_framebuffer_layers,
            framebuffer_color_sample_counts,
            framebuffer_depth_sample_counts,
            framebuffer_stencil_sample_counts,
            framebuffer_no_attachments_sample_counts,
            max_color_attachments,
            sampled_image_color_sample_counts,
            sampled_image_integer_sample_counts,
            sampled_image_depth_sample_counts,
            sampled_image_stencil_sample_counts,
            storage_image_sample_counts,
            max_sample_mask_words,
            timestamp_compute_and_graphics,
            timestamp_period,
            max_clip_distances,
            max_cull_distances,
            max_combined_clip_and_cull_distances,
            discrete_queue_priorities,
            point_size_range,
            line_width_range,
            point_size_granularity,
            line_width_granularity,
            strict_lines,
            standard_sample_locations,
            optimal_buffer_copy_offset_alignment,
            optimal_buffer_copy_row_pitch_alignment,
            non_coherent_atom_size,
            ..
        } = limits;
        let &ash::vk::PhysicalDeviceSparseProperties {
            residency_standard2_d_block_shape,
            residency_standard2_d_multisample_block_shape,
            residency_standard3_d_block_shape,
            residency_aligned_mip_size,
            residency_non_resident_strict,
            ..
        } = sparse_properties;
        Self {
            acceleration_structure_capture_replay_descriptor_data_size: None,
            acceleration_structure_descriptor_size: None,
            active_compute_unit_count: None,
            advanced_blend_all_operations: None,
            advanced_blend_correlated_overlap: None,
            advanced_blend_independent_blend: None,
            advanced_blend_max_color_attachments: None,
            advanced_blend_non_premultiplied_dst_color: None,
            advanced_blend_non_premultiplied_src_color: None,
            allow_command_buffer_query_copies: None,
            allow_sampler_image_view_post_submit_creation: None,
            api_version: <Version>::from_vulkan(api_version).unwrap(),
            bidirectional_flow_supported: None,
            block_texel_view_compatible_multiple_layers: None,
            buffer_capture_replay_descriptor_data_size: None,
            buffer_image_granularity: <DeviceAlignment>::from_vulkan(
                    buffer_image_granularity,
                )
                .unwrap(),
            bufferless_push_descriptors: None,
            combined_image_sampler_density_map_descriptor_size: None,
            combined_image_sampler_descriptor_single_array: None,
            combined_image_sampler_descriptor_size: None,
            compute_capability_major: None,
            compute_capability_minor: None,
            compute_units_per_shader_array: None,
            conformance_version: None,
            conservative_point_and_line_rasterization: None,
            conservative_rasterization_post_depth_coverage: None,
            cooperative_matrix_supported_stages: None,
            copy_dst_layouts: None,
            copy_src_layouts: None,
            cost_supported: None,
            decompression_methods: None,
            default_robustness_images: None,
            default_robustness_storage_buffers: None,
            default_robustness_uniform_buffers: None,
            default_robustness_vertex_inputs: None,
            degenerate_lines_rasterized: None,
            degenerate_triangles_rasterized: None,
            denorm_behavior_independence: None,
            depth_stencil_swizzle_one_support: None,
            descriptor_buffer_address_space_size: None,
            descriptor_buffer_offset_alignment: None,
            device_id: <u32>::from_vulkan(device_id).unwrap(),
            device_luid: None,
            device_luid_valid: None,
            device_name: <String>::from_vulkan(device_name).unwrap(),
            device_node_mask: None,
            device_type: <PhysicalDeviceType>::from_vulkan(device_type).unwrap(),
            device_uuid: None,
            discrete_queue_priorities: <u32>::from_vulkan(discrete_queue_priorities)
                .unwrap(),
            driver_id: None,
            driver_info: None,
            driver_name: None,
            driver_uuid: None,
            driver_version: <u32>::from_vulkan(driver_version).unwrap(),
            dynamic_primitive_topology_unrestricted: None,
            early_fragment_multisample_coverage_after_sample_counting: None,
            early_fragment_sample_mask_test_before_sample_counting: None,
            execution_graph_dispatch_address_alignment: None,
            extended_sparse_address_space_size: None,
            extended_sparse_buffer_usage_flags: None,
            extended_sparse_image_usage_flags: None,
            external_format_resolve_chroma_offset_x: None,
            external_format_resolve_chroma_offset_y: None,
            extra_primitive_overestimation_size_granularity: None,
            filter_minmax_image_component_mapping: None,
            filter_minmax_single_component_formats: None,
            fma_rate: None,
            fragment_density_invocations: None,
            fragment_density_offset_granularity: None,
            fragment_shading_rate_clamp_combiner_inputs: None,
            fragment_shading_rate_non_trivial_combiner_ops: None,
            fragment_shading_rate_strict_multiply_combiner: None,
            fragment_shading_rate_with_conservative_rasterization: None,
            fragment_shading_rate_with_custom_sample_locations: None,
            fragment_shading_rate_with_fragment_shader_interlock: None,
            fragment_shading_rate_with_sample_mask: None,
            fragment_shading_rate_with_shader_depth_stencil_writes: None,
            fragment_shading_rate_with_shader_sample_mask: None,
            framebuffer_color_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_color_sample_counts,
                )
                .unwrap(),
            framebuffer_depth_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_depth_sample_counts,
                )
                .unwrap(),
            framebuffer_integer_color_sample_counts: None,
            framebuffer_no_attachments_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_no_attachments_sample_counts,
                )
                .unwrap(),
            framebuffer_stencil_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_stencil_sample_counts,
                )
                .unwrap(),
            fully_covered_fragment_shader_input_variable: None,
            global_flow_supported: None,
            graphics_pipeline_library_fast_linking: None,
            graphics_pipeline_library_independent_interpolation_decoration: None,
            has_primary: None,
            has_render: None,
            hint_supported: None,
            identical_memory_type_requirements: None,
            image_capture_replay_descriptor_data_size: None,
            image_view_capture_replay_descriptor_data_size: None,
            independent_resolve: None,
            independent_resolve_none: None,
            indirect_buffer_offset_alignment: None,
            input_attachment_descriptor_size: None,
            integer_dot_product16_bit_mixed_signedness_accelerated: None,
            integer_dot_product16_bit_signed_accelerated: None,
            integer_dot_product16_bit_unsigned_accelerated: None,
            integer_dot_product32_bit_mixed_signedness_accelerated: None,
            integer_dot_product32_bit_signed_accelerated: None,
            integer_dot_product32_bit_unsigned_accelerated: None,
            integer_dot_product4x8_bit_packed_mixed_signedness_accelerated: None,
            integer_dot_product4x8_bit_packed_signed_accelerated: None,
            integer_dot_product4x8_bit_packed_unsigned_accelerated: None,
            integer_dot_product64_bit_mixed_signedness_accelerated: None,
            integer_dot_product64_bit_signed_accelerated: None,
            integer_dot_product64_bit_unsigned_accelerated: None,
            integer_dot_product8_bit_mixed_signedness_accelerated: None,
            integer_dot_product8_bit_signed_accelerated: None,
            integer_dot_product8_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated: None,
            layered_shading_rate_attachments: None,
            line_sub_pixel_precision_bits: None,
            line_width_granularity: <f32>::from_vulkan(line_width_granularity).unwrap(),
            line_width_range: <[f32; 2usize]>::from_vulkan(line_width_range).unwrap(),
            max_block_match_region: None,
            max_block_match_window: None,
            max_bound_descriptor_sets: <u32>::from_vulkan(max_bound_descriptor_sets)
                .unwrap(),
            max_box_filter_block_size: None,
            max_buffer_size: None,
            max_clip_distances: <u32>::from_vulkan(max_clip_distances).unwrap(),
            max_color_attachments: <u32>::from_vulkan(max_color_attachments).unwrap(),
            max_combined_clip_and_cull_distances: <u32>::from_vulkan(
                    max_combined_clip_and_cull_distances,
                )
                .unwrap(),
            max_combined_image_sampler_descriptor_count: None,
            max_command_buffer_nesting_level: None,
            max_compute_shared_memory_size: <u32>::from_vulkan(
                    max_compute_shared_memory_size,
                )
                .unwrap(),
            max_compute_work_group_count: <[u32; 3usize]>::from_vulkan(
                    max_compute_work_group_count,
                )
                .unwrap(),
            max_compute_work_group_invocations: <u32>::from_vulkan(
                    max_compute_work_group_invocations,
                )
                .unwrap(),
            max_compute_work_group_size: <[u32; 3usize]>::from_vulkan(
                    max_compute_work_group_size,
                )
                .unwrap(),
            max_compute_workgroup_subgroups: None,
            max_cull_distances: <u32>::from_vulkan(max_cull_distances).unwrap(),
            max_custom_border_color_samplers: None,
            max_decompression_indirect_count: None,
            max_descriptor_buffer_bindings: None,
            max_descriptor_set_acceleration_structures: None,
            max_descriptor_set_inline_uniform_blocks: None,
            max_descriptor_set_input_attachments: <u32>::from_vulkan(
                    max_descriptor_set_input_attachments,
                )
                .unwrap(),
            max_descriptor_set_sampled_images: <u32>::from_vulkan(
                    max_descriptor_set_sampled_images,
                )
                .unwrap(),
            max_descriptor_set_samplers: <u32>::from_vulkan(max_descriptor_set_samplers)
                .unwrap(),
            max_descriptor_set_storage_buffers: <u32>::from_vulkan(
                    max_descriptor_set_storage_buffers,
                )
                .unwrap(),
            max_descriptor_set_storage_buffers_dynamic: <u32>::from_vulkan(
                    max_descriptor_set_storage_buffers_dynamic,
                )
                .unwrap(),
            max_descriptor_set_storage_images: <u32>::from_vulkan(
                    max_descriptor_set_storage_images,
                )
                .unwrap(),
            max_descriptor_set_subsampled_samplers: None,
            max_descriptor_set_uniform_buffers: <u32>::from_vulkan(
                    max_descriptor_set_uniform_buffers,
                )
                .unwrap(),
            max_descriptor_set_uniform_buffers_dynamic: <u32>::from_vulkan(
                    max_descriptor_set_uniform_buffers_dynamic,
                )
                .unwrap(),
            max_descriptor_set_update_after_bind_acceleration_structures: None,
            max_descriptor_set_update_after_bind_inline_uniform_blocks: None,
            max_descriptor_set_update_after_bind_input_attachments: None,
            max_descriptor_set_update_after_bind_sampled_images: None,
            max_descriptor_set_update_after_bind_samplers: None,
            max_descriptor_set_update_after_bind_storage_buffers: None,
            max_descriptor_set_update_after_bind_storage_buffers_dynamic: None,
            max_descriptor_set_update_after_bind_storage_images: None,
            max_descriptor_set_update_after_bind_uniform_buffers: None,
            max_descriptor_set_update_after_bind_uniform_buffers_dynamic: None,
            max_discard_rectangles: None,
            max_displacement_micromap_subdivision_level: None,
            max_draw_indexed_index_value: <u32>::from_vulkan(
                    max_draw_indexed_index_value,
                )
                .unwrap(),
            max_draw_indirect_count: <u32>::from_vulkan(max_draw_indirect_count)
                .unwrap(),
            max_draw_mesh_tasks_count: None,
            max_embedded_immutable_sampler_bindings: None,
            max_embedded_immutable_samplers: None,
            max_execution_graph_depth: None,
            max_execution_graph_shader_output_nodes: None,
            max_execution_graph_shader_payload_count: None,
            max_execution_graph_shader_payload_size: None,
            max_extra_primitive_overestimation_size: None,
            max_fragment_combined_output_resources: <u32>::from_vulkan(
                    max_fragment_combined_output_resources,
                )
                .unwrap(),
            max_fragment_density_texel_size: None,
            max_fragment_dual_src_attachments: <u32>::from_vulkan(
                    max_fragment_dual_src_attachments,
                )
                .unwrap(),
            max_fragment_input_components: <u32>::from_vulkan(
                    max_fragment_input_components,
                )
                .unwrap(),
            max_fragment_output_attachments: <u32>::from_vulkan(
                    max_fragment_output_attachments,
                )
                .unwrap(),
            max_fragment_shading_rate_attachment_texel_size: None,
            max_fragment_shading_rate_attachment_texel_size_aspect_ratio: None,
            max_fragment_shading_rate_coverage_samples: None,
            max_fragment_shading_rate_invocation_count: None,
            max_fragment_shading_rate_rasterization_samples: None,
            max_fragment_size: None,
            max_fragment_size_aspect_ratio: None,
            max_framebuffer_height: <u32>::from_vulkan(max_framebuffer_height).unwrap(),
            max_framebuffer_layers: <u32>::from_vulkan(max_framebuffer_layers).unwrap(),
            max_framebuffer_width: <u32>::from_vulkan(max_framebuffer_width).unwrap(),
            max_geometry_count: None,
            max_geometry_input_components: <u32>::from_vulkan(
                    max_geometry_input_components,
                )
                .unwrap(),
            max_geometry_output_components: <u32>::from_vulkan(
                    max_geometry_output_components,
                )
                .unwrap(),
            max_geometry_output_vertices: <u32>::from_vulkan(
                    max_geometry_output_vertices,
                )
                .unwrap(),
            max_geometry_shader_invocations: <u32>::from_vulkan(
                    max_geometry_shader_invocations,
                )
                .unwrap(),
            max_geometry_total_output_components: <u32>::from_vulkan(
                    max_geometry_total_output_components,
                )
                .unwrap(),
            max_graphics_shader_group_count: None,
            max_height: None,
            max_image_array_layers: <u32>::from_vulkan(max_image_array_layers).unwrap(),
            max_image_dimension1_d: <u32>::from_vulkan(max_image_dimension1_d).unwrap(),
            max_image_dimension2_d: <u32>::from_vulkan(max_image_dimension2_d).unwrap(),
            max_image_dimension3_d: <u32>::from_vulkan(max_image_dimension3_d).unwrap(),
            max_image_dimension_cube: <u32>::from_vulkan(max_image_dimension_cube)
                .unwrap(),
            max_indirect_commands_stream_count: None,
            max_indirect_commands_stream_stride: None,
            max_indirect_commands_token_count: None,
            max_indirect_commands_token_offset: None,
            max_indirect_sequence_count: None,
            max_inline_uniform_block_size: None,
            max_inline_uniform_total_size: None,
            max_instance_count: None,
            max_interpolation_offset: <f32>::from_vulkan(max_interpolation_offset)
                .unwrap(),
            max_memory_allocation_count: <u32>::from_vulkan(max_memory_allocation_count)
                .unwrap(),
            max_memory_allocation_size: None,
            max_mesh_multiview_view_count: None,
            max_mesh_output_components: None,
            max_mesh_output_layers: None,
            max_mesh_output_memory_size: None,
            max_mesh_output_primitives: None,
            max_mesh_output_vertices: None,
            max_mesh_payload_and_output_memory_size: None,
            max_mesh_payload_and_shared_memory_size: None,
            max_mesh_shared_memory_size: None,
            max_mesh_total_memory_size: None,
            max_mesh_work_group_count: None,
            max_mesh_work_group_invocations: None,
            max_mesh_work_group_size: None,
            max_mesh_work_group_total_count: None,
            max_multi_draw_count: None,
            max_multiview_instance_index: None,
            max_multiview_view_count: None,
            max_num_regions_of_interest: None,
            max_opacity2_state_subdivision_level: None,
            max_opacity4_state_subdivision_level: None,
            max_output_cluster_count: None,
            max_per_set_descriptors: None,
            max_per_stage_descriptor_acceleration_structures: None,
            max_per_stage_descriptor_inline_uniform_blocks: None,
            max_per_stage_descriptor_input_attachments: <u32>::from_vulkan(
                    max_per_stage_descriptor_input_attachments,
                )
                .unwrap(),
            max_per_stage_descriptor_sampled_images: <u32>::from_vulkan(
                    max_per_stage_descriptor_sampled_images,
                )
                .unwrap(),
            max_per_stage_descriptor_samplers: <u32>::from_vulkan(
                    max_per_stage_descriptor_samplers,
                )
                .unwrap(),
            max_per_stage_descriptor_storage_buffers: <u32>::from_vulkan(
                    max_per_stage_descriptor_storage_buffers,
                )
                .unwrap(),
            max_per_stage_descriptor_storage_images: <u32>::from_vulkan(
                    max_per_stage_descriptor_storage_images,
                )
                .unwrap(),
            max_per_stage_descriptor_uniform_buffers: <u32>::from_vulkan(
                    max_per_stage_descriptor_uniform_buffers,
                )
                .unwrap(),
            max_per_stage_descriptor_update_after_bind_acceleration_structures: None,
            max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: None,
            max_per_stage_descriptor_update_after_bind_input_attachments: None,
            max_per_stage_descriptor_update_after_bind_sampled_images: None,
            max_per_stage_descriptor_update_after_bind_samplers: None,
            max_per_stage_descriptor_update_after_bind_storage_buffers: None,
            max_per_stage_descriptor_update_after_bind_storage_images: None,
            max_per_stage_descriptor_update_after_bind_uniform_buffers: None,
            max_per_stage_resources: <u32>::from_vulkan(max_per_stage_resources)
                .unwrap(),
            max_per_stage_update_after_bind_resources: None,
            max_preferred_mesh_work_group_invocations: None,
            max_preferred_task_work_group_invocations: None,
            max_primitive_count: None,
            max_push_constants_size: <u32>::from_vulkan(max_push_constants_size)
                .unwrap(),
            max_push_descriptors: None,
            max_ray_dispatch_invocation_count: None,
            max_ray_hit_attribute_size: None,
            max_ray_recursion_depth: None,
            max_recursion_depth: None,
            max_render_pass_stripes: None,
            max_resource_descriptor_buffer_bindings: None,
            max_resource_descriptor_buffer_range: None,
            max_sample_location_grid_size: None,
            max_sample_mask_words: <u32>::from_vulkan(max_sample_mask_words).unwrap(),
            max_sampler_allocation_count: <u32>::from_vulkan(
                    max_sampler_allocation_count,
                )
                .unwrap(),
            max_sampler_anisotropy: <f32>::from_vulkan(max_sampler_anisotropy).unwrap(),
            max_sampler_descriptor_buffer_bindings: None,
            max_sampler_descriptor_buffer_range: None,
            max_sampler_lod_bias: <f32>::from_vulkan(max_sampler_lod_bias).unwrap(),
            max_sgpr_allocation: None,
            max_shader_group_stride: None,
            max_storage_buffer_range: <u32>::from_vulkan(max_storage_buffer_range)
                .unwrap(),
            max_subgroup_size: None,
            max_subpass_shading_workgroup_size_aspect_ratio: None,
            max_subsampled_array_layers: None,
            max_task_output_count: None,
            max_task_payload_and_shared_memory_size: None,
            max_task_payload_size: None,
            max_task_shared_memory_size: None,
            max_task_total_memory_size: None,
            max_task_work_group_count: None,
            max_task_work_group_invocations: None,
            max_task_work_group_size: None,
            max_task_work_group_total_count: None,
            max_tessellation_control_per_patch_output_components: <u32>::from_vulkan(
                    max_tessellation_control_per_patch_output_components,
                )
                .unwrap(),
            max_tessellation_control_per_vertex_input_components: <u32>::from_vulkan(
                    max_tessellation_control_per_vertex_input_components,
                )
                .unwrap(),
            max_tessellation_control_per_vertex_output_components: <u32>::from_vulkan(
                    max_tessellation_control_per_vertex_output_components,
                )
                .unwrap(),
            max_tessellation_control_total_output_components: <u32>::from_vulkan(
                    max_tessellation_control_total_output_components,
                )
                .unwrap(),
            max_tessellation_evaluation_input_components: <u32>::from_vulkan(
                    max_tessellation_evaluation_input_components,
                )
                .unwrap(),
            max_tessellation_evaluation_output_components: <u32>::from_vulkan(
                    max_tessellation_evaluation_output_components,
                )
                .unwrap(),
            max_tessellation_generation_level: <u32>::from_vulkan(
                    max_tessellation_generation_level,
                )
                .unwrap(),
            max_tessellation_patch_size: <u32>::from_vulkan(max_tessellation_patch_size)
                .unwrap(),
            max_texel_buffer_elements: <u32>::from_vulkan(max_texel_buffer_elements)
                .unwrap(),
            max_texel_gather_offset: <u32>::from_vulkan(max_texel_gather_offset)
                .unwrap(),
            max_texel_offset: <u32>::from_vulkan(max_texel_offset).unwrap(),
            max_timeline_semaphore_value_difference: None,
            max_transform_feedback_buffer_data_size: None,
            max_transform_feedback_buffer_data_stride: None,
            max_transform_feedback_buffer_size: None,
            max_transform_feedback_buffers: None,
            max_transform_feedback_stream_data_size: None,
            max_transform_feedback_streams: None,
            max_triangle_count: None,
            max_uniform_buffer_range: <u32>::from_vulkan(max_uniform_buffer_range)
                .unwrap(),
            max_update_after_bind_descriptors_in_all_pools: None,
            max_vertex_attrib_divisor: None,
            max_vertex_input_attribute_offset: <u32>::from_vulkan(
                    max_vertex_input_attribute_offset,
                )
                .unwrap(),
            max_vertex_input_attributes: <u32>::from_vulkan(max_vertex_input_attributes)
                .unwrap(),
            max_vertex_input_binding_stride: <u32>::from_vulkan(
                    max_vertex_input_binding_stride,
                )
                .unwrap(),
            max_vertex_input_bindings: <u32>::from_vulkan(max_vertex_input_bindings)
                .unwrap(),
            max_vertex_output_components: <u32>::from_vulkan(
                    max_vertex_output_components,
                )
                .unwrap(),
            max_vgpr_allocation: None,
            max_viewport_dimensions: <[u32; 2usize]>::from_vulkan(
                    max_viewport_dimensions,
                )
                .unwrap(),
            max_viewports: <u32>::from_vulkan(max_viewports).unwrap(),
            max_weight_filter_dimension: None,
            max_weight_filter_phases: None,
            max_width: None,
            max_work_group_count: None,
            max_work_group_size: None,
            mesh_output_per_primitive_granularity: None,
            mesh_output_per_vertex_granularity: None,
            min_acceleration_structure_scratch_offset_alignment: None,
            min_fragment_density_texel_size: None,
            min_fragment_shading_rate_attachment_texel_size: None,
            min_height: None,
            min_imported_host_pointer_alignment: None,
            min_indirect_commands_buffer_offset_alignment: None,
            min_interpolation_offset: <f32>::from_vulkan(min_interpolation_offset)
                .unwrap(),
            min_memory_map_alignment: <usize>::from_vulkan(min_memory_map_alignment)
                .unwrap(),
            min_placed_memory_map_alignment: None,
            min_sequences_count_buffer_offset_alignment: None,
            min_sequences_index_buffer_offset_alignment: None,
            min_sgpr_allocation: None,
            min_storage_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_storage_buffer_offset_alignment,
                )
                .unwrap(),
            min_subgroup_size: None,
            min_texel_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_texel_buffer_offset_alignment,
                )
                .unwrap(),
            min_texel_gather_offset: <i32>::from_vulkan(min_texel_gather_offset)
                .unwrap(),
            min_texel_offset: <i32>::from_vulkan(min_texel_offset).unwrap(),
            min_uniform_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_uniform_buffer_offset_alignment,
                )
                .unwrap(),
            min_vertex_input_binding_stride_alignment: None,
            min_vgpr_allocation: None,
            min_width: None,
            mipmap_precision_bits: <u32>::from_vulkan(mipmap_precision_bits).unwrap(),
            non_coherent_atom_size: <DeviceAlignment>::from_vulkan(
                    non_coherent_atom_size,
                )
                .unwrap(),
            non_strict_single_pixel_wide_lines_use_parallelogram: None,
            non_strict_wide_lines_use_parallelogram: None,
            null_color_attachment_with_external_format_resolve: None,
            optimal_buffer_copy_offset_alignment: <DeviceAlignment>::from_vulkan(
                    optimal_buffer_copy_offset_alignment,
                )
                .unwrap(),
            optimal_buffer_copy_row_pitch_alignment: <DeviceAlignment>::from_vulkan(
                    optimal_buffer_copy_row_pitch_alignment,
                )
                .unwrap(),
            optimal_tiling_layout_uuid: None,
            pci_bus: None,
            pci_device: None,
            pci_domain: None,
            pci_function: None,
            per_view_position_all_components: None,
            pipeline_cache_uuid: <[u8; 16usize]>::from_vulkan(pipeline_cache_uuid)
                .unwrap(),
            pixel_rate: None,
            point_clipping_behavior: None,
            point_size_granularity: <f32>::from_vulkan(point_size_granularity).unwrap(),
            point_size_range: <[f32; 2usize]>::from_vulkan(point_size_range).unwrap(),
            polygon_mode_point_size: None,
            prefers_compact_primitive_output: None,
            prefers_compact_vertex_output: None,
            prefers_local_invocation_primitive_output: None,
            prefers_local_invocation_vertex_output: None,
            primary_major: None,
            primary_minor: None,
            primitive_fragment_shading_rate_with_multiple_viewports: None,
            primitive_overestimation_size: None,
            primitive_underestimation: None,
            protected_no_fault: None,
            provoking_vertex_mode_per_pipeline: None,
            quad_divergent_implicit_lod: None,
            quad_operations_in_all_stages: None,
            ray_tracing_invocation_reorder_reordering_hint: None,
            render_major: None,
            render_minor: None,
            render_pass_stripe_granularity: None,
            required_subgroup_size_stages: None,
            residency_aligned_mip_size: <bool>::from_vulkan(residency_aligned_mip_size)
                .unwrap(),
            residency_non_resident_strict: <bool>::from_vulkan(
                    residency_non_resident_strict,
                )
                .unwrap(),
            residency_standard2_d_block_shape: <bool>::from_vulkan(
                    residency_standard2_d_block_shape,
                )
                .unwrap(),
            residency_standard2_d_multisample_block_shape: <bool>::from_vulkan(
                    residency_standard2_d_multisample_block_shape,
                )
                .unwrap(),
            residency_standard3_d_block_shape: <bool>::from_vulkan(
                    residency_standard3_d_block_shape,
                )
                .unwrap(),
            resource_descriptor_buffer_address_space_size: None,
            robust_buffer_access_update_after_bind: None,
            robust_storage_buffer_access_size_alignment: None,
            robust_storage_buffer_descriptor_size: None,
            robust_storage_texel_buffer_descriptor_size: None,
            robust_uniform_buffer_access_size_alignment: None,
            robust_uniform_buffer_descriptor_size: None,
            robust_uniform_texel_buffer_descriptor_size: None,
            rounding_mode_independence: None,
            sample_location_coordinate_range: None,
            sample_location_sample_counts: None,
            sample_location_sub_pixel_bits: None,
            sampled_image_color_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_color_sample_counts,
                )
                .unwrap(),
            sampled_image_depth_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_depth_sample_counts,
                )
                .unwrap(),
            sampled_image_descriptor_size: None,
            sampled_image_integer_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_integer_sample_counts,
                )
                .unwrap(),
            sampled_image_stencil_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_stencil_sample_counts,
                )
                .unwrap(),
            sampler_capture_replay_descriptor_data_size: None,
            sampler_descriptor_buffer_address_space_size: None,
            sampler_descriptor_size: None,
            scheduling_controls_flags: None,
            sgpr_allocation_granularity: None,
            sgprs_per_simd: None,
            shader_arrays_per_engine_count: None,
            shader_binary_uuid: None,
            shader_binary_version: None,
            shader_core_count: None,
            shader_core_features: None,
            shader_core_mask: None,
            shader_denorm_flush_to_zero_float16: None,
            shader_denorm_flush_to_zero_float32: None,
            shader_denorm_flush_to_zero_float64: None,
            shader_denorm_preserve_float16: None,
            shader_denorm_preserve_float32: None,
            shader_denorm_preserve_float64: None,
            shader_engine_count: None,
            shader_group_base_alignment: None,
            shader_group_handle_alignment: None,
            shader_group_handle_capture_replay_size: None,
            shader_group_handle_size: None,
            shader_input_attachment_array_non_uniform_indexing_native: None,
            shader_module_identifier_algorithm_uuid: None,
            shader_rounding_mode_rte_float16: None,
            shader_rounding_mode_rte_float32: None,
            shader_rounding_mode_rte_float64: None,
            shader_rounding_mode_rtz_float16: None,
            shader_rounding_mode_rtz_float32: None,
            shader_rounding_mode_rtz_float64: None,
            shader_sampled_image_array_non_uniform_indexing_native: None,
            shader_signed_zero_inf_nan_preserve_float16: None,
            shader_signed_zero_inf_nan_preserve_float32: None,
            shader_signed_zero_inf_nan_preserve_float64: None,
            shader_sm_count: None,
            shader_storage_buffer_array_non_uniform_indexing_native: None,
            shader_storage_image_array_non_uniform_indexing_native: None,
            shader_tile_image_coherent_read_accelerated: None,
            shader_tile_image_read_from_helper_invocation: None,
            shader_tile_image_read_sample_from_pixel_rate_invocation: None,
            shader_uniform_buffer_array_non_uniform_indexing_native: None,
            shader_warps_per_core: None,
            shader_warps_per_sm: None,
            shading_rate_max_coarse_samples: None,
            shading_rate_palette_size: None,
            shading_rate_texel_size: None,
            simd_per_compute_unit: None,
            sparse_address_space_size: <DeviceSize>::from_vulkan(
                    sparse_address_space_size,
                )
                .unwrap(),
            standard_sample_locations: <bool>::from_vulkan(standard_sample_locations)
                .unwrap(),
            storage_buffer_descriptor_size: None,
            storage_image_descriptor_size: None,
            storage_image_sample_counts: <SampleCounts>::from_vulkan(
                    storage_image_sample_counts,
                )
                .unwrap(),
            storage_texel_buffer_descriptor_size: None,
            storage_texel_buffer_offset_alignment_bytes: None,
            storage_texel_buffer_offset_single_texel_alignment: None,
            strict_lines: <bool>::from_vulkan(strict_lines).unwrap(),
            sub_pixel_interpolation_offset_bits: <u32>::from_vulkan(
                    sub_pixel_interpolation_offset_bits,
                )
                .unwrap(),
            sub_pixel_precision_bits: <u32>::from_vulkan(sub_pixel_precision_bits)
                .unwrap(),
            sub_texel_precision_bits: <u32>::from_vulkan(sub_texel_precision_bits)
                .unwrap(),
            subgroup_quad_operations_in_all_stages: None,
            subgroup_size: None,
            subgroup_supported_operations: None,
            subgroup_supported_stages: None,
            subsampled_coarse_reconstruction_early_access: None,
            subsampled_loads: None,
            supported_depth_resolve_modes: None,
            supported_hint_grid_sizes: None,
            supported_operations: None,
            supported_output_grid_sizes: None,
            supported_queues: None,
            supported_stages: None,
            supported_stencil_resolve_modes: None,
            supports_non_zero_first_instance: None,
            texel_rate: None,
            timestamp_compute_and_graphics: <bool>::from_vulkan(
                    timestamp_compute_and_graphics,
                )
                .unwrap(),
            timestamp_period: <f32>::from_vulkan(timestamp_period).unwrap(),
            transform_feedback_draw: None,
            transform_feedback_preserves_triangle_fan_provoking_vertex: None,
            transform_feedback_queries: None,
            transform_feedback_rasterization_stream_select: None,
            transform_feedback_streams_lines_triangles: None,
            tri_strip_vertex_order_independent_of_provoking_vertex: None,
            underlying_api: None,
            uniform_buffer_descriptor_size: None,
            uniform_texel_buffer_descriptor_size: None,
            uniform_texel_buffer_offset_alignment_bytes: None,
            uniform_texel_buffer_offset_single_texel_alignment: None,
            variable_sample_locations: None,
            vendor_id: <u32>::from_vulkan(vendor_id).unwrap(),
            vgpr_allocation_granularity: None,
            vgprs_per_simd: None,
            viewport_bounds_range: <[f32; 2usize]>::from_vulkan(viewport_bounds_range)
                .unwrap(),
            viewport_sub_pixel_bits: <u32>::from_vulkan(viewport_sub_pixel_bits)
                .unwrap(),
            wavefront_size: None,
            wavefronts_per_simd: None,
            _ne: crate::NonExhaustive(()),
        }
    }
    pub(crate) fn from_vk2(
        val_vk: &ash::vk::PhysicalDeviceProperties2<'_>,
        extensions_vk: &PhysicalDeviceProperties2ExtensionsVk<'_>,
        fields1_vk: &PhysicalDeviceProperties2Fields1Vk,
    ) -> Self {
        let ash::vk::PhysicalDeviceProperties2 {
            properties: val_vk @ ash::vk::PhysicalDeviceProperties {
                limits,
                sparse_properties,
                ..
            },
            ..
        } = val_vk;
        let PhysicalDeviceProperties2ExtensionsVk {
            vulkan11_properties_vk,
            vulkan12_properties_vk,
            vulkan13_properties_vk,
            id_properties_vk,
            maintenance3_properties_vk,
            multiview_properties_vk,
            point_clipping_properties_vk,
            protected_memory_properties_vk,
            subgroup_properties_vk,
            depth_stencil_resolve_properties_vk,
            descriptor_indexing_properties_vk,
            driver_properties_vk,
            float_controls_properties_vk,
            sampler_filter_minmax_properties_vk,
            timeline_semaphore_properties_vk,
            inline_uniform_block_properties_vk,
            maintenance4_properties_vk,
            shader_integer_dot_product_properties_vk,
            subgroup_size_control_properties_vk,
            texel_buffer_alignment_properties_vk,
            acceleration_structure_properties_khr_vk,
            cooperative_matrix_properties_khr_vk,
            fragment_shader_barycentric_properties_khr_vk,
            fragment_shading_rate_properties_khr_vk,
            line_rasterization_properties_khr_vk,
            maintenance5_properties_khr_vk,
            maintenance6_properties_khr_vk,
            performance_query_properties_khr_vk,
            portability_subset_properties_khr_vk,
            push_descriptor_properties_khr_vk,
            ray_tracing_pipeline_properties_khr_vk,
            vertex_attribute_divisor_properties_khr_vk,
            blend_operation_advanced_properties_ext_vk,
            conservative_rasterization_properties_ext_vk,
            custom_border_color_properties_ext_vk,
            descriptor_buffer_density_map_properties_ext_vk,
            descriptor_buffer_properties_ext_vk,
            discard_rectangle_properties_ext_vk,
            drm_properties_ext_vk,
            extended_dynamic_state3_properties_ext_vk,
            external_memory_host_properties_ext_vk,
            fragment_density_map2_properties_ext_vk,
            fragment_density_map_properties_ext_vk,
            graphics_pipeline_library_properties_ext_vk,
            host_image_copy_properties_ext_vk,
            map_memory_placed_properties_ext_vk,
            mesh_shader_properties_ext_vk,
            multi_draw_properties_ext_vk,
            nested_command_buffer_properties_ext_vk,
            opacity_micromap_properties_ext_vk,
            pci_bus_info_properties_ext_vk,
            pipeline_robustness_properties_ext_vk,
            provoking_vertex_properties_ext_vk,
            robustness2_properties_ext_vk,
            sample_locations_properties_ext_vk,
            shader_module_identifier_properties_ext_vk,
            shader_object_properties_ext_vk,
            shader_tile_image_properties_ext_vk,
            transform_feedback_properties_ext_vk,
            vertex_attribute_divisor_properties_ext_vk,
            cluster_culling_shader_properties_huawei_vk,
            cooperative_matrix_properties_nv_vk,
            copy_memory_indirect_properties_nv_vk,
            cuda_kernel_launch_properties_nv_vk,
            device_generated_commands_properties_nv_vk,
            displacement_micromap_properties_nv_vk,
            extended_sparse_address_space_properties_nv_vk,
            external_format_resolve_properties_android_vk,
            fragment_density_map_offset_properties_qcom_vk,
            fragment_shading_rate_enums_properties_nv_vk,
            image_processing2_properties_qcom_vk,
            image_processing_properties_qcom_vk,
            layered_driver_properties_msft_vk,
            memory_decompression_properties_nv_vk,
            mesh_shader_properties_nv_vk,
            multiview_per_view_attributes_properties_nvx_vk,
            optical_flow_properties_nv_vk,
            ray_tracing_invocation_reorder_properties_nv_vk,
            ray_tracing_properties_nv_vk,
            render_pass_striped_properties_arm_vk,
            scheduling_controls_properties_arm_vk,
            shader_core_builtins_properties_arm_vk,
            shader_core_properties2_amd_vk,
            shader_core_properties_amd_vk,
            shader_core_properties_arm_vk,
            shader_enqueue_properties_amdx_vk,
            shader_sm_builtins_properties_nv_vk,
            shading_rate_image_properties_nv_vk,
            subpass_shading_properties_huawei_vk,
        } = extensions_vk;
        let PhysicalDeviceProperties2Fields1Vk {
            physical_device_host_image_copy_properties_ext_fields1_vk,
        } = fields1_vk;
        let &ash::vk::PhysicalDeviceProperties {
            api_version,
            driver_version,
            vendor_id,
            device_id,
            device_type,
            device_name,
            pipeline_cache_uuid,
            ..
        } = val_vk;
        let &ash::vk::PhysicalDeviceLimits {
            max_image_dimension1_d,
            max_image_dimension2_d,
            max_image_dimension3_d,
            max_image_dimension_cube,
            max_image_array_layers,
            max_texel_buffer_elements,
            max_uniform_buffer_range,
            max_storage_buffer_range,
            max_push_constants_size,
            max_memory_allocation_count,
            max_sampler_allocation_count,
            buffer_image_granularity,
            sparse_address_space_size,
            max_bound_descriptor_sets,
            max_per_stage_descriptor_samplers,
            max_per_stage_descriptor_uniform_buffers,
            max_per_stage_descriptor_storage_buffers,
            max_per_stage_descriptor_sampled_images,
            max_per_stage_descriptor_storage_images,
            max_per_stage_descriptor_input_attachments,
            max_per_stage_resources,
            max_descriptor_set_samplers,
            max_descriptor_set_uniform_buffers,
            max_descriptor_set_uniform_buffers_dynamic,
            max_descriptor_set_storage_buffers,
            max_descriptor_set_storage_buffers_dynamic,
            max_descriptor_set_sampled_images,
            max_descriptor_set_storage_images,
            max_descriptor_set_input_attachments,
            max_vertex_input_attributes,
            max_vertex_input_bindings,
            max_vertex_input_attribute_offset,
            max_vertex_input_binding_stride,
            max_vertex_output_components,
            max_tessellation_generation_level,
            max_tessellation_patch_size,
            max_tessellation_control_per_vertex_input_components,
            max_tessellation_control_per_vertex_output_components,
            max_tessellation_control_per_patch_output_components,
            max_tessellation_control_total_output_components,
            max_tessellation_evaluation_input_components,
            max_tessellation_evaluation_output_components,
            max_geometry_shader_invocations,
            max_geometry_input_components,
            max_geometry_output_components,
            max_geometry_output_vertices,
            max_geometry_total_output_components,
            max_fragment_input_components,
            max_fragment_output_attachments,
            max_fragment_dual_src_attachments,
            max_fragment_combined_output_resources,
            max_compute_shared_memory_size,
            max_compute_work_group_count,
            max_compute_work_group_invocations,
            max_compute_work_group_size,
            sub_pixel_precision_bits,
            sub_texel_precision_bits,
            mipmap_precision_bits,
            max_draw_indexed_index_value,
            max_draw_indirect_count,
            max_sampler_lod_bias,
            max_sampler_anisotropy,
            max_viewports,
            max_viewport_dimensions,
            viewport_bounds_range,
            viewport_sub_pixel_bits,
            min_memory_map_alignment,
            min_texel_buffer_offset_alignment,
            min_uniform_buffer_offset_alignment,
            min_storage_buffer_offset_alignment,
            min_texel_offset,
            max_texel_offset,
            min_texel_gather_offset,
            max_texel_gather_offset,
            min_interpolation_offset,
            max_interpolation_offset,
            sub_pixel_interpolation_offset_bits,
            max_framebuffer_width,
            max_framebuffer_height,
            max_framebuffer_layers,
            framebuffer_color_sample_counts,
            framebuffer_depth_sample_counts,
            framebuffer_stencil_sample_counts,
            framebuffer_no_attachments_sample_counts,
            max_color_attachments,
            sampled_image_color_sample_counts,
            sampled_image_integer_sample_counts,
            sampled_image_depth_sample_counts,
            sampled_image_stencil_sample_counts,
            storage_image_sample_counts,
            max_sample_mask_words,
            timestamp_compute_and_graphics,
            timestamp_period,
            max_clip_distances,
            max_cull_distances,
            max_combined_clip_and_cull_distances,
            discrete_queue_priorities,
            point_size_range,
            line_width_range,
            point_size_granularity,
            line_width_granularity,
            strict_lines,
            standard_sample_locations,
            optimal_buffer_copy_offset_alignment,
            optimal_buffer_copy_row_pitch_alignment,
            non_coherent_atom_size,
            ..
        } = limits;
        let &ash::vk::PhysicalDeviceSparseProperties {
            residency_standard2_d_block_shape,
            residency_standard2_d_multisample_block_shape,
            residency_standard3_d_block_shape,
            residency_aligned_mip_size,
            residency_non_resident_strict,
            ..
        } = sparse_properties;
        let mut val = Self {
            acceleration_structure_capture_replay_descriptor_data_size: None,
            acceleration_structure_descriptor_size: None,
            active_compute_unit_count: None,
            advanced_blend_all_operations: None,
            advanced_blend_correlated_overlap: None,
            advanced_blend_independent_blend: None,
            advanced_blend_max_color_attachments: None,
            advanced_blend_non_premultiplied_dst_color: None,
            advanced_blend_non_premultiplied_src_color: None,
            allow_command_buffer_query_copies: None,
            allow_sampler_image_view_post_submit_creation: None,
            api_version: <Version>::from_vulkan(api_version).unwrap(),
            bidirectional_flow_supported: None,
            block_texel_view_compatible_multiple_layers: None,
            buffer_capture_replay_descriptor_data_size: None,
            buffer_image_granularity: <DeviceAlignment>::from_vulkan(
                    buffer_image_granularity,
                )
                .unwrap(),
            bufferless_push_descriptors: None,
            combined_image_sampler_density_map_descriptor_size: None,
            combined_image_sampler_descriptor_single_array: None,
            combined_image_sampler_descriptor_size: None,
            compute_capability_major: None,
            compute_capability_minor: None,
            compute_units_per_shader_array: None,
            conformance_version: None,
            conservative_point_and_line_rasterization: None,
            conservative_rasterization_post_depth_coverage: None,
            cooperative_matrix_supported_stages: None,
            copy_dst_layouts: None,
            copy_src_layouts: None,
            cost_supported: None,
            decompression_methods: None,
            default_robustness_images: None,
            default_robustness_storage_buffers: None,
            default_robustness_uniform_buffers: None,
            default_robustness_vertex_inputs: None,
            degenerate_lines_rasterized: None,
            degenerate_triangles_rasterized: None,
            denorm_behavior_independence: None,
            depth_stencil_swizzle_one_support: None,
            descriptor_buffer_address_space_size: None,
            descriptor_buffer_offset_alignment: None,
            device_id: <u32>::from_vulkan(device_id).unwrap(),
            device_luid: None,
            device_luid_valid: None,
            device_name: <String>::from_vulkan(device_name).unwrap(),
            device_node_mask: None,
            device_type: <PhysicalDeviceType>::from_vulkan(device_type).unwrap(),
            device_uuid: None,
            discrete_queue_priorities: <u32>::from_vulkan(discrete_queue_priorities)
                .unwrap(),
            driver_id: None,
            driver_info: None,
            driver_name: None,
            driver_uuid: None,
            driver_version: <u32>::from_vulkan(driver_version).unwrap(),
            dynamic_primitive_topology_unrestricted: None,
            early_fragment_multisample_coverage_after_sample_counting: None,
            early_fragment_sample_mask_test_before_sample_counting: None,
            execution_graph_dispatch_address_alignment: None,
            extended_sparse_address_space_size: None,
            extended_sparse_buffer_usage_flags: None,
            extended_sparse_image_usage_flags: None,
            external_format_resolve_chroma_offset_x: None,
            external_format_resolve_chroma_offset_y: None,
            extra_primitive_overestimation_size_granularity: None,
            filter_minmax_image_component_mapping: None,
            filter_minmax_single_component_formats: None,
            fma_rate: None,
            fragment_density_invocations: None,
            fragment_density_offset_granularity: None,
            fragment_shading_rate_clamp_combiner_inputs: None,
            fragment_shading_rate_non_trivial_combiner_ops: None,
            fragment_shading_rate_strict_multiply_combiner: None,
            fragment_shading_rate_with_conservative_rasterization: None,
            fragment_shading_rate_with_custom_sample_locations: None,
            fragment_shading_rate_with_fragment_shader_interlock: None,
            fragment_shading_rate_with_sample_mask: None,
            fragment_shading_rate_with_shader_depth_stencil_writes: None,
            fragment_shading_rate_with_shader_sample_mask: None,
            framebuffer_color_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_color_sample_counts,
                )
                .unwrap(),
            framebuffer_depth_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_depth_sample_counts,
                )
                .unwrap(),
            framebuffer_integer_color_sample_counts: None,
            framebuffer_no_attachments_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_no_attachments_sample_counts,
                )
                .unwrap(),
            framebuffer_stencil_sample_counts: <SampleCounts>::from_vulkan(
                    framebuffer_stencil_sample_counts,
                )
                .unwrap(),
            fully_covered_fragment_shader_input_variable: None,
            global_flow_supported: None,
            graphics_pipeline_library_fast_linking: None,
            graphics_pipeline_library_independent_interpolation_decoration: None,
            has_primary: None,
            has_render: None,
            hint_supported: None,
            identical_memory_type_requirements: None,
            image_capture_replay_descriptor_data_size: None,
            image_view_capture_replay_descriptor_data_size: None,
            independent_resolve: None,
            independent_resolve_none: None,
            indirect_buffer_offset_alignment: None,
            input_attachment_descriptor_size: None,
            integer_dot_product16_bit_mixed_signedness_accelerated: None,
            integer_dot_product16_bit_signed_accelerated: None,
            integer_dot_product16_bit_unsigned_accelerated: None,
            integer_dot_product32_bit_mixed_signedness_accelerated: None,
            integer_dot_product32_bit_signed_accelerated: None,
            integer_dot_product32_bit_unsigned_accelerated: None,
            integer_dot_product4x8_bit_packed_mixed_signedness_accelerated: None,
            integer_dot_product4x8_bit_packed_signed_accelerated: None,
            integer_dot_product4x8_bit_packed_unsigned_accelerated: None,
            integer_dot_product64_bit_mixed_signedness_accelerated: None,
            integer_dot_product64_bit_signed_accelerated: None,
            integer_dot_product64_bit_unsigned_accelerated: None,
            integer_dot_product8_bit_mixed_signedness_accelerated: None,
            integer_dot_product8_bit_signed_accelerated: None,
            integer_dot_product8_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated: None,
            integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_signed_accelerated: None,
            integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated: None,
            layered_shading_rate_attachments: None,
            line_sub_pixel_precision_bits: None,
            line_width_granularity: <f32>::from_vulkan(line_width_granularity).unwrap(),
            line_width_range: <[f32; 2usize]>::from_vulkan(line_width_range).unwrap(),
            max_block_match_region: None,
            max_block_match_window: None,
            max_bound_descriptor_sets: <u32>::from_vulkan(max_bound_descriptor_sets)
                .unwrap(),
            max_box_filter_block_size: None,
            max_buffer_size: None,
            max_clip_distances: <u32>::from_vulkan(max_clip_distances).unwrap(),
            max_color_attachments: <u32>::from_vulkan(max_color_attachments).unwrap(),
            max_combined_clip_and_cull_distances: <u32>::from_vulkan(
                    max_combined_clip_and_cull_distances,
                )
                .unwrap(),
            max_combined_image_sampler_descriptor_count: None,
            max_command_buffer_nesting_level: None,
            max_compute_shared_memory_size: <u32>::from_vulkan(
                    max_compute_shared_memory_size,
                )
                .unwrap(),
            max_compute_work_group_count: <[u32; 3usize]>::from_vulkan(
                    max_compute_work_group_count,
                )
                .unwrap(),
            max_compute_work_group_invocations: <u32>::from_vulkan(
                    max_compute_work_group_invocations,
                )
                .unwrap(),
            max_compute_work_group_size: <[u32; 3usize]>::from_vulkan(
                    max_compute_work_group_size,
                )
                .unwrap(),
            max_compute_workgroup_subgroups: None,
            max_cull_distances: <u32>::from_vulkan(max_cull_distances).unwrap(),
            max_custom_border_color_samplers: None,
            max_decompression_indirect_count: None,
            max_descriptor_buffer_bindings: None,
            max_descriptor_set_acceleration_structures: None,
            max_descriptor_set_inline_uniform_blocks: None,
            max_descriptor_set_input_attachments: <u32>::from_vulkan(
                    max_descriptor_set_input_attachments,
                )
                .unwrap(),
            max_descriptor_set_sampled_images: <u32>::from_vulkan(
                    max_descriptor_set_sampled_images,
                )
                .unwrap(),
            max_descriptor_set_samplers: <u32>::from_vulkan(max_descriptor_set_samplers)
                .unwrap(),
            max_descriptor_set_storage_buffers: <u32>::from_vulkan(
                    max_descriptor_set_storage_buffers,
                )
                .unwrap(),
            max_descriptor_set_storage_buffers_dynamic: <u32>::from_vulkan(
                    max_descriptor_set_storage_buffers_dynamic,
                )
                .unwrap(),
            max_descriptor_set_storage_images: <u32>::from_vulkan(
                    max_descriptor_set_storage_images,
                )
                .unwrap(),
            max_descriptor_set_subsampled_samplers: None,
            max_descriptor_set_uniform_buffers: <u32>::from_vulkan(
                    max_descriptor_set_uniform_buffers,
                )
                .unwrap(),
            max_descriptor_set_uniform_buffers_dynamic: <u32>::from_vulkan(
                    max_descriptor_set_uniform_buffers_dynamic,
                )
                .unwrap(),
            max_descriptor_set_update_after_bind_acceleration_structures: None,
            max_descriptor_set_update_after_bind_inline_uniform_blocks: None,
            max_descriptor_set_update_after_bind_input_attachments: None,
            max_descriptor_set_update_after_bind_sampled_images: None,
            max_descriptor_set_update_after_bind_samplers: None,
            max_descriptor_set_update_after_bind_storage_buffers: None,
            max_descriptor_set_update_after_bind_storage_buffers_dynamic: None,
            max_descriptor_set_update_after_bind_storage_images: None,
            max_descriptor_set_update_after_bind_uniform_buffers: None,
            max_descriptor_set_update_after_bind_uniform_buffers_dynamic: None,
            max_discard_rectangles: None,
            max_displacement_micromap_subdivision_level: None,
            max_draw_indexed_index_value: <u32>::from_vulkan(
                    max_draw_indexed_index_value,
                )
                .unwrap(),
            max_draw_indirect_count: <u32>::from_vulkan(max_draw_indirect_count)
                .unwrap(),
            max_draw_mesh_tasks_count: None,
            max_embedded_immutable_sampler_bindings: None,
            max_embedded_immutable_samplers: None,
            max_execution_graph_depth: None,
            max_execution_graph_shader_output_nodes: None,
            max_execution_graph_shader_payload_count: None,
            max_execution_graph_shader_payload_size: None,
            max_extra_primitive_overestimation_size: None,
            max_fragment_combined_output_resources: <u32>::from_vulkan(
                    max_fragment_combined_output_resources,
                )
                .unwrap(),
            max_fragment_density_texel_size: None,
            max_fragment_dual_src_attachments: <u32>::from_vulkan(
                    max_fragment_dual_src_attachments,
                )
                .unwrap(),
            max_fragment_input_components: <u32>::from_vulkan(
                    max_fragment_input_components,
                )
                .unwrap(),
            max_fragment_output_attachments: <u32>::from_vulkan(
                    max_fragment_output_attachments,
                )
                .unwrap(),
            max_fragment_shading_rate_attachment_texel_size: None,
            max_fragment_shading_rate_attachment_texel_size_aspect_ratio: None,
            max_fragment_shading_rate_coverage_samples: None,
            max_fragment_shading_rate_invocation_count: None,
            max_fragment_shading_rate_rasterization_samples: None,
            max_fragment_size: None,
            max_fragment_size_aspect_ratio: None,
            max_framebuffer_height: <u32>::from_vulkan(max_framebuffer_height).unwrap(),
            max_framebuffer_layers: <u32>::from_vulkan(max_framebuffer_layers).unwrap(),
            max_framebuffer_width: <u32>::from_vulkan(max_framebuffer_width).unwrap(),
            max_geometry_count: None,
            max_geometry_input_components: <u32>::from_vulkan(
                    max_geometry_input_components,
                )
                .unwrap(),
            max_geometry_output_components: <u32>::from_vulkan(
                    max_geometry_output_components,
                )
                .unwrap(),
            max_geometry_output_vertices: <u32>::from_vulkan(
                    max_geometry_output_vertices,
                )
                .unwrap(),
            max_geometry_shader_invocations: <u32>::from_vulkan(
                    max_geometry_shader_invocations,
                )
                .unwrap(),
            max_geometry_total_output_components: <u32>::from_vulkan(
                    max_geometry_total_output_components,
                )
                .unwrap(),
            max_graphics_shader_group_count: None,
            max_height: None,
            max_image_array_layers: <u32>::from_vulkan(max_image_array_layers).unwrap(),
            max_image_dimension1_d: <u32>::from_vulkan(max_image_dimension1_d).unwrap(),
            max_image_dimension2_d: <u32>::from_vulkan(max_image_dimension2_d).unwrap(),
            max_image_dimension3_d: <u32>::from_vulkan(max_image_dimension3_d).unwrap(),
            max_image_dimension_cube: <u32>::from_vulkan(max_image_dimension_cube)
                .unwrap(),
            max_indirect_commands_stream_count: None,
            max_indirect_commands_stream_stride: None,
            max_indirect_commands_token_count: None,
            max_indirect_commands_token_offset: None,
            max_indirect_sequence_count: None,
            max_inline_uniform_block_size: None,
            max_inline_uniform_total_size: None,
            max_instance_count: None,
            max_interpolation_offset: <f32>::from_vulkan(max_interpolation_offset)
                .unwrap(),
            max_memory_allocation_count: <u32>::from_vulkan(max_memory_allocation_count)
                .unwrap(),
            max_memory_allocation_size: None,
            max_mesh_multiview_view_count: None,
            max_mesh_output_components: None,
            max_mesh_output_layers: None,
            max_mesh_output_memory_size: None,
            max_mesh_output_primitives: None,
            max_mesh_output_vertices: None,
            max_mesh_payload_and_output_memory_size: None,
            max_mesh_payload_and_shared_memory_size: None,
            max_mesh_shared_memory_size: None,
            max_mesh_total_memory_size: None,
            max_mesh_work_group_count: None,
            max_mesh_work_group_invocations: None,
            max_mesh_work_group_size: None,
            max_mesh_work_group_total_count: None,
            max_multi_draw_count: None,
            max_multiview_instance_index: None,
            max_multiview_view_count: None,
            max_num_regions_of_interest: None,
            max_opacity2_state_subdivision_level: None,
            max_opacity4_state_subdivision_level: None,
            max_output_cluster_count: None,
            max_per_set_descriptors: None,
            max_per_stage_descriptor_acceleration_structures: None,
            max_per_stage_descriptor_inline_uniform_blocks: None,
            max_per_stage_descriptor_input_attachments: <u32>::from_vulkan(
                    max_per_stage_descriptor_input_attachments,
                )
                .unwrap(),
            max_per_stage_descriptor_sampled_images: <u32>::from_vulkan(
                    max_per_stage_descriptor_sampled_images,
                )
                .unwrap(),
            max_per_stage_descriptor_samplers: <u32>::from_vulkan(
                    max_per_stage_descriptor_samplers,
                )
                .unwrap(),
            max_per_stage_descriptor_storage_buffers: <u32>::from_vulkan(
                    max_per_stage_descriptor_storage_buffers,
                )
                .unwrap(),
            max_per_stage_descriptor_storage_images: <u32>::from_vulkan(
                    max_per_stage_descriptor_storage_images,
                )
                .unwrap(),
            max_per_stage_descriptor_uniform_buffers: <u32>::from_vulkan(
                    max_per_stage_descriptor_uniform_buffers,
                )
                .unwrap(),
            max_per_stage_descriptor_update_after_bind_acceleration_structures: None,
            max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: None,
            max_per_stage_descriptor_update_after_bind_input_attachments: None,
            max_per_stage_descriptor_update_after_bind_sampled_images: None,
            max_per_stage_descriptor_update_after_bind_samplers: None,
            max_per_stage_descriptor_update_after_bind_storage_buffers: None,
            max_per_stage_descriptor_update_after_bind_storage_images: None,
            max_per_stage_descriptor_update_after_bind_uniform_buffers: None,
            max_per_stage_resources: <u32>::from_vulkan(max_per_stage_resources)
                .unwrap(),
            max_per_stage_update_after_bind_resources: None,
            max_preferred_mesh_work_group_invocations: None,
            max_preferred_task_work_group_invocations: None,
            max_primitive_count: None,
            max_push_constants_size: <u32>::from_vulkan(max_push_constants_size)
                .unwrap(),
            max_push_descriptors: None,
            max_ray_dispatch_invocation_count: None,
            max_ray_hit_attribute_size: None,
            max_ray_recursion_depth: None,
            max_recursion_depth: None,
            max_render_pass_stripes: None,
            max_resource_descriptor_buffer_bindings: None,
            max_resource_descriptor_buffer_range: None,
            max_sample_location_grid_size: None,
            max_sample_mask_words: <u32>::from_vulkan(max_sample_mask_words).unwrap(),
            max_sampler_allocation_count: <u32>::from_vulkan(
                    max_sampler_allocation_count,
                )
                .unwrap(),
            max_sampler_anisotropy: <f32>::from_vulkan(max_sampler_anisotropy).unwrap(),
            max_sampler_descriptor_buffer_bindings: None,
            max_sampler_descriptor_buffer_range: None,
            max_sampler_lod_bias: <f32>::from_vulkan(max_sampler_lod_bias).unwrap(),
            max_sgpr_allocation: None,
            max_shader_group_stride: None,
            max_storage_buffer_range: <u32>::from_vulkan(max_storage_buffer_range)
                .unwrap(),
            max_subgroup_size: None,
            max_subpass_shading_workgroup_size_aspect_ratio: None,
            max_subsampled_array_layers: None,
            max_task_output_count: None,
            max_task_payload_and_shared_memory_size: None,
            max_task_payload_size: None,
            max_task_shared_memory_size: None,
            max_task_total_memory_size: None,
            max_task_work_group_count: None,
            max_task_work_group_invocations: None,
            max_task_work_group_size: None,
            max_task_work_group_total_count: None,
            max_tessellation_control_per_patch_output_components: <u32>::from_vulkan(
                    max_tessellation_control_per_patch_output_components,
                )
                .unwrap(),
            max_tessellation_control_per_vertex_input_components: <u32>::from_vulkan(
                    max_tessellation_control_per_vertex_input_components,
                )
                .unwrap(),
            max_tessellation_control_per_vertex_output_components: <u32>::from_vulkan(
                    max_tessellation_control_per_vertex_output_components,
                )
                .unwrap(),
            max_tessellation_control_total_output_components: <u32>::from_vulkan(
                    max_tessellation_control_total_output_components,
                )
                .unwrap(),
            max_tessellation_evaluation_input_components: <u32>::from_vulkan(
                    max_tessellation_evaluation_input_components,
                )
                .unwrap(),
            max_tessellation_evaluation_output_components: <u32>::from_vulkan(
                    max_tessellation_evaluation_output_components,
                )
                .unwrap(),
            max_tessellation_generation_level: <u32>::from_vulkan(
                    max_tessellation_generation_level,
                )
                .unwrap(),
            max_tessellation_patch_size: <u32>::from_vulkan(max_tessellation_patch_size)
                .unwrap(),
            max_texel_buffer_elements: <u32>::from_vulkan(max_texel_buffer_elements)
                .unwrap(),
            max_texel_gather_offset: <u32>::from_vulkan(max_texel_gather_offset)
                .unwrap(),
            max_texel_offset: <u32>::from_vulkan(max_texel_offset).unwrap(),
            max_timeline_semaphore_value_difference: None,
            max_transform_feedback_buffer_data_size: None,
            max_transform_feedback_buffer_data_stride: None,
            max_transform_feedback_buffer_size: None,
            max_transform_feedback_buffers: None,
            max_transform_feedback_stream_data_size: None,
            max_transform_feedback_streams: None,
            max_triangle_count: None,
            max_uniform_buffer_range: <u32>::from_vulkan(max_uniform_buffer_range)
                .unwrap(),
            max_update_after_bind_descriptors_in_all_pools: None,
            max_vertex_attrib_divisor: None,
            max_vertex_input_attribute_offset: <u32>::from_vulkan(
                    max_vertex_input_attribute_offset,
                )
                .unwrap(),
            max_vertex_input_attributes: <u32>::from_vulkan(max_vertex_input_attributes)
                .unwrap(),
            max_vertex_input_binding_stride: <u32>::from_vulkan(
                    max_vertex_input_binding_stride,
                )
                .unwrap(),
            max_vertex_input_bindings: <u32>::from_vulkan(max_vertex_input_bindings)
                .unwrap(),
            max_vertex_output_components: <u32>::from_vulkan(
                    max_vertex_output_components,
                )
                .unwrap(),
            max_vgpr_allocation: None,
            max_viewport_dimensions: <[u32; 2usize]>::from_vulkan(
                    max_viewport_dimensions,
                )
                .unwrap(),
            max_viewports: <u32>::from_vulkan(max_viewports).unwrap(),
            max_weight_filter_dimension: None,
            max_weight_filter_phases: None,
            max_width: None,
            max_work_group_count: None,
            max_work_group_size: None,
            mesh_output_per_primitive_granularity: None,
            mesh_output_per_vertex_granularity: None,
            min_acceleration_structure_scratch_offset_alignment: None,
            min_fragment_density_texel_size: None,
            min_fragment_shading_rate_attachment_texel_size: None,
            min_height: None,
            min_imported_host_pointer_alignment: None,
            min_indirect_commands_buffer_offset_alignment: None,
            min_interpolation_offset: <f32>::from_vulkan(min_interpolation_offset)
                .unwrap(),
            min_memory_map_alignment: <usize>::from_vulkan(min_memory_map_alignment)
                .unwrap(),
            min_placed_memory_map_alignment: None,
            min_sequences_count_buffer_offset_alignment: None,
            min_sequences_index_buffer_offset_alignment: None,
            min_sgpr_allocation: None,
            min_storage_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_storage_buffer_offset_alignment,
                )
                .unwrap(),
            min_subgroup_size: None,
            min_texel_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_texel_buffer_offset_alignment,
                )
                .unwrap(),
            min_texel_gather_offset: <i32>::from_vulkan(min_texel_gather_offset)
                .unwrap(),
            min_texel_offset: <i32>::from_vulkan(min_texel_offset).unwrap(),
            min_uniform_buffer_offset_alignment: <DeviceAlignment>::from_vulkan(
                    min_uniform_buffer_offset_alignment,
                )
                .unwrap(),
            min_vertex_input_binding_stride_alignment: None,
            min_vgpr_allocation: None,
            min_width: None,
            mipmap_precision_bits: <u32>::from_vulkan(mipmap_precision_bits).unwrap(),
            non_coherent_atom_size: <DeviceAlignment>::from_vulkan(
                    non_coherent_atom_size,
                )
                .unwrap(),
            non_strict_single_pixel_wide_lines_use_parallelogram: None,
            non_strict_wide_lines_use_parallelogram: None,
            null_color_attachment_with_external_format_resolve: None,
            optimal_buffer_copy_offset_alignment: <DeviceAlignment>::from_vulkan(
                    optimal_buffer_copy_offset_alignment,
                )
                .unwrap(),
            optimal_buffer_copy_row_pitch_alignment: <DeviceAlignment>::from_vulkan(
                    optimal_buffer_copy_row_pitch_alignment,
                )
                .unwrap(),
            optimal_tiling_layout_uuid: None,
            pci_bus: None,
            pci_device: None,
            pci_domain: None,
            pci_function: None,
            per_view_position_all_components: None,
            pipeline_cache_uuid: <[u8; 16usize]>::from_vulkan(pipeline_cache_uuid)
                .unwrap(),
            pixel_rate: None,
            point_clipping_behavior: None,
            point_size_granularity: <f32>::from_vulkan(point_size_granularity).unwrap(),
            point_size_range: <[f32; 2usize]>::from_vulkan(point_size_range).unwrap(),
            polygon_mode_point_size: None,
            prefers_compact_primitive_output: None,
            prefers_compact_vertex_output: None,
            prefers_local_invocation_primitive_output: None,
            prefers_local_invocation_vertex_output: None,
            primary_major: None,
            primary_minor: None,
            primitive_fragment_shading_rate_with_multiple_viewports: None,
            primitive_overestimation_size: None,
            primitive_underestimation: None,
            protected_no_fault: None,
            provoking_vertex_mode_per_pipeline: None,
            quad_divergent_implicit_lod: None,
            quad_operations_in_all_stages: None,
            ray_tracing_invocation_reorder_reordering_hint: None,
            render_major: None,
            render_minor: None,
            render_pass_stripe_granularity: None,
            required_subgroup_size_stages: None,
            residency_aligned_mip_size: <bool>::from_vulkan(residency_aligned_mip_size)
                .unwrap(),
            residency_non_resident_strict: <bool>::from_vulkan(
                    residency_non_resident_strict,
                )
                .unwrap(),
            residency_standard2_d_block_shape: <bool>::from_vulkan(
                    residency_standard2_d_block_shape,
                )
                .unwrap(),
            residency_standard2_d_multisample_block_shape: <bool>::from_vulkan(
                    residency_standard2_d_multisample_block_shape,
                )
                .unwrap(),
            residency_standard3_d_block_shape: <bool>::from_vulkan(
                    residency_standard3_d_block_shape,
                )
                .unwrap(),
            resource_descriptor_buffer_address_space_size: None,
            robust_buffer_access_update_after_bind: None,
            robust_storage_buffer_access_size_alignment: None,
            robust_storage_buffer_descriptor_size: None,
            robust_storage_texel_buffer_descriptor_size: None,
            robust_uniform_buffer_access_size_alignment: None,
            robust_uniform_buffer_descriptor_size: None,
            robust_uniform_texel_buffer_descriptor_size: None,
            rounding_mode_independence: None,
            sample_location_coordinate_range: None,
            sample_location_sample_counts: None,
            sample_location_sub_pixel_bits: None,
            sampled_image_color_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_color_sample_counts,
                )
                .unwrap(),
            sampled_image_depth_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_depth_sample_counts,
                )
                .unwrap(),
            sampled_image_descriptor_size: None,
            sampled_image_integer_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_integer_sample_counts,
                )
                .unwrap(),
            sampled_image_stencil_sample_counts: <SampleCounts>::from_vulkan(
                    sampled_image_stencil_sample_counts,
                )
                .unwrap(),
            sampler_capture_replay_descriptor_data_size: None,
            sampler_descriptor_buffer_address_space_size: None,
            sampler_descriptor_size: None,
            scheduling_controls_flags: None,
            sgpr_allocation_granularity: None,
            sgprs_per_simd: None,
            shader_arrays_per_engine_count: None,
            shader_binary_uuid: None,
            shader_binary_version: None,
            shader_core_count: None,
            shader_core_features: None,
            shader_core_mask: None,
            shader_denorm_flush_to_zero_float16: None,
            shader_denorm_flush_to_zero_float32: None,
            shader_denorm_flush_to_zero_float64: None,
            shader_denorm_preserve_float16: None,
            shader_denorm_preserve_float32: None,
            shader_denorm_preserve_float64: None,
            shader_engine_count: None,
            shader_group_base_alignment: None,
            shader_group_handle_alignment: None,
            shader_group_handle_capture_replay_size: None,
            shader_group_handle_size: None,
            shader_input_attachment_array_non_uniform_indexing_native: None,
            shader_module_identifier_algorithm_uuid: None,
            shader_rounding_mode_rte_float16: None,
            shader_rounding_mode_rte_float32: None,
            shader_rounding_mode_rte_float64: None,
            shader_rounding_mode_rtz_float16: None,
            shader_rounding_mode_rtz_float32: None,
            shader_rounding_mode_rtz_float64: None,
            shader_sampled_image_array_non_uniform_indexing_native: None,
            shader_signed_zero_inf_nan_preserve_float16: None,
            shader_signed_zero_inf_nan_preserve_float32: None,
            shader_signed_zero_inf_nan_preserve_float64: None,
            shader_sm_count: None,
            shader_storage_buffer_array_non_uniform_indexing_native: None,
            shader_storage_image_array_non_uniform_indexing_native: None,
            shader_tile_image_coherent_read_accelerated: None,
            shader_tile_image_read_from_helper_invocation: None,
            shader_tile_image_read_sample_from_pixel_rate_invocation: None,
            shader_uniform_buffer_array_non_uniform_indexing_native: None,
            shader_warps_per_core: None,
            shader_warps_per_sm: None,
            shading_rate_max_coarse_samples: None,
            shading_rate_palette_size: None,
            shading_rate_texel_size: None,
            simd_per_compute_unit: None,
            sparse_address_space_size: <DeviceSize>::from_vulkan(
                    sparse_address_space_size,
                )
                .unwrap(),
            standard_sample_locations: <bool>::from_vulkan(standard_sample_locations)
                .unwrap(),
            storage_buffer_descriptor_size: None,
            storage_image_descriptor_size: None,
            storage_image_sample_counts: <SampleCounts>::from_vulkan(
                    storage_image_sample_counts,
                )
                .unwrap(),
            storage_texel_buffer_descriptor_size: None,
            storage_texel_buffer_offset_alignment_bytes: None,
            storage_texel_buffer_offset_single_texel_alignment: None,
            strict_lines: <bool>::from_vulkan(strict_lines).unwrap(),
            sub_pixel_interpolation_offset_bits: <u32>::from_vulkan(
                    sub_pixel_interpolation_offset_bits,
                )
                .unwrap(),
            sub_pixel_precision_bits: <u32>::from_vulkan(sub_pixel_precision_bits)
                .unwrap(),
            sub_texel_precision_bits: <u32>::from_vulkan(sub_texel_precision_bits)
                .unwrap(),
            subgroup_quad_operations_in_all_stages: None,
            subgroup_size: None,
            subgroup_supported_operations: None,
            subgroup_supported_stages: None,
            subsampled_coarse_reconstruction_early_access: None,
            subsampled_loads: None,
            supported_depth_resolve_modes: None,
            supported_hint_grid_sizes: None,
            supported_operations: None,
            supported_output_grid_sizes: None,
            supported_queues: None,
            supported_stages: None,
            supported_stencil_resolve_modes: None,
            supports_non_zero_first_instance: None,
            texel_rate: None,
            timestamp_compute_and_graphics: <bool>::from_vulkan(
                    timestamp_compute_and_graphics,
                )
                .unwrap(),
            timestamp_period: <f32>::from_vulkan(timestamp_period).unwrap(),
            transform_feedback_draw: None,
            transform_feedback_preserves_triangle_fan_provoking_vertex: None,
            transform_feedback_queries: None,
            transform_feedback_rasterization_stream_select: None,
            transform_feedback_streams_lines_triangles: None,
            tri_strip_vertex_order_independent_of_provoking_vertex: None,
            underlying_api: None,
            uniform_buffer_descriptor_size: None,
            uniform_texel_buffer_descriptor_size: None,
            uniform_texel_buffer_offset_alignment_bytes: None,
            uniform_texel_buffer_offset_single_texel_alignment: None,
            variable_sample_locations: None,
            vendor_id: <u32>::from_vulkan(vendor_id).unwrap(),
            vgpr_allocation_granularity: None,
            vgprs_per_simd: None,
            viewport_bounds_range: <[f32; 2usize]>::from_vulkan(viewport_bounds_range)
                .unwrap(),
            viewport_sub_pixel_bits: <u32>::from_vulkan(viewport_sub_pixel_bits)
                .unwrap(),
            wavefront_size: None,
            wavefronts_per_simd: None,
            _ne: crate::NonExhaustive(()),
        };
        if let Some(val_vk) = vulkan11_properties_vk {
            let &ash::vk::PhysicalDeviceVulkan11Properties {
                device_uuid,
                driver_uuid,
                device_luid,
                device_node_mask,
                device_luid_valid,
                subgroup_size,
                subgroup_supported_stages,
                subgroup_supported_operations,
                subgroup_quad_operations_in_all_stages,
                point_clipping_behavior,
                max_multiview_view_count,
                max_multiview_instance_index,
                protected_no_fault,
                max_per_set_descriptors,
                max_memory_allocation_size,
                ..
            } = val_vk;
            if val.device_uuid.is_none() {
                val.device_uuid = <[u8; 16usize]>::from_vulkan(device_uuid);
            }
            if val.driver_uuid.is_none() {
                val.driver_uuid = <[u8; 16usize]>::from_vulkan(driver_uuid);
            }
            if val.device_luid.is_none() {
                val.device_luid = <[u8; 8usize]>::from_vulkan(device_luid);
            }
            if val.device_node_mask.is_none() {
                val.device_node_mask = <u32>::from_vulkan(device_node_mask);
            }
            if val.device_luid_valid.is_none() {
                val.device_luid_valid = <bool>::from_vulkan(device_luid_valid);
            }
            if val.subgroup_size.is_none() {
                val.subgroup_size = <u32>::from_vulkan(subgroup_size);
            }
            if val.subgroup_supported_stages.is_none() {
                val.subgroup_supported_stages = <ShaderStages>::from_vulkan(
                    subgroup_supported_stages,
                );
            }
            if val.subgroup_supported_operations.is_none() {
                val.subgroup_supported_operations = <SubgroupFeatures>::from_vulkan(
                    subgroup_supported_operations,
                );
            }
            if val.subgroup_quad_operations_in_all_stages.is_none() {
                val.subgroup_quad_operations_in_all_stages = <bool>::from_vulkan(
                    subgroup_quad_operations_in_all_stages,
                );
            }
            if val.point_clipping_behavior.is_none() {
                val.point_clipping_behavior = <PointClippingBehavior>::from_vulkan(
                    point_clipping_behavior,
                );
            }
            if val.max_multiview_view_count.is_none() {
                val.max_multiview_view_count = <u32>::from_vulkan(
                    max_multiview_view_count,
                );
            }
            if val.max_multiview_instance_index.is_none() {
                val.max_multiview_instance_index = <u32>::from_vulkan(
                    max_multiview_instance_index,
                );
            }
            if val.protected_no_fault.is_none() {
                val.protected_no_fault = <bool>::from_vulkan(protected_no_fault);
            }
            if val.max_per_set_descriptors.is_none() {
                val.max_per_set_descriptors = <u32>::from_vulkan(
                    max_per_set_descriptors,
                );
            }
            if val.max_memory_allocation_size.is_none() {
                val.max_memory_allocation_size = <DeviceSize>::from_vulkan(
                    max_memory_allocation_size,
                );
            }
        }
        if let Some(val_vk) = vulkan12_properties_vk {
            let &ash::vk::PhysicalDeviceVulkan12Properties {
                driver_id,
                driver_name,
                driver_info,
                conformance_version,
                denorm_behavior_independence,
                rounding_mode_independence,
                shader_signed_zero_inf_nan_preserve_float16,
                shader_signed_zero_inf_nan_preserve_float32,
                shader_signed_zero_inf_nan_preserve_float64,
                shader_denorm_preserve_float16,
                shader_denorm_preserve_float32,
                shader_denorm_preserve_float64,
                shader_denorm_flush_to_zero_float16,
                shader_denorm_flush_to_zero_float32,
                shader_denorm_flush_to_zero_float64,
                shader_rounding_mode_rte_float16,
                shader_rounding_mode_rte_float32,
                shader_rounding_mode_rte_float64,
                shader_rounding_mode_rtz_float16,
                shader_rounding_mode_rtz_float32,
                shader_rounding_mode_rtz_float64,
                max_update_after_bind_descriptors_in_all_pools,
                shader_uniform_buffer_array_non_uniform_indexing_native,
                shader_sampled_image_array_non_uniform_indexing_native,
                shader_storage_buffer_array_non_uniform_indexing_native,
                shader_storage_image_array_non_uniform_indexing_native,
                shader_input_attachment_array_non_uniform_indexing_native,
                robust_buffer_access_update_after_bind,
                quad_divergent_implicit_lod,
                max_per_stage_descriptor_update_after_bind_samplers,
                max_per_stage_descriptor_update_after_bind_uniform_buffers,
                max_per_stage_descriptor_update_after_bind_storage_buffers,
                max_per_stage_descriptor_update_after_bind_sampled_images,
                max_per_stage_descriptor_update_after_bind_storage_images,
                max_per_stage_descriptor_update_after_bind_input_attachments,
                max_per_stage_update_after_bind_resources,
                max_descriptor_set_update_after_bind_samplers,
                max_descriptor_set_update_after_bind_uniform_buffers,
                max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
                max_descriptor_set_update_after_bind_storage_buffers,
                max_descriptor_set_update_after_bind_storage_buffers_dynamic,
                max_descriptor_set_update_after_bind_sampled_images,
                max_descriptor_set_update_after_bind_storage_images,
                max_descriptor_set_update_after_bind_input_attachments,
                supported_depth_resolve_modes,
                supported_stencil_resolve_modes,
                independent_resolve_none,
                independent_resolve,
                filter_minmax_single_component_formats,
                filter_minmax_image_component_mapping,
                max_timeline_semaphore_value_difference,
                framebuffer_integer_color_sample_counts,
                ..
            } = val_vk;
            if val.driver_id.is_none() {
                val.driver_id = <DriverId>::from_vulkan(driver_id);
            }
            if val.driver_name.is_none() {
                val.driver_name = <String>::from_vulkan(driver_name);
            }
            if val.driver_info.is_none() {
                val.driver_info = <String>::from_vulkan(driver_info);
            }
            if val.conformance_version.is_none() {
                val.conformance_version = <ConformanceVersion>::from_vulkan(
                    conformance_version,
                );
            }
            if val.denorm_behavior_independence.is_none() {
                val.denorm_behavior_independence = <ShaderFloatControlsIndependence>::from_vulkan(
                    denorm_behavior_independence,
                );
            }
            if val.rounding_mode_independence.is_none() {
                val.rounding_mode_independence = <ShaderFloatControlsIndependence>::from_vulkan(
                    rounding_mode_independence,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float16.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float16 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float16,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float32.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float32 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float32,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float64.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float64 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float64,
                );
            }
            if val.shader_denorm_preserve_float16.is_none() {
                val.shader_denorm_preserve_float16 = <bool>::from_vulkan(
                    shader_denorm_preserve_float16,
                );
            }
            if val.shader_denorm_preserve_float32.is_none() {
                val.shader_denorm_preserve_float32 = <bool>::from_vulkan(
                    shader_denorm_preserve_float32,
                );
            }
            if val.shader_denorm_preserve_float64.is_none() {
                val.shader_denorm_preserve_float64 = <bool>::from_vulkan(
                    shader_denorm_preserve_float64,
                );
            }
            if val.shader_denorm_flush_to_zero_float16.is_none() {
                val.shader_denorm_flush_to_zero_float16 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float16,
                );
            }
            if val.shader_denorm_flush_to_zero_float32.is_none() {
                val.shader_denorm_flush_to_zero_float32 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float32,
                );
            }
            if val.shader_denorm_flush_to_zero_float64.is_none() {
                val.shader_denorm_flush_to_zero_float64 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float64,
                );
            }
            if val.shader_rounding_mode_rte_float16.is_none() {
                val.shader_rounding_mode_rte_float16 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float16,
                );
            }
            if val.shader_rounding_mode_rte_float32.is_none() {
                val.shader_rounding_mode_rte_float32 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float32,
                );
            }
            if val.shader_rounding_mode_rte_float64.is_none() {
                val.shader_rounding_mode_rte_float64 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float64,
                );
            }
            if val.shader_rounding_mode_rtz_float16.is_none() {
                val.shader_rounding_mode_rtz_float16 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float16,
                );
            }
            if val.shader_rounding_mode_rtz_float32.is_none() {
                val.shader_rounding_mode_rtz_float32 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float32,
                );
            }
            if val.shader_rounding_mode_rtz_float64.is_none() {
                val.shader_rounding_mode_rtz_float64 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float64,
                );
            }
            if val.max_update_after_bind_descriptors_in_all_pools.is_none() {
                val.max_update_after_bind_descriptors_in_all_pools = <u32>::from_vulkan(
                    max_update_after_bind_descriptors_in_all_pools,
                );
            }
            if val.shader_uniform_buffer_array_non_uniform_indexing_native.is_none() {
                val.shader_uniform_buffer_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_uniform_buffer_array_non_uniform_indexing_native,
                );
            }
            if val.shader_sampled_image_array_non_uniform_indexing_native.is_none() {
                val.shader_sampled_image_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_sampled_image_array_non_uniform_indexing_native,
                );
            }
            if val.shader_storage_buffer_array_non_uniform_indexing_native.is_none() {
                val.shader_storage_buffer_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_storage_buffer_array_non_uniform_indexing_native,
                );
            }
            if val.shader_storage_image_array_non_uniform_indexing_native.is_none() {
                val.shader_storage_image_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_storage_image_array_non_uniform_indexing_native,
                );
            }
            if val.shader_input_attachment_array_non_uniform_indexing_native.is_none() {
                val.shader_input_attachment_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_input_attachment_array_non_uniform_indexing_native,
                );
            }
            if val.robust_buffer_access_update_after_bind.is_none() {
                val.robust_buffer_access_update_after_bind = <bool>::from_vulkan(
                    robust_buffer_access_update_after_bind,
                );
            }
            if val.quad_divergent_implicit_lod.is_none() {
                val.quad_divergent_implicit_lod = <bool>::from_vulkan(
                    quad_divergent_implicit_lod,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_samplers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_samplers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_samplers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_uniform_buffers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_uniform_buffers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_uniform_buffers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_storage_buffers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_storage_buffers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_storage_buffers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_sampled_images.is_none() {
                val.max_per_stage_descriptor_update_after_bind_sampled_images = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_sampled_images,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_storage_images.is_none() {
                val.max_per_stage_descriptor_update_after_bind_storage_images = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_storage_images,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_input_attachments.is_none()
            {
                val.max_per_stage_descriptor_update_after_bind_input_attachments = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_input_attachments,
                );
            }
            if val.max_per_stage_update_after_bind_resources.is_none() {
                val.max_per_stage_update_after_bind_resources = <u32>::from_vulkan(
                    max_per_stage_update_after_bind_resources,
                );
            }
            if val.max_descriptor_set_update_after_bind_samplers.is_none() {
                val.max_descriptor_set_update_after_bind_samplers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_samplers,
                );
            }
            if val.max_descriptor_set_update_after_bind_uniform_buffers.is_none() {
                val.max_descriptor_set_update_after_bind_uniform_buffers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_uniform_buffers,
                );
            }
            if val.max_descriptor_set_update_after_bind_uniform_buffers_dynamic.is_none()
            {
                val.max_descriptor_set_update_after_bind_uniform_buffers_dynamic = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_buffers.is_none() {
                val.max_descriptor_set_update_after_bind_storage_buffers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_buffers,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_buffers_dynamic.is_none()
            {
                val.max_descriptor_set_update_after_bind_storage_buffers_dynamic = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_buffers_dynamic,
                );
            }
            if val.max_descriptor_set_update_after_bind_sampled_images.is_none() {
                val.max_descriptor_set_update_after_bind_sampled_images = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_sampled_images,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_images.is_none() {
                val.max_descriptor_set_update_after_bind_storage_images = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_images,
                );
            }
            if val.max_descriptor_set_update_after_bind_input_attachments.is_none() {
                val.max_descriptor_set_update_after_bind_input_attachments = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_input_attachments,
                );
            }
            if val.supported_depth_resolve_modes.is_none() {
                val.supported_depth_resolve_modes = <ResolveModes>::from_vulkan(
                    supported_depth_resolve_modes,
                );
            }
            if val.supported_stencil_resolve_modes.is_none() {
                val.supported_stencil_resolve_modes = <ResolveModes>::from_vulkan(
                    supported_stencil_resolve_modes,
                );
            }
            if val.independent_resolve_none.is_none() {
                val.independent_resolve_none = <bool>::from_vulkan(
                    independent_resolve_none,
                );
            }
            if val.independent_resolve.is_none() {
                val.independent_resolve = <bool>::from_vulkan(independent_resolve);
            }
            if val.filter_minmax_single_component_formats.is_none() {
                val.filter_minmax_single_component_formats = <bool>::from_vulkan(
                    filter_minmax_single_component_formats,
                );
            }
            if val.filter_minmax_image_component_mapping.is_none() {
                val.filter_minmax_image_component_mapping = <bool>::from_vulkan(
                    filter_minmax_image_component_mapping,
                );
            }
            if val.max_timeline_semaphore_value_difference.is_none() {
                val.max_timeline_semaphore_value_difference = <u64>::from_vulkan(
                    max_timeline_semaphore_value_difference,
                );
            }
            if val.framebuffer_integer_color_sample_counts.is_none() {
                val.framebuffer_integer_color_sample_counts = <SampleCounts>::from_vulkan(
                    framebuffer_integer_color_sample_counts,
                );
            }
        }
        if let Some(val_vk) = vulkan13_properties_vk {
            let &ash::vk::PhysicalDeviceVulkan13Properties {
                min_subgroup_size,
                max_subgroup_size,
                max_compute_workgroup_subgroups,
                required_subgroup_size_stages,
                max_inline_uniform_block_size,
                max_per_stage_descriptor_inline_uniform_blocks,
                max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
                max_descriptor_set_inline_uniform_blocks,
                max_descriptor_set_update_after_bind_inline_uniform_blocks,
                max_inline_uniform_total_size,
                integer_dot_product8_bit_unsigned_accelerated,
                integer_dot_product8_bit_signed_accelerated,
                integer_dot_product8_bit_mixed_signedness_accelerated,
                integer_dot_product4x8_bit_packed_unsigned_accelerated,
                integer_dot_product4x8_bit_packed_signed_accelerated,
                integer_dot_product4x8_bit_packed_mixed_signedness_accelerated,
                integer_dot_product16_bit_unsigned_accelerated,
                integer_dot_product16_bit_signed_accelerated,
                integer_dot_product16_bit_mixed_signedness_accelerated,
                integer_dot_product32_bit_unsigned_accelerated,
                integer_dot_product32_bit_signed_accelerated,
                integer_dot_product32_bit_mixed_signedness_accelerated,
                integer_dot_product64_bit_unsigned_accelerated,
                integer_dot_product64_bit_signed_accelerated,
                integer_dot_product64_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating8_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating16_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating32_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating64_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated,
                storage_texel_buffer_offset_alignment_bytes,
                storage_texel_buffer_offset_single_texel_alignment,
                uniform_texel_buffer_offset_alignment_bytes,
                uniform_texel_buffer_offset_single_texel_alignment,
                max_buffer_size,
                ..
            } = val_vk;
            if val.min_subgroup_size.is_none() {
                val.min_subgroup_size = <u32>::from_vulkan(min_subgroup_size);
            }
            if val.max_subgroup_size.is_none() {
                val.max_subgroup_size = <u32>::from_vulkan(max_subgroup_size);
            }
            if val.max_compute_workgroup_subgroups.is_none() {
                val.max_compute_workgroup_subgroups = <u32>::from_vulkan(
                    max_compute_workgroup_subgroups,
                );
            }
            if val.required_subgroup_size_stages.is_none() {
                val.required_subgroup_size_stages = <ShaderStages>::from_vulkan(
                    required_subgroup_size_stages,
                );
            }
            if val.max_inline_uniform_block_size.is_none() {
                val.max_inline_uniform_block_size = <u32>::from_vulkan(
                    max_inline_uniform_block_size,
                );
            }
            if val.max_per_stage_descriptor_inline_uniform_blocks.is_none() {
                val.max_per_stage_descriptor_inline_uniform_blocks = <u32>::from_vulkan(
                    max_per_stage_descriptor_inline_uniform_blocks,
                );
            }
            if val
                .max_per_stage_descriptor_update_after_bind_inline_uniform_blocks
                .is_none()
            {
                val.max_per_stage_descriptor_update_after_bind_inline_uniform_blocks = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
                );
            }
            if val.max_descriptor_set_inline_uniform_blocks.is_none() {
                val.max_descriptor_set_inline_uniform_blocks = <u32>::from_vulkan(
                    max_descriptor_set_inline_uniform_blocks,
                );
            }
            if val.max_descriptor_set_update_after_bind_inline_uniform_blocks.is_none() {
                val.max_descriptor_set_update_after_bind_inline_uniform_blocks = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_inline_uniform_blocks,
                );
            }
            if val.max_inline_uniform_total_size.is_none() {
                val.max_inline_uniform_total_size = <u32>::from_vulkan(
                    max_inline_uniform_total_size,
                );
            }
            if val.integer_dot_product8_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product8_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product8_bit_signed_accelerated.is_none() {
                val.integer_dot_product8_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product8_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product8_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product4x8_bit_packed_unsigned_accelerated.is_none() {
                val.integer_dot_product4x8_bit_packed_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_unsigned_accelerated,
                );
            }
            if val.integer_dot_product4x8_bit_packed_signed_accelerated.is_none() {
                val.integer_dot_product4x8_bit_packed_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_signed_accelerated,
                );
            }
            if val
                .integer_dot_product4x8_bit_packed_mixed_signedness_accelerated
                .is_none()
            {
                val.integer_dot_product4x8_bit_packed_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product16_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product16_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product16_bit_signed_accelerated.is_none() {
                val.integer_dot_product16_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product16_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product16_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product32_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product32_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product32_bit_signed_accelerated.is_none() {
                val.integer_dot_product32_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product32_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product32_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product64_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product64_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product64_bit_signed_accelerated.is_none() {
                val.integer_dot_product64_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product64_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product64_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated,
                );
            }
            if val.storage_texel_buffer_offset_alignment_bytes.is_none() {
                val.storage_texel_buffer_offset_alignment_bytes = <DeviceAlignment>::from_vulkan(
                    storage_texel_buffer_offset_alignment_bytes,
                );
            }
            if val.storage_texel_buffer_offset_single_texel_alignment.is_none() {
                val.storage_texel_buffer_offset_single_texel_alignment = <bool>::from_vulkan(
                    storage_texel_buffer_offset_single_texel_alignment,
                );
            }
            if val.uniform_texel_buffer_offset_alignment_bytes.is_none() {
                val.uniform_texel_buffer_offset_alignment_bytes = <DeviceAlignment>::from_vulkan(
                    uniform_texel_buffer_offset_alignment_bytes,
                );
            }
            if val.uniform_texel_buffer_offset_single_texel_alignment.is_none() {
                val.uniform_texel_buffer_offset_single_texel_alignment = <bool>::from_vulkan(
                    uniform_texel_buffer_offset_single_texel_alignment,
                );
            }
            if val.max_buffer_size.is_none() {
                val.max_buffer_size = <DeviceSize>::from_vulkan(max_buffer_size);
            }
        }
        if let Some(val_vk) = id_properties_vk {
            let &ash::vk::PhysicalDeviceIDProperties {
                device_uuid,
                driver_uuid,
                device_luid,
                device_node_mask,
                device_luid_valid,
                ..
            } = val_vk;
            if val.device_uuid.is_none() {
                val.device_uuid = <[u8; 16usize]>::from_vulkan(device_uuid);
            }
            if val.driver_uuid.is_none() {
                val.driver_uuid = <[u8; 16usize]>::from_vulkan(driver_uuid);
            }
            if val.device_luid.is_none() {
                val.device_luid = <[u8; 8usize]>::from_vulkan(device_luid);
            }
            if val.device_node_mask.is_none() {
                val.device_node_mask = <u32>::from_vulkan(device_node_mask);
            }
            if val.device_luid_valid.is_none() {
                val.device_luid_valid = <bool>::from_vulkan(device_luid_valid);
            }
        }
        if let Some(val_vk) = maintenance3_properties_vk {
            let &ash::vk::PhysicalDeviceMaintenance3Properties {
                max_per_set_descriptors,
                max_memory_allocation_size,
                ..
            } = val_vk;
            if val.max_per_set_descriptors.is_none() {
                val.max_per_set_descriptors = <u32>::from_vulkan(
                    max_per_set_descriptors,
                );
            }
            if val.max_memory_allocation_size.is_none() {
                val.max_memory_allocation_size = <DeviceSize>::from_vulkan(
                    max_memory_allocation_size,
                );
            }
        }
        if let Some(val_vk) = multiview_properties_vk {
            let &ash::vk::PhysicalDeviceMultiviewProperties {
                max_multiview_view_count,
                max_multiview_instance_index,
                ..
            } = val_vk;
            if val.max_multiview_view_count.is_none() {
                val.max_multiview_view_count = <u32>::from_vulkan(
                    max_multiview_view_count,
                );
            }
            if val.max_multiview_instance_index.is_none() {
                val.max_multiview_instance_index = <u32>::from_vulkan(
                    max_multiview_instance_index,
                );
            }
        }
        if let Some(val_vk) = point_clipping_properties_vk {
            let &ash::vk::PhysicalDevicePointClippingProperties {
                point_clipping_behavior,
                ..
            } = val_vk;
            if val.point_clipping_behavior.is_none() {
                val.point_clipping_behavior = <PointClippingBehavior>::from_vulkan(
                    point_clipping_behavior,
                );
            }
        }
        if let Some(val_vk) = protected_memory_properties_vk {
            let &ash::vk::PhysicalDeviceProtectedMemoryProperties {
                protected_no_fault,
                ..
            } = val_vk;
            if val.protected_no_fault.is_none() {
                val.protected_no_fault = <bool>::from_vulkan(protected_no_fault);
            }
        }
        if let Some(val_vk) = subgroup_properties_vk {
            let &ash::vk::PhysicalDeviceSubgroupProperties {
                subgroup_size,
                supported_stages,
                supported_operations,
                quad_operations_in_all_stages,
                ..
            } = val_vk;
            if val.subgroup_size.is_none() {
                val.subgroup_size = <u32>::from_vulkan(subgroup_size);
            }
            if val.supported_stages.is_none() {
                val.supported_stages = <ShaderStages>::from_vulkan(supported_stages);
            }
            if val.supported_operations.is_none() {
                val.supported_operations = <SubgroupFeatures>::from_vulkan(
                    supported_operations,
                );
            }
            if val.quad_operations_in_all_stages.is_none() {
                val.quad_operations_in_all_stages = <bool>::from_vulkan(
                    quad_operations_in_all_stages,
                );
            }
        }
        if let Some(val_vk) = depth_stencil_resolve_properties_vk {
            let &ash::vk::PhysicalDeviceDepthStencilResolveProperties {
                supported_depth_resolve_modes,
                supported_stencil_resolve_modes,
                independent_resolve_none,
                independent_resolve,
                ..
            } = val_vk;
            if val.supported_depth_resolve_modes.is_none() {
                val.supported_depth_resolve_modes = <ResolveModes>::from_vulkan(
                    supported_depth_resolve_modes,
                );
            }
            if val.supported_stencil_resolve_modes.is_none() {
                val.supported_stencil_resolve_modes = <ResolveModes>::from_vulkan(
                    supported_stencil_resolve_modes,
                );
            }
            if val.independent_resolve_none.is_none() {
                val.independent_resolve_none = <bool>::from_vulkan(
                    independent_resolve_none,
                );
            }
            if val.independent_resolve.is_none() {
                val.independent_resolve = <bool>::from_vulkan(independent_resolve);
            }
        }
        if let Some(val_vk) = descriptor_indexing_properties_vk {
            let &ash::vk::PhysicalDeviceDescriptorIndexingProperties {
                max_update_after_bind_descriptors_in_all_pools,
                shader_uniform_buffer_array_non_uniform_indexing_native,
                shader_sampled_image_array_non_uniform_indexing_native,
                shader_storage_buffer_array_non_uniform_indexing_native,
                shader_storage_image_array_non_uniform_indexing_native,
                shader_input_attachment_array_non_uniform_indexing_native,
                robust_buffer_access_update_after_bind,
                quad_divergent_implicit_lod,
                max_per_stage_descriptor_update_after_bind_samplers,
                max_per_stage_descriptor_update_after_bind_uniform_buffers,
                max_per_stage_descriptor_update_after_bind_storage_buffers,
                max_per_stage_descriptor_update_after_bind_sampled_images,
                max_per_stage_descriptor_update_after_bind_storage_images,
                max_per_stage_descriptor_update_after_bind_input_attachments,
                max_per_stage_update_after_bind_resources,
                max_descriptor_set_update_after_bind_samplers,
                max_descriptor_set_update_after_bind_uniform_buffers,
                max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
                max_descriptor_set_update_after_bind_storage_buffers,
                max_descriptor_set_update_after_bind_storage_buffers_dynamic,
                max_descriptor_set_update_after_bind_sampled_images,
                max_descriptor_set_update_after_bind_storage_images,
                max_descriptor_set_update_after_bind_input_attachments,
                ..
            } = val_vk;
            if val.max_update_after_bind_descriptors_in_all_pools.is_none() {
                val.max_update_after_bind_descriptors_in_all_pools = <u32>::from_vulkan(
                    max_update_after_bind_descriptors_in_all_pools,
                );
            }
            if val.shader_uniform_buffer_array_non_uniform_indexing_native.is_none() {
                val.shader_uniform_buffer_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_uniform_buffer_array_non_uniform_indexing_native,
                );
            }
            if val.shader_sampled_image_array_non_uniform_indexing_native.is_none() {
                val.shader_sampled_image_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_sampled_image_array_non_uniform_indexing_native,
                );
            }
            if val.shader_storage_buffer_array_non_uniform_indexing_native.is_none() {
                val.shader_storage_buffer_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_storage_buffer_array_non_uniform_indexing_native,
                );
            }
            if val.shader_storage_image_array_non_uniform_indexing_native.is_none() {
                val.shader_storage_image_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_storage_image_array_non_uniform_indexing_native,
                );
            }
            if val.shader_input_attachment_array_non_uniform_indexing_native.is_none() {
                val.shader_input_attachment_array_non_uniform_indexing_native = <bool>::from_vulkan(
                    shader_input_attachment_array_non_uniform_indexing_native,
                );
            }
            if val.robust_buffer_access_update_after_bind.is_none() {
                val.robust_buffer_access_update_after_bind = <bool>::from_vulkan(
                    robust_buffer_access_update_after_bind,
                );
            }
            if val.quad_divergent_implicit_lod.is_none() {
                val.quad_divergent_implicit_lod = <bool>::from_vulkan(
                    quad_divergent_implicit_lod,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_samplers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_samplers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_samplers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_uniform_buffers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_uniform_buffers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_uniform_buffers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_storage_buffers.is_none() {
                val.max_per_stage_descriptor_update_after_bind_storage_buffers = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_storage_buffers,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_sampled_images.is_none() {
                val.max_per_stage_descriptor_update_after_bind_sampled_images = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_sampled_images,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_storage_images.is_none() {
                val.max_per_stage_descriptor_update_after_bind_storage_images = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_storage_images,
                );
            }
            if val.max_per_stage_descriptor_update_after_bind_input_attachments.is_none()
            {
                val.max_per_stage_descriptor_update_after_bind_input_attachments = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_input_attachments,
                );
            }
            if val.max_per_stage_update_after_bind_resources.is_none() {
                val.max_per_stage_update_after_bind_resources = <u32>::from_vulkan(
                    max_per_stage_update_after_bind_resources,
                );
            }
            if val.max_descriptor_set_update_after_bind_samplers.is_none() {
                val.max_descriptor_set_update_after_bind_samplers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_samplers,
                );
            }
            if val.max_descriptor_set_update_after_bind_uniform_buffers.is_none() {
                val.max_descriptor_set_update_after_bind_uniform_buffers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_uniform_buffers,
                );
            }
            if val.max_descriptor_set_update_after_bind_uniform_buffers_dynamic.is_none()
            {
                val.max_descriptor_set_update_after_bind_uniform_buffers_dynamic = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_uniform_buffers_dynamic,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_buffers.is_none() {
                val.max_descriptor_set_update_after_bind_storage_buffers = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_buffers,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_buffers_dynamic.is_none()
            {
                val.max_descriptor_set_update_after_bind_storage_buffers_dynamic = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_buffers_dynamic,
                );
            }
            if val.max_descriptor_set_update_after_bind_sampled_images.is_none() {
                val.max_descriptor_set_update_after_bind_sampled_images = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_sampled_images,
                );
            }
            if val.max_descriptor_set_update_after_bind_storage_images.is_none() {
                val.max_descriptor_set_update_after_bind_storage_images = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_storage_images,
                );
            }
            if val.max_descriptor_set_update_after_bind_input_attachments.is_none() {
                val.max_descriptor_set_update_after_bind_input_attachments = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_input_attachments,
                );
            }
        }
        if let Some(val_vk) = driver_properties_vk {
            let &ash::vk::PhysicalDeviceDriverProperties {
                driver_id,
                driver_name,
                driver_info,
                conformance_version,
                ..
            } = val_vk;
            if val.driver_id.is_none() {
                val.driver_id = <DriverId>::from_vulkan(driver_id);
            }
            if val.driver_name.is_none() {
                val.driver_name = <String>::from_vulkan(driver_name);
            }
            if val.driver_info.is_none() {
                val.driver_info = <String>::from_vulkan(driver_info);
            }
            if val.conformance_version.is_none() {
                val.conformance_version = <ConformanceVersion>::from_vulkan(
                    conformance_version,
                );
            }
        }
        if let Some(val_vk) = float_controls_properties_vk {
            let &ash::vk::PhysicalDeviceFloatControlsProperties {
                denorm_behavior_independence,
                rounding_mode_independence,
                shader_signed_zero_inf_nan_preserve_float16,
                shader_signed_zero_inf_nan_preserve_float32,
                shader_signed_zero_inf_nan_preserve_float64,
                shader_denorm_preserve_float16,
                shader_denorm_preserve_float32,
                shader_denorm_preserve_float64,
                shader_denorm_flush_to_zero_float16,
                shader_denorm_flush_to_zero_float32,
                shader_denorm_flush_to_zero_float64,
                shader_rounding_mode_rte_float16,
                shader_rounding_mode_rte_float32,
                shader_rounding_mode_rte_float64,
                shader_rounding_mode_rtz_float16,
                shader_rounding_mode_rtz_float32,
                shader_rounding_mode_rtz_float64,
                ..
            } = val_vk;
            if val.denorm_behavior_independence.is_none() {
                val.denorm_behavior_independence = <ShaderFloatControlsIndependence>::from_vulkan(
                    denorm_behavior_independence,
                );
            }
            if val.rounding_mode_independence.is_none() {
                val.rounding_mode_independence = <ShaderFloatControlsIndependence>::from_vulkan(
                    rounding_mode_independence,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float16.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float16 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float16,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float32.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float32 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float32,
                );
            }
            if val.shader_signed_zero_inf_nan_preserve_float64.is_none() {
                val.shader_signed_zero_inf_nan_preserve_float64 = <bool>::from_vulkan(
                    shader_signed_zero_inf_nan_preserve_float64,
                );
            }
            if val.shader_denorm_preserve_float16.is_none() {
                val.shader_denorm_preserve_float16 = <bool>::from_vulkan(
                    shader_denorm_preserve_float16,
                );
            }
            if val.shader_denorm_preserve_float32.is_none() {
                val.shader_denorm_preserve_float32 = <bool>::from_vulkan(
                    shader_denorm_preserve_float32,
                );
            }
            if val.shader_denorm_preserve_float64.is_none() {
                val.shader_denorm_preserve_float64 = <bool>::from_vulkan(
                    shader_denorm_preserve_float64,
                );
            }
            if val.shader_denorm_flush_to_zero_float16.is_none() {
                val.shader_denorm_flush_to_zero_float16 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float16,
                );
            }
            if val.shader_denorm_flush_to_zero_float32.is_none() {
                val.shader_denorm_flush_to_zero_float32 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float32,
                );
            }
            if val.shader_denorm_flush_to_zero_float64.is_none() {
                val.shader_denorm_flush_to_zero_float64 = <bool>::from_vulkan(
                    shader_denorm_flush_to_zero_float64,
                );
            }
            if val.shader_rounding_mode_rte_float16.is_none() {
                val.shader_rounding_mode_rte_float16 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float16,
                );
            }
            if val.shader_rounding_mode_rte_float32.is_none() {
                val.shader_rounding_mode_rte_float32 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float32,
                );
            }
            if val.shader_rounding_mode_rte_float64.is_none() {
                val.shader_rounding_mode_rte_float64 = <bool>::from_vulkan(
                    shader_rounding_mode_rte_float64,
                );
            }
            if val.shader_rounding_mode_rtz_float16.is_none() {
                val.shader_rounding_mode_rtz_float16 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float16,
                );
            }
            if val.shader_rounding_mode_rtz_float32.is_none() {
                val.shader_rounding_mode_rtz_float32 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float32,
                );
            }
            if val.shader_rounding_mode_rtz_float64.is_none() {
                val.shader_rounding_mode_rtz_float64 = <bool>::from_vulkan(
                    shader_rounding_mode_rtz_float64,
                );
            }
        }
        if let Some(val_vk) = sampler_filter_minmax_properties_vk {
            let &ash::vk::PhysicalDeviceSamplerFilterMinmaxProperties {
                filter_minmax_single_component_formats,
                filter_minmax_image_component_mapping,
                ..
            } = val_vk;
            if val.filter_minmax_single_component_formats.is_none() {
                val.filter_minmax_single_component_formats = <bool>::from_vulkan(
                    filter_minmax_single_component_formats,
                );
            }
            if val.filter_minmax_image_component_mapping.is_none() {
                val.filter_minmax_image_component_mapping = <bool>::from_vulkan(
                    filter_minmax_image_component_mapping,
                );
            }
        }
        if let Some(val_vk) = timeline_semaphore_properties_vk {
            let &ash::vk::PhysicalDeviceTimelineSemaphoreProperties {
                max_timeline_semaphore_value_difference,
                ..
            } = val_vk;
            if val.max_timeline_semaphore_value_difference.is_none() {
                val.max_timeline_semaphore_value_difference = <u64>::from_vulkan(
                    max_timeline_semaphore_value_difference,
                );
            }
        }
        if let Some(val_vk) = inline_uniform_block_properties_vk {
            let &ash::vk::PhysicalDeviceInlineUniformBlockProperties {
                max_inline_uniform_block_size,
                max_per_stage_descriptor_inline_uniform_blocks,
                max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
                max_descriptor_set_inline_uniform_blocks,
                max_descriptor_set_update_after_bind_inline_uniform_blocks,
                ..
            } = val_vk;
            if val.max_inline_uniform_block_size.is_none() {
                val.max_inline_uniform_block_size = <u32>::from_vulkan(
                    max_inline_uniform_block_size,
                );
            }
            if val.max_per_stage_descriptor_inline_uniform_blocks.is_none() {
                val.max_per_stage_descriptor_inline_uniform_blocks = <u32>::from_vulkan(
                    max_per_stage_descriptor_inline_uniform_blocks,
                );
            }
            if val
                .max_per_stage_descriptor_update_after_bind_inline_uniform_blocks
                .is_none()
            {
                val.max_per_stage_descriptor_update_after_bind_inline_uniform_blocks = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_inline_uniform_blocks,
                );
            }
            if val.max_descriptor_set_inline_uniform_blocks.is_none() {
                val.max_descriptor_set_inline_uniform_blocks = <u32>::from_vulkan(
                    max_descriptor_set_inline_uniform_blocks,
                );
            }
            if val.max_descriptor_set_update_after_bind_inline_uniform_blocks.is_none() {
                val.max_descriptor_set_update_after_bind_inline_uniform_blocks = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_inline_uniform_blocks,
                );
            }
        }
        if let Some(val_vk) = maintenance4_properties_vk {
            let &ash::vk::PhysicalDeviceMaintenance4Properties { max_buffer_size, .. } = val_vk;
            if val.max_buffer_size.is_none() {
                val.max_buffer_size = <DeviceSize>::from_vulkan(max_buffer_size);
            }
        }
        if let Some(val_vk) = shader_integer_dot_product_properties_vk {
            let &ash::vk::PhysicalDeviceShaderIntegerDotProductProperties {
                integer_dot_product8_bit_unsigned_accelerated,
                integer_dot_product8_bit_signed_accelerated,
                integer_dot_product8_bit_mixed_signedness_accelerated,
                integer_dot_product4x8_bit_packed_unsigned_accelerated,
                integer_dot_product4x8_bit_packed_signed_accelerated,
                integer_dot_product4x8_bit_packed_mixed_signedness_accelerated,
                integer_dot_product16_bit_unsigned_accelerated,
                integer_dot_product16_bit_signed_accelerated,
                integer_dot_product16_bit_mixed_signedness_accelerated,
                integer_dot_product32_bit_unsigned_accelerated,
                integer_dot_product32_bit_signed_accelerated,
                integer_dot_product32_bit_mixed_signedness_accelerated,
                integer_dot_product64_bit_unsigned_accelerated,
                integer_dot_product64_bit_signed_accelerated,
                integer_dot_product64_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating8_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated,
                integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating16_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating32_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated,
                integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated,
                integer_dot_product_accumulating_saturating64_bit_signed_accelerated,
                integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated,
                ..
            } = val_vk;
            if val.integer_dot_product8_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product8_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product8_bit_signed_accelerated.is_none() {
                val.integer_dot_product8_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product8_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product8_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product8_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product4x8_bit_packed_unsigned_accelerated.is_none() {
                val.integer_dot_product4x8_bit_packed_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_unsigned_accelerated,
                );
            }
            if val.integer_dot_product4x8_bit_packed_signed_accelerated.is_none() {
                val.integer_dot_product4x8_bit_packed_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_signed_accelerated,
                );
            }
            if val
                .integer_dot_product4x8_bit_packed_mixed_signedness_accelerated
                .is_none()
            {
                val.integer_dot_product4x8_bit_packed_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product4x8_bit_packed_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product16_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product16_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product16_bit_signed_accelerated.is_none() {
                val.integer_dot_product16_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product16_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product16_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product16_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product32_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product32_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product32_bit_signed_accelerated.is_none() {
                val.integer_dot_product32_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product32_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product32_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product32_bit_mixed_signedness_accelerated,
                );
            }
            if val.integer_dot_product64_bit_unsigned_accelerated.is_none() {
                val.integer_dot_product64_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_unsigned_accelerated,
                );
            }
            if val.integer_dot_product64_bit_signed_accelerated.is_none() {
                val.integer_dot_product64_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_signed_accelerated,
                );
            }
            if val.integer_dot_product64_bit_mixed_signedness_accelerated.is_none() {
                val.integer_dot_product64_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product64_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_signed_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_signed_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_signed_accelerated,
                );
            }
            if val
                .integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated
                .is_none()
            {
                val
                    .integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated = <bool>::from_vulkan(
                    integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated,
                );
            }
        }
        if let Some(val_vk) = subgroup_size_control_properties_vk {
            let &ash::vk::PhysicalDeviceSubgroupSizeControlProperties {
                min_subgroup_size,
                max_subgroup_size,
                max_compute_workgroup_subgroups,
                required_subgroup_size_stages,
                ..
            } = val_vk;
            if val.min_subgroup_size.is_none() {
                val.min_subgroup_size = <u32>::from_vulkan(min_subgroup_size);
            }
            if val.max_subgroup_size.is_none() {
                val.max_subgroup_size = <u32>::from_vulkan(max_subgroup_size);
            }
            if val.max_compute_workgroup_subgroups.is_none() {
                val.max_compute_workgroup_subgroups = <u32>::from_vulkan(
                    max_compute_workgroup_subgroups,
                );
            }
            if val.required_subgroup_size_stages.is_none() {
                val.required_subgroup_size_stages = <ShaderStages>::from_vulkan(
                    required_subgroup_size_stages,
                );
            }
        }
        if let Some(val_vk) = texel_buffer_alignment_properties_vk {
            let &ash::vk::PhysicalDeviceTexelBufferAlignmentProperties {
                storage_texel_buffer_offset_alignment_bytes,
                storage_texel_buffer_offset_single_texel_alignment,
                uniform_texel_buffer_offset_alignment_bytes,
                uniform_texel_buffer_offset_single_texel_alignment,
                ..
            } = val_vk;
            if val.storage_texel_buffer_offset_alignment_bytes.is_none() {
                val.storage_texel_buffer_offset_alignment_bytes = <DeviceAlignment>::from_vulkan(
                    storage_texel_buffer_offset_alignment_bytes,
                );
            }
            if val.storage_texel_buffer_offset_single_texel_alignment.is_none() {
                val.storage_texel_buffer_offset_single_texel_alignment = <bool>::from_vulkan(
                    storage_texel_buffer_offset_single_texel_alignment,
                );
            }
            if val.uniform_texel_buffer_offset_alignment_bytes.is_none() {
                val.uniform_texel_buffer_offset_alignment_bytes = <DeviceAlignment>::from_vulkan(
                    uniform_texel_buffer_offset_alignment_bytes,
                );
            }
            if val.uniform_texel_buffer_offset_single_texel_alignment.is_none() {
                val.uniform_texel_buffer_offset_single_texel_alignment = <bool>::from_vulkan(
                    uniform_texel_buffer_offset_single_texel_alignment,
                );
            }
        }
        if let Some(val_vk) = acceleration_structure_properties_khr_vk {
            let &ash::vk::PhysicalDeviceAccelerationStructurePropertiesKHR {
                max_geometry_count,
                max_instance_count,
                max_primitive_count,
                max_per_stage_descriptor_acceleration_structures,
                max_per_stage_descriptor_update_after_bind_acceleration_structures,
                max_descriptor_set_acceleration_structures,
                max_descriptor_set_update_after_bind_acceleration_structures,
                min_acceleration_structure_scratch_offset_alignment,
                ..
            } = val_vk;
            if val.max_geometry_count.is_none() {
                val.max_geometry_count = <u64>::from_vulkan(max_geometry_count);
            }
            if val.max_instance_count.is_none() {
                val.max_instance_count = <u64>::from_vulkan(max_instance_count);
            }
            if val.max_primitive_count.is_none() {
                val.max_primitive_count = <u64>::from_vulkan(max_primitive_count);
            }
            if val.max_per_stage_descriptor_acceleration_structures.is_none() {
                val.max_per_stage_descriptor_acceleration_structures = <u32>::from_vulkan(
                    max_per_stage_descriptor_acceleration_structures,
                );
            }
            if val
                .max_per_stage_descriptor_update_after_bind_acceleration_structures
                .is_none()
            {
                val.max_per_stage_descriptor_update_after_bind_acceleration_structures = <u32>::from_vulkan(
                    max_per_stage_descriptor_update_after_bind_acceleration_structures,
                );
            }
            if val.max_descriptor_set_acceleration_structures.is_none() {
                val.max_descriptor_set_acceleration_structures = <u32>::from_vulkan(
                    max_descriptor_set_acceleration_structures,
                );
            }
            if val.max_descriptor_set_update_after_bind_acceleration_structures.is_none()
            {
                val.max_descriptor_set_update_after_bind_acceleration_structures = <u32>::from_vulkan(
                    max_descriptor_set_update_after_bind_acceleration_structures,
                );
            }
            if val.min_acceleration_structure_scratch_offset_alignment.is_none() {
                val.min_acceleration_structure_scratch_offset_alignment = <u32>::from_vulkan(
                    min_acceleration_structure_scratch_offset_alignment,
                );
            }
        }
        if let Some(val_vk) = cooperative_matrix_properties_khr_vk {
            let &ash::vk::PhysicalDeviceCooperativeMatrixPropertiesKHR {
                cooperative_matrix_supported_stages,
                ..
            } = val_vk;
            if val.cooperative_matrix_supported_stages.is_none() {
                val.cooperative_matrix_supported_stages = <ShaderStages>::from_vulkan(
                    cooperative_matrix_supported_stages,
                );
            }
        }
        if let Some(val_vk) = fragment_shader_barycentric_properties_khr_vk {
            let &ash::vk::PhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
                tri_strip_vertex_order_independent_of_provoking_vertex,
                ..
            } = val_vk;
            if val.tri_strip_vertex_order_independent_of_provoking_vertex.is_none() {
                val.tri_strip_vertex_order_independent_of_provoking_vertex = <bool>::from_vulkan(
                    tri_strip_vertex_order_independent_of_provoking_vertex,
                );
            }
        }
        if let Some(val_vk) = fragment_shading_rate_properties_khr_vk {
            let &ash::vk::PhysicalDeviceFragmentShadingRatePropertiesKHR {
                min_fragment_shading_rate_attachment_texel_size,
                max_fragment_shading_rate_attachment_texel_size,
                max_fragment_shading_rate_attachment_texel_size_aspect_ratio,
                primitive_fragment_shading_rate_with_multiple_viewports,
                layered_shading_rate_attachments,
                fragment_shading_rate_non_trivial_combiner_ops,
                max_fragment_size,
                max_fragment_size_aspect_ratio,
                max_fragment_shading_rate_coverage_samples,
                max_fragment_shading_rate_rasterization_samples,
                fragment_shading_rate_with_shader_depth_stencil_writes,
                fragment_shading_rate_with_sample_mask,
                fragment_shading_rate_with_shader_sample_mask,
                fragment_shading_rate_with_conservative_rasterization,
                fragment_shading_rate_with_fragment_shader_interlock,
                fragment_shading_rate_with_custom_sample_locations,
                fragment_shading_rate_strict_multiply_combiner,
                ..
            } = val_vk;
            if val.min_fragment_shading_rate_attachment_texel_size.is_none() {
                val.min_fragment_shading_rate_attachment_texel_size = <[u32; 2]>::from_vulkan(
                    min_fragment_shading_rate_attachment_texel_size,
                );
            }
            if val.max_fragment_shading_rate_attachment_texel_size.is_none() {
                val.max_fragment_shading_rate_attachment_texel_size = <[u32; 2]>::from_vulkan(
                    max_fragment_shading_rate_attachment_texel_size,
                );
            }
            if val.max_fragment_shading_rate_attachment_texel_size_aspect_ratio.is_none()
            {
                val.max_fragment_shading_rate_attachment_texel_size_aspect_ratio = <u32>::from_vulkan(
                    max_fragment_shading_rate_attachment_texel_size_aspect_ratio,
                );
            }
            if val.primitive_fragment_shading_rate_with_multiple_viewports.is_none() {
                val.primitive_fragment_shading_rate_with_multiple_viewports = <bool>::from_vulkan(
                    primitive_fragment_shading_rate_with_multiple_viewports,
                );
            }
            if val.layered_shading_rate_attachments.is_none() {
                val.layered_shading_rate_attachments = <bool>::from_vulkan(
                    layered_shading_rate_attachments,
                );
            }
            if val.fragment_shading_rate_non_trivial_combiner_ops.is_none() {
                val.fragment_shading_rate_non_trivial_combiner_ops = <bool>::from_vulkan(
                    fragment_shading_rate_non_trivial_combiner_ops,
                );
            }
            if val.max_fragment_size.is_none() {
                val.max_fragment_size = <[u32; 2]>::from_vulkan(max_fragment_size);
            }
            if val.max_fragment_size_aspect_ratio.is_none() {
                val.max_fragment_size_aspect_ratio = <u32>::from_vulkan(
                    max_fragment_size_aspect_ratio,
                );
            }
            if val.max_fragment_shading_rate_coverage_samples.is_none() {
                val.max_fragment_shading_rate_coverage_samples = <u32>::from_vulkan(
                    max_fragment_shading_rate_coverage_samples,
                );
            }
            if val.max_fragment_shading_rate_rasterization_samples.is_none() {
                val.max_fragment_shading_rate_rasterization_samples = <SampleCount>::from_vulkan(
                    max_fragment_shading_rate_rasterization_samples,
                );
            }
            if val.fragment_shading_rate_with_shader_depth_stencil_writes.is_none() {
                val.fragment_shading_rate_with_shader_depth_stencil_writes = <bool>::from_vulkan(
                    fragment_shading_rate_with_shader_depth_stencil_writes,
                );
            }
            if val.fragment_shading_rate_with_sample_mask.is_none() {
                val.fragment_shading_rate_with_sample_mask = <bool>::from_vulkan(
                    fragment_shading_rate_with_sample_mask,
                );
            }
            if val.fragment_shading_rate_with_shader_sample_mask.is_none() {
                val.fragment_shading_rate_with_shader_sample_mask = <bool>::from_vulkan(
                    fragment_shading_rate_with_shader_sample_mask,
                );
            }
            if val.fragment_shading_rate_with_conservative_rasterization.is_none() {
                val.fragment_shading_rate_with_conservative_rasterization = <bool>::from_vulkan(
                    fragment_shading_rate_with_conservative_rasterization,
                );
            }
            if val.fragment_shading_rate_with_fragment_shader_interlock.is_none() {
                val.fragment_shading_rate_with_fragment_shader_interlock = <bool>::from_vulkan(
                    fragment_shading_rate_with_fragment_shader_interlock,
                );
            }
            if val.fragment_shading_rate_with_custom_sample_locations.is_none() {
                val.fragment_shading_rate_with_custom_sample_locations = <bool>::from_vulkan(
                    fragment_shading_rate_with_custom_sample_locations,
                );
            }
            if val.fragment_shading_rate_strict_multiply_combiner.is_none() {
                val.fragment_shading_rate_strict_multiply_combiner = <bool>::from_vulkan(
                    fragment_shading_rate_strict_multiply_combiner,
                );
            }
        }
        if let Some(val_vk) = line_rasterization_properties_khr_vk {
            let &ash::vk::PhysicalDeviceLineRasterizationPropertiesKHR {
                line_sub_pixel_precision_bits,
                ..
            } = val_vk;
            if val.line_sub_pixel_precision_bits.is_none() {
                val.line_sub_pixel_precision_bits = <u32>::from_vulkan(
                    line_sub_pixel_precision_bits,
                );
            }
        }
        if let Some(val_vk) = maintenance5_properties_khr_vk {
            let &ash::vk::PhysicalDeviceMaintenance5PropertiesKHR {
                early_fragment_multisample_coverage_after_sample_counting,
                early_fragment_sample_mask_test_before_sample_counting,
                depth_stencil_swizzle_one_support,
                polygon_mode_point_size,
                non_strict_single_pixel_wide_lines_use_parallelogram,
                non_strict_wide_lines_use_parallelogram,
                ..
            } = val_vk;
            if val.early_fragment_multisample_coverage_after_sample_counting.is_none() {
                val.early_fragment_multisample_coverage_after_sample_counting = <bool>::from_vulkan(
                    early_fragment_multisample_coverage_after_sample_counting,
                );
            }
            if val.early_fragment_sample_mask_test_before_sample_counting.is_none() {
                val.early_fragment_sample_mask_test_before_sample_counting = <bool>::from_vulkan(
                    early_fragment_sample_mask_test_before_sample_counting,
                );
            }
            if val.depth_stencil_swizzle_one_support.is_none() {
                val.depth_stencil_swizzle_one_support = <bool>::from_vulkan(
                    depth_stencil_swizzle_one_support,
                );
            }
            if val.polygon_mode_point_size.is_none() {
                val.polygon_mode_point_size = <bool>::from_vulkan(
                    polygon_mode_point_size,
                );
            }
            if val.non_strict_single_pixel_wide_lines_use_parallelogram.is_none() {
                val.non_strict_single_pixel_wide_lines_use_parallelogram = <bool>::from_vulkan(
                    non_strict_single_pixel_wide_lines_use_parallelogram,
                );
            }
            if val.non_strict_wide_lines_use_parallelogram.is_none() {
                val.non_strict_wide_lines_use_parallelogram = <bool>::from_vulkan(
                    non_strict_wide_lines_use_parallelogram,
                );
            }
        }
        if let Some(val_vk) = maintenance6_properties_khr_vk {
            let &ash::vk::PhysicalDeviceMaintenance6PropertiesKHR {
                block_texel_view_compatible_multiple_layers,
                max_combined_image_sampler_descriptor_count,
                fragment_shading_rate_clamp_combiner_inputs,
                ..
            } = val_vk;
            if val.block_texel_view_compatible_multiple_layers.is_none() {
                val.block_texel_view_compatible_multiple_layers = <bool>::from_vulkan(
                    block_texel_view_compatible_multiple_layers,
                );
            }
            if val.max_combined_image_sampler_descriptor_count.is_none() {
                val.max_combined_image_sampler_descriptor_count = <u32>::from_vulkan(
                    max_combined_image_sampler_descriptor_count,
                );
            }
            if val.fragment_shading_rate_clamp_combiner_inputs.is_none() {
                val.fragment_shading_rate_clamp_combiner_inputs = <bool>::from_vulkan(
                    fragment_shading_rate_clamp_combiner_inputs,
                );
            }
        }
        if let Some(val_vk) = performance_query_properties_khr_vk {
            let &ash::vk::PhysicalDevicePerformanceQueryPropertiesKHR {
                allow_command_buffer_query_copies,
                ..
            } = val_vk;
            if val.allow_command_buffer_query_copies.is_none() {
                val.allow_command_buffer_query_copies = <bool>::from_vulkan(
                    allow_command_buffer_query_copies,
                );
            }
        }
        if let Some(val_vk) = portability_subset_properties_khr_vk {
            let &ash::vk::PhysicalDevicePortabilitySubsetPropertiesKHR {
                min_vertex_input_binding_stride_alignment,
                ..
            } = val_vk;
            if val.min_vertex_input_binding_stride_alignment.is_none() {
                val.min_vertex_input_binding_stride_alignment = <u32>::from_vulkan(
                    min_vertex_input_binding_stride_alignment,
                );
            }
        }
        if let Some(val_vk) = push_descriptor_properties_khr_vk {
            let &ash::vk::PhysicalDevicePushDescriptorPropertiesKHR {
                max_push_descriptors,
                ..
            } = val_vk;
            if val.max_push_descriptors.is_none() {
                val.max_push_descriptors = <u32>::from_vulkan(max_push_descriptors);
            }
        }
        if let Some(val_vk) = ray_tracing_pipeline_properties_khr_vk {
            let &ash::vk::PhysicalDeviceRayTracingPipelinePropertiesKHR {
                shader_group_handle_size,
                max_ray_recursion_depth,
                max_shader_group_stride,
                shader_group_base_alignment,
                shader_group_handle_capture_replay_size,
                max_ray_dispatch_invocation_count,
                shader_group_handle_alignment,
                max_ray_hit_attribute_size,
                ..
            } = val_vk;
            if val.shader_group_handle_size.is_none() {
                val.shader_group_handle_size = <u32>::from_vulkan(
                    shader_group_handle_size,
                );
            }
            if val.max_ray_recursion_depth.is_none() {
                val.max_ray_recursion_depth = <u32>::from_vulkan(
                    max_ray_recursion_depth,
                );
            }
            if val.max_shader_group_stride.is_none() {
                val.max_shader_group_stride = <u32>::from_vulkan(
                    max_shader_group_stride,
                );
            }
            if val.shader_group_base_alignment.is_none() {
                val.shader_group_base_alignment = <u32>::from_vulkan(
                    shader_group_base_alignment,
                );
            }
            if val.shader_group_handle_capture_replay_size.is_none() {
                val.shader_group_handle_capture_replay_size = <u32>::from_vulkan(
                    shader_group_handle_capture_replay_size,
                );
            }
            if val.max_ray_dispatch_invocation_count.is_none() {
                val.max_ray_dispatch_invocation_count = <u32>::from_vulkan(
                    max_ray_dispatch_invocation_count,
                );
            }
            if val.shader_group_handle_alignment.is_none() {
                val.shader_group_handle_alignment = <u32>::from_vulkan(
                    shader_group_handle_alignment,
                );
            }
            if val.max_ray_hit_attribute_size.is_none() {
                val.max_ray_hit_attribute_size = <u32>::from_vulkan(
                    max_ray_hit_attribute_size,
                );
            }
        }
        if let Some(val_vk) = vertex_attribute_divisor_properties_khr_vk {
            let &ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesKHR {
                max_vertex_attrib_divisor,
                supports_non_zero_first_instance,
                ..
            } = val_vk;
            if val.max_vertex_attrib_divisor.is_none() {
                val.max_vertex_attrib_divisor = <u32>::from_vulkan(
                    max_vertex_attrib_divisor,
                );
            }
            if val.supports_non_zero_first_instance.is_none() {
                val.supports_non_zero_first_instance = <bool>::from_vulkan(
                    supports_non_zero_first_instance,
                );
            }
        }
        if let Some(val_vk) = blend_operation_advanced_properties_ext_vk {
            let &ash::vk::PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
                advanced_blend_max_color_attachments,
                advanced_blend_independent_blend,
                advanced_blend_non_premultiplied_src_color,
                advanced_blend_non_premultiplied_dst_color,
                advanced_blend_correlated_overlap,
                advanced_blend_all_operations,
                ..
            } = val_vk;
            if val.advanced_blend_max_color_attachments.is_none() {
                val.advanced_blend_max_color_attachments = <u32>::from_vulkan(
                    advanced_blend_max_color_attachments,
                );
            }
            if val.advanced_blend_independent_blend.is_none() {
                val.advanced_blend_independent_blend = <bool>::from_vulkan(
                    advanced_blend_independent_blend,
                );
            }
            if val.advanced_blend_non_premultiplied_src_color.is_none() {
                val.advanced_blend_non_premultiplied_src_color = <bool>::from_vulkan(
                    advanced_blend_non_premultiplied_src_color,
                );
            }
            if val.advanced_blend_non_premultiplied_dst_color.is_none() {
                val.advanced_blend_non_premultiplied_dst_color = <bool>::from_vulkan(
                    advanced_blend_non_premultiplied_dst_color,
                );
            }
            if val.advanced_blend_correlated_overlap.is_none() {
                val.advanced_blend_correlated_overlap = <bool>::from_vulkan(
                    advanced_blend_correlated_overlap,
                );
            }
            if val.advanced_blend_all_operations.is_none() {
                val.advanced_blend_all_operations = <bool>::from_vulkan(
                    advanced_blend_all_operations,
                );
            }
        }
        if let Some(val_vk) = conservative_rasterization_properties_ext_vk {
            let &ash::vk::PhysicalDeviceConservativeRasterizationPropertiesEXT {
                primitive_overestimation_size,
                max_extra_primitive_overestimation_size,
                extra_primitive_overestimation_size_granularity,
                primitive_underestimation,
                conservative_point_and_line_rasterization,
                degenerate_triangles_rasterized,
                degenerate_lines_rasterized,
                fully_covered_fragment_shader_input_variable,
                conservative_rasterization_post_depth_coverage,
                ..
            } = val_vk;
            if val.primitive_overestimation_size.is_none() {
                val.primitive_overestimation_size = <f32>::from_vulkan(
                    primitive_overestimation_size,
                );
            }
            if val.max_extra_primitive_overestimation_size.is_none() {
                val.max_extra_primitive_overestimation_size = <f32>::from_vulkan(
                    max_extra_primitive_overestimation_size,
                );
            }
            if val.extra_primitive_overestimation_size_granularity.is_none() {
                val.extra_primitive_overestimation_size_granularity = <f32>::from_vulkan(
                    extra_primitive_overestimation_size_granularity,
                );
            }
            if val.primitive_underestimation.is_none() {
                val.primitive_underestimation = <bool>::from_vulkan(
                    primitive_underestimation,
                );
            }
            if val.conservative_point_and_line_rasterization.is_none() {
                val.conservative_point_and_line_rasterization = <bool>::from_vulkan(
                    conservative_point_and_line_rasterization,
                );
            }
            if val.degenerate_triangles_rasterized.is_none() {
                val.degenerate_triangles_rasterized = <bool>::from_vulkan(
                    degenerate_triangles_rasterized,
                );
            }
            if val.degenerate_lines_rasterized.is_none() {
                val.degenerate_lines_rasterized = <bool>::from_vulkan(
                    degenerate_lines_rasterized,
                );
            }
            if val.fully_covered_fragment_shader_input_variable.is_none() {
                val.fully_covered_fragment_shader_input_variable = <bool>::from_vulkan(
                    fully_covered_fragment_shader_input_variable,
                );
            }
            if val.conservative_rasterization_post_depth_coverage.is_none() {
                val.conservative_rasterization_post_depth_coverage = <bool>::from_vulkan(
                    conservative_rasterization_post_depth_coverage,
                );
            }
        }
        if let Some(val_vk) = custom_border_color_properties_ext_vk {
            let &ash::vk::PhysicalDeviceCustomBorderColorPropertiesEXT {
                max_custom_border_color_samplers,
                ..
            } = val_vk;
            if val.max_custom_border_color_samplers.is_none() {
                val.max_custom_border_color_samplers = <u32>::from_vulkan(
                    max_custom_border_color_samplers,
                );
            }
        }
        if let Some(val_vk) = descriptor_buffer_density_map_properties_ext_vk {
            let &ash::vk::PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
                combined_image_sampler_density_map_descriptor_size,
                ..
            } = val_vk;
            if val.combined_image_sampler_density_map_descriptor_size.is_none() {
                val.combined_image_sampler_density_map_descriptor_size = <usize>::from_vulkan(
                    combined_image_sampler_density_map_descriptor_size,
                );
            }
        }
        if let Some(val_vk) = descriptor_buffer_properties_ext_vk {
            let &ash::vk::PhysicalDeviceDescriptorBufferPropertiesEXT {
                combined_image_sampler_descriptor_single_array,
                bufferless_push_descriptors,
                allow_sampler_image_view_post_submit_creation,
                descriptor_buffer_offset_alignment,
                max_descriptor_buffer_bindings,
                max_resource_descriptor_buffer_bindings,
                max_sampler_descriptor_buffer_bindings,
                max_embedded_immutable_sampler_bindings,
                max_embedded_immutable_samplers,
                buffer_capture_replay_descriptor_data_size,
                image_capture_replay_descriptor_data_size,
                image_view_capture_replay_descriptor_data_size,
                sampler_capture_replay_descriptor_data_size,
                acceleration_structure_capture_replay_descriptor_data_size,
                sampler_descriptor_size,
                combined_image_sampler_descriptor_size,
                sampled_image_descriptor_size,
                storage_image_descriptor_size,
                uniform_texel_buffer_descriptor_size,
                robust_uniform_texel_buffer_descriptor_size,
                storage_texel_buffer_descriptor_size,
                robust_storage_texel_buffer_descriptor_size,
                uniform_buffer_descriptor_size,
                robust_uniform_buffer_descriptor_size,
                storage_buffer_descriptor_size,
                robust_storage_buffer_descriptor_size,
                input_attachment_descriptor_size,
                acceleration_structure_descriptor_size,
                max_sampler_descriptor_buffer_range,
                max_resource_descriptor_buffer_range,
                sampler_descriptor_buffer_address_space_size,
                resource_descriptor_buffer_address_space_size,
                descriptor_buffer_address_space_size,
                ..
            } = val_vk;
            if val.combined_image_sampler_descriptor_single_array.is_none() {
                val.combined_image_sampler_descriptor_single_array = <bool>::from_vulkan(
                    combined_image_sampler_descriptor_single_array,
                );
            }
            if val.bufferless_push_descriptors.is_none() {
                val.bufferless_push_descriptors = <bool>::from_vulkan(
                    bufferless_push_descriptors,
                );
            }
            if val.allow_sampler_image_view_post_submit_creation.is_none() {
                val.allow_sampler_image_view_post_submit_creation = <bool>::from_vulkan(
                    allow_sampler_image_view_post_submit_creation,
                );
            }
            if val.descriptor_buffer_offset_alignment.is_none() {
                val.descriptor_buffer_offset_alignment = <DeviceSize>::from_vulkan(
                    descriptor_buffer_offset_alignment,
                );
            }
            if val.max_descriptor_buffer_bindings.is_none() {
                val.max_descriptor_buffer_bindings = <u32>::from_vulkan(
                    max_descriptor_buffer_bindings,
                );
            }
            if val.max_resource_descriptor_buffer_bindings.is_none() {
                val.max_resource_descriptor_buffer_bindings = <u32>::from_vulkan(
                    max_resource_descriptor_buffer_bindings,
                );
            }
            if val.max_sampler_descriptor_buffer_bindings.is_none() {
                val.max_sampler_descriptor_buffer_bindings = <u32>::from_vulkan(
                    max_sampler_descriptor_buffer_bindings,
                );
            }
            if val.max_embedded_immutable_sampler_bindings.is_none() {
                val.max_embedded_immutable_sampler_bindings = <u32>::from_vulkan(
                    max_embedded_immutable_sampler_bindings,
                );
            }
            if val.max_embedded_immutable_samplers.is_none() {
                val.max_embedded_immutable_samplers = <u32>::from_vulkan(
                    max_embedded_immutable_samplers,
                );
            }
            if val.buffer_capture_replay_descriptor_data_size.is_none() {
                val.buffer_capture_replay_descriptor_data_size = <usize>::from_vulkan(
                    buffer_capture_replay_descriptor_data_size,
                );
            }
            if val.image_capture_replay_descriptor_data_size.is_none() {
                val.image_capture_replay_descriptor_data_size = <usize>::from_vulkan(
                    image_capture_replay_descriptor_data_size,
                );
            }
            if val.image_view_capture_replay_descriptor_data_size.is_none() {
                val.image_view_capture_replay_descriptor_data_size = <usize>::from_vulkan(
                    image_view_capture_replay_descriptor_data_size,
                );
            }
            if val.sampler_capture_replay_descriptor_data_size.is_none() {
                val.sampler_capture_replay_descriptor_data_size = <usize>::from_vulkan(
                    sampler_capture_replay_descriptor_data_size,
                );
            }
            if val.acceleration_structure_capture_replay_descriptor_data_size.is_none() {
                val.acceleration_structure_capture_replay_descriptor_data_size = <usize>::from_vulkan(
                    acceleration_structure_capture_replay_descriptor_data_size,
                );
            }
            if val.sampler_descriptor_size.is_none() {
                val.sampler_descriptor_size = <usize>::from_vulkan(
                    sampler_descriptor_size,
                );
            }
            if val.combined_image_sampler_descriptor_size.is_none() {
                val.combined_image_sampler_descriptor_size = <usize>::from_vulkan(
                    combined_image_sampler_descriptor_size,
                );
            }
            if val.sampled_image_descriptor_size.is_none() {
                val.sampled_image_descriptor_size = <usize>::from_vulkan(
                    sampled_image_descriptor_size,
                );
            }
            if val.storage_image_descriptor_size.is_none() {
                val.storage_image_descriptor_size = <usize>::from_vulkan(
                    storage_image_descriptor_size,
                );
            }
            if val.uniform_texel_buffer_descriptor_size.is_none() {
                val.uniform_texel_buffer_descriptor_size = <usize>::from_vulkan(
                    uniform_texel_buffer_descriptor_size,
                );
            }
            if val.robust_uniform_texel_buffer_descriptor_size.is_none() {
                val.robust_uniform_texel_buffer_descriptor_size = <usize>::from_vulkan(
                    robust_uniform_texel_buffer_descriptor_size,
                );
            }
            if val.storage_texel_buffer_descriptor_size.is_none() {
                val.storage_texel_buffer_descriptor_size = <usize>::from_vulkan(
                    storage_texel_buffer_descriptor_size,
                );
            }
            if val.robust_storage_texel_buffer_descriptor_size.is_none() {
                val.robust_storage_texel_buffer_descriptor_size = <usize>::from_vulkan(
                    robust_storage_texel_buffer_descriptor_size,
                );
            }
            if val.uniform_buffer_descriptor_size.is_none() {
                val.uniform_buffer_descriptor_size = <usize>::from_vulkan(
                    uniform_buffer_descriptor_size,
                );
            }
            if val.robust_uniform_buffer_descriptor_size.is_none() {
                val.robust_uniform_buffer_descriptor_size = <usize>::from_vulkan(
                    robust_uniform_buffer_descriptor_size,
                );
            }
            if val.storage_buffer_descriptor_size.is_none() {
                val.storage_buffer_descriptor_size = <usize>::from_vulkan(
                    storage_buffer_descriptor_size,
                );
            }
            if val.robust_storage_buffer_descriptor_size.is_none() {
                val.robust_storage_buffer_descriptor_size = <usize>::from_vulkan(
                    robust_storage_buffer_descriptor_size,
                );
            }
            if val.input_attachment_descriptor_size.is_none() {
                val.input_attachment_descriptor_size = <usize>::from_vulkan(
                    input_attachment_descriptor_size,
                );
            }
            if val.acceleration_structure_descriptor_size.is_none() {
                val.acceleration_structure_descriptor_size = <usize>::from_vulkan(
                    acceleration_structure_descriptor_size,
                );
            }
            if val.max_sampler_descriptor_buffer_range.is_none() {
                val.max_sampler_descriptor_buffer_range = <DeviceSize>::from_vulkan(
                    max_sampler_descriptor_buffer_range,
                );
            }
            if val.max_resource_descriptor_buffer_range.is_none() {
                val.max_resource_descriptor_buffer_range = <DeviceSize>::from_vulkan(
                    max_resource_descriptor_buffer_range,
                );
            }
            if val.sampler_descriptor_buffer_address_space_size.is_none() {
                val.sampler_descriptor_buffer_address_space_size = <DeviceSize>::from_vulkan(
                    sampler_descriptor_buffer_address_space_size,
                );
            }
            if val.resource_descriptor_buffer_address_space_size.is_none() {
                val.resource_descriptor_buffer_address_space_size = <DeviceSize>::from_vulkan(
                    resource_descriptor_buffer_address_space_size,
                );
            }
            if val.descriptor_buffer_address_space_size.is_none() {
                val.descriptor_buffer_address_space_size = <DeviceSize>::from_vulkan(
                    descriptor_buffer_address_space_size,
                );
            }
        }
        if let Some(val_vk) = discard_rectangle_properties_ext_vk {
            let &ash::vk::PhysicalDeviceDiscardRectanglePropertiesEXT {
                max_discard_rectangles,
                ..
            } = val_vk;
            if val.max_discard_rectangles.is_none() {
                val.max_discard_rectangles = <u32>::from_vulkan(max_discard_rectangles);
            }
        }
        if let Some(val_vk) = drm_properties_ext_vk {
            let &ash::vk::PhysicalDeviceDrmPropertiesEXT {
                has_primary,
                has_render,
                primary_major,
                primary_minor,
                render_major,
                render_minor,
                ..
            } = val_vk;
            if val.has_primary.is_none() {
                val.has_primary = <bool>::from_vulkan(has_primary);
            }
            if val.has_render.is_none() {
                val.has_render = <bool>::from_vulkan(has_render);
            }
            if val.primary_major.is_none() {
                val.primary_major = <i64>::from_vulkan(primary_major);
            }
            if val.primary_minor.is_none() {
                val.primary_minor = <i64>::from_vulkan(primary_minor);
            }
            if val.render_major.is_none() {
                val.render_major = <i64>::from_vulkan(render_major);
            }
            if val.render_minor.is_none() {
                val.render_minor = <i64>::from_vulkan(render_minor);
            }
        }
        if let Some(val_vk) = extended_dynamic_state3_properties_ext_vk {
            let &ash::vk::PhysicalDeviceExtendedDynamicState3PropertiesEXT {
                dynamic_primitive_topology_unrestricted,
                ..
            } = val_vk;
            if val.dynamic_primitive_topology_unrestricted.is_none() {
                val.dynamic_primitive_topology_unrestricted = <bool>::from_vulkan(
                    dynamic_primitive_topology_unrestricted,
                );
            }
        }
        if let Some(val_vk) = external_memory_host_properties_ext_vk {
            let &ash::vk::PhysicalDeviceExternalMemoryHostPropertiesEXT {
                min_imported_host_pointer_alignment,
                ..
            } = val_vk;
            if val.min_imported_host_pointer_alignment.is_none() {
                val.min_imported_host_pointer_alignment = <DeviceSize>::from_vulkan(
                    min_imported_host_pointer_alignment,
                );
            }
        }
        if let Some(val_vk) = fragment_density_map2_properties_ext_vk {
            let &ash::vk::PhysicalDeviceFragmentDensityMap2PropertiesEXT {
                subsampled_loads,
                subsampled_coarse_reconstruction_early_access,
                max_subsampled_array_layers,
                max_descriptor_set_subsampled_samplers,
                ..
            } = val_vk;
            if val.subsampled_loads.is_none() {
                val.subsampled_loads = <bool>::from_vulkan(subsampled_loads);
            }
            if val.subsampled_coarse_reconstruction_early_access.is_none() {
                val.subsampled_coarse_reconstruction_early_access = <bool>::from_vulkan(
                    subsampled_coarse_reconstruction_early_access,
                );
            }
            if val.max_subsampled_array_layers.is_none() {
                val.max_subsampled_array_layers = <u32>::from_vulkan(
                    max_subsampled_array_layers,
                );
            }
            if val.max_descriptor_set_subsampled_samplers.is_none() {
                val.max_descriptor_set_subsampled_samplers = <u32>::from_vulkan(
                    max_descriptor_set_subsampled_samplers,
                );
            }
        }
        if let Some(val_vk) = fragment_density_map_properties_ext_vk {
            let &ash::vk::PhysicalDeviceFragmentDensityMapPropertiesEXT {
                min_fragment_density_texel_size,
                max_fragment_density_texel_size,
                fragment_density_invocations,
                ..
            } = val_vk;
            if val.min_fragment_density_texel_size.is_none() {
                val.min_fragment_density_texel_size = <[u32; 2]>::from_vulkan(
                    min_fragment_density_texel_size,
                );
            }
            if val.max_fragment_density_texel_size.is_none() {
                val.max_fragment_density_texel_size = <[u32; 2]>::from_vulkan(
                    max_fragment_density_texel_size,
                );
            }
            if val.fragment_density_invocations.is_none() {
                val.fragment_density_invocations = <bool>::from_vulkan(
                    fragment_density_invocations,
                );
            }
        }
        if let Some(val_vk) = graphics_pipeline_library_properties_ext_vk {
            let &ash::vk::PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
                graphics_pipeline_library_fast_linking,
                graphics_pipeline_library_independent_interpolation_decoration,
                ..
            } = val_vk;
            if val.graphics_pipeline_library_fast_linking.is_none() {
                val.graphics_pipeline_library_fast_linking = <bool>::from_vulkan(
                    graphics_pipeline_library_fast_linking,
                );
            }
            if val
                .graphics_pipeline_library_independent_interpolation_decoration
                .is_none()
            {
                val.graphics_pipeline_library_independent_interpolation_decoration = <bool>::from_vulkan(
                    graphics_pipeline_library_independent_interpolation_decoration,
                );
            }
        }
        if let Some((val_vk, fields_vk)) = host_image_copy_properties_ext_vk
            .as_ref()
            .zip(physical_device_host_image_copy_properties_ext_fields1_vk.as_ref())
        {
            let &ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT {
                copy_src_layout_count,
                copy_dst_layout_count,
                optimal_tiling_layout_uuid,
                identical_memory_type_requirements,
                ..
            } = val_vk;
            let PhysicalDeviceHostImageCopyPropertiesEXTFields1Vk {
                copy_src_layouts,
                copy_dst_layouts,
            } = fields_vk;
            if val.copy_src_layouts.is_none() {
                val.copy_src_layouts = <Vec<
                    ImageLayout,
                >>::from_vulkan(&copy_src_layouts[..copy_src_layout_count as usize]);
            }
            if val.copy_dst_layouts.is_none() {
                val.copy_dst_layouts = <Vec<
                    ImageLayout,
                >>::from_vulkan(&copy_dst_layouts[..copy_dst_layout_count as usize]);
            }
            if val.optimal_tiling_layout_uuid.is_none() {
                val.optimal_tiling_layout_uuid = <[u8; 16usize]>::from_vulkan(
                    optimal_tiling_layout_uuid,
                );
            }
            if val.identical_memory_type_requirements.is_none() {
                val.identical_memory_type_requirements = <bool>::from_vulkan(
                    identical_memory_type_requirements,
                );
            }
        }
        if let Some(val_vk) = map_memory_placed_properties_ext_vk {
            let &ash::vk::PhysicalDeviceMapMemoryPlacedPropertiesEXT {
                min_placed_memory_map_alignment,
                ..
            } = val_vk;
            if val.min_placed_memory_map_alignment.is_none() {
                val.min_placed_memory_map_alignment = <DeviceAlignment>::from_vulkan(
                    min_placed_memory_map_alignment,
                );
            }
        }
        if let Some(val_vk) = mesh_shader_properties_ext_vk {
            let &ash::vk::PhysicalDeviceMeshShaderPropertiesEXT {
                max_task_work_group_total_count,
                max_task_work_group_count,
                max_task_work_group_invocations,
                max_task_work_group_size,
                max_task_payload_size,
                max_task_shared_memory_size,
                max_task_payload_and_shared_memory_size,
                max_mesh_work_group_total_count,
                max_mesh_work_group_count,
                max_mesh_work_group_invocations,
                max_mesh_work_group_size,
                max_mesh_shared_memory_size,
                max_mesh_payload_and_shared_memory_size,
                max_mesh_output_memory_size,
                max_mesh_payload_and_output_memory_size,
                max_mesh_output_components,
                max_mesh_output_vertices,
                max_mesh_output_primitives,
                max_mesh_output_layers,
                max_mesh_multiview_view_count,
                mesh_output_per_vertex_granularity,
                mesh_output_per_primitive_granularity,
                max_preferred_task_work_group_invocations,
                max_preferred_mesh_work_group_invocations,
                prefers_local_invocation_vertex_output,
                prefers_local_invocation_primitive_output,
                prefers_compact_vertex_output,
                prefers_compact_primitive_output,
                ..
            } = val_vk;
            if val.max_task_work_group_total_count.is_none() {
                val.max_task_work_group_total_count = <u32>::from_vulkan(
                    max_task_work_group_total_count,
                );
            }
            if val.max_task_work_group_count.is_none() {
                val.max_task_work_group_count = <[u32; 3usize]>::from_vulkan(
                    max_task_work_group_count,
                );
            }
            if val.max_task_work_group_invocations.is_none() {
                val.max_task_work_group_invocations = <u32>::from_vulkan(
                    max_task_work_group_invocations,
                );
            }
            if val.max_task_work_group_size.is_none() {
                val.max_task_work_group_size = <[u32; 3usize]>::from_vulkan(
                    max_task_work_group_size,
                );
            }
            if val.max_task_payload_size.is_none() {
                val.max_task_payload_size = <u32>::from_vulkan(max_task_payload_size);
            }
            if val.max_task_shared_memory_size.is_none() {
                val.max_task_shared_memory_size = <u32>::from_vulkan(
                    max_task_shared_memory_size,
                );
            }
            if val.max_task_payload_and_shared_memory_size.is_none() {
                val.max_task_payload_and_shared_memory_size = <u32>::from_vulkan(
                    max_task_payload_and_shared_memory_size,
                );
            }
            if val.max_mesh_work_group_total_count.is_none() {
                val.max_mesh_work_group_total_count = <u32>::from_vulkan(
                    max_mesh_work_group_total_count,
                );
            }
            if val.max_mesh_work_group_count.is_none() {
                val.max_mesh_work_group_count = <[u32; 3usize]>::from_vulkan(
                    max_mesh_work_group_count,
                );
            }
            if val.max_mesh_work_group_invocations.is_none() {
                val.max_mesh_work_group_invocations = <u32>::from_vulkan(
                    max_mesh_work_group_invocations,
                );
            }
            if val.max_mesh_work_group_size.is_none() {
                val.max_mesh_work_group_size = <[u32; 3usize]>::from_vulkan(
                    max_mesh_work_group_size,
                );
            }
            if val.max_mesh_shared_memory_size.is_none() {
                val.max_mesh_shared_memory_size = <u32>::from_vulkan(
                    max_mesh_shared_memory_size,
                );
            }
            if val.max_mesh_payload_and_shared_memory_size.is_none() {
                val.max_mesh_payload_and_shared_memory_size = <u32>::from_vulkan(
                    max_mesh_payload_and_shared_memory_size,
                );
            }
            if val.max_mesh_output_memory_size.is_none() {
                val.max_mesh_output_memory_size = <u32>::from_vulkan(
                    max_mesh_output_memory_size,
                );
            }
            if val.max_mesh_payload_and_output_memory_size.is_none() {
                val.max_mesh_payload_and_output_memory_size = <u32>::from_vulkan(
                    max_mesh_payload_and_output_memory_size,
                );
            }
            if val.max_mesh_output_components.is_none() {
                val.max_mesh_output_components = <u32>::from_vulkan(
                    max_mesh_output_components,
                );
            }
            if val.max_mesh_output_vertices.is_none() {
                val.max_mesh_output_vertices = <u32>::from_vulkan(
                    max_mesh_output_vertices,
                );
            }
            if val.max_mesh_output_primitives.is_none() {
                val.max_mesh_output_primitives = <u32>::from_vulkan(
                    max_mesh_output_primitives,
                );
            }
            if val.max_mesh_output_layers.is_none() {
                val.max_mesh_output_layers = <u32>::from_vulkan(max_mesh_output_layers);
            }
            if val.max_mesh_multiview_view_count.is_none() {
                val.max_mesh_multiview_view_count = <u32>::from_vulkan(
                    max_mesh_multiview_view_count,
                );
            }
            if val.mesh_output_per_vertex_granularity.is_none() {
                val.mesh_output_per_vertex_granularity = <u32>::from_vulkan(
                    mesh_output_per_vertex_granularity,
                );
            }
            if val.mesh_output_per_primitive_granularity.is_none() {
                val.mesh_output_per_primitive_granularity = <u32>::from_vulkan(
                    mesh_output_per_primitive_granularity,
                );
            }
            if val.max_preferred_task_work_group_invocations.is_none() {
                val.max_preferred_task_work_group_invocations = <u32>::from_vulkan(
                    max_preferred_task_work_group_invocations,
                );
            }
            if val.max_preferred_mesh_work_group_invocations.is_none() {
                val.max_preferred_mesh_work_group_invocations = <u32>::from_vulkan(
                    max_preferred_mesh_work_group_invocations,
                );
            }
            if val.prefers_local_invocation_vertex_output.is_none() {
                val.prefers_local_invocation_vertex_output = <bool>::from_vulkan(
                    prefers_local_invocation_vertex_output,
                );
            }
            if val.prefers_local_invocation_primitive_output.is_none() {
                val.prefers_local_invocation_primitive_output = <bool>::from_vulkan(
                    prefers_local_invocation_primitive_output,
                );
            }
            if val.prefers_compact_vertex_output.is_none() {
                val.prefers_compact_vertex_output = <bool>::from_vulkan(
                    prefers_compact_vertex_output,
                );
            }
            if val.prefers_compact_primitive_output.is_none() {
                val.prefers_compact_primitive_output = <bool>::from_vulkan(
                    prefers_compact_primitive_output,
                );
            }
        }
        if let Some(val_vk) = multi_draw_properties_ext_vk {
            let &ash::vk::PhysicalDeviceMultiDrawPropertiesEXT {
                max_multi_draw_count,
                ..
            } = val_vk;
            if val.max_multi_draw_count.is_none() {
                val.max_multi_draw_count = <u32>::from_vulkan(max_multi_draw_count);
            }
        }
        if let Some(val_vk) = nested_command_buffer_properties_ext_vk {
            let &ash::vk::PhysicalDeviceNestedCommandBufferPropertiesEXT {
                max_command_buffer_nesting_level,
                ..
            } = val_vk;
            if val.max_command_buffer_nesting_level.is_none() {
                val.max_command_buffer_nesting_level = <u32>::from_vulkan(
                    max_command_buffer_nesting_level,
                );
            }
        }
        if let Some(val_vk) = opacity_micromap_properties_ext_vk {
            let &ash::vk::PhysicalDeviceOpacityMicromapPropertiesEXT {
                max_opacity2_state_subdivision_level,
                max_opacity4_state_subdivision_level,
                ..
            } = val_vk;
            if val.max_opacity2_state_subdivision_level.is_none() {
                val.max_opacity2_state_subdivision_level = <u32>::from_vulkan(
                    max_opacity2_state_subdivision_level,
                );
            }
            if val.max_opacity4_state_subdivision_level.is_none() {
                val.max_opacity4_state_subdivision_level = <u32>::from_vulkan(
                    max_opacity4_state_subdivision_level,
                );
            }
        }
        if let Some(val_vk) = pci_bus_info_properties_ext_vk {
            let &ash::vk::PhysicalDevicePCIBusInfoPropertiesEXT {
                pci_domain,
                pci_bus,
                pci_device,
                pci_function,
                ..
            } = val_vk;
            if val.pci_domain.is_none() {
                val.pci_domain = <u32>::from_vulkan(pci_domain);
            }
            if val.pci_bus.is_none() {
                val.pci_bus = <u32>::from_vulkan(pci_bus);
            }
            if val.pci_device.is_none() {
                val.pci_device = <u32>::from_vulkan(pci_device);
            }
            if val.pci_function.is_none() {
                val.pci_function = <u32>::from_vulkan(pci_function);
            }
        }
        if let Some(val_vk) = pipeline_robustness_properties_ext_vk {
            let &ash::vk::PhysicalDevicePipelineRobustnessPropertiesEXT {
                default_robustness_storage_buffers,
                default_robustness_uniform_buffers,
                default_robustness_vertex_inputs,
                default_robustness_images,
                ..
            } = val_vk;
            if val.default_robustness_storage_buffers.is_none() {
                val.default_robustness_storage_buffers = <PipelineRobustnessBufferBehavior>::from_vulkan(
                    default_robustness_storage_buffers,
                );
            }
            if val.default_robustness_uniform_buffers.is_none() {
                val.default_robustness_uniform_buffers = <PipelineRobustnessBufferBehavior>::from_vulkan(
                    default_robustness_uniform_buffers,
                );
            }
            if val.default_robustness_vertex_inputs.is_none() {
                val.default_robustness_vertex_inputs = <PipelineRobustnessBufferBehavior>::from_vulkan(
                    default_robustness_vertex_inputs,
                );
            }
            if val.default_robustness_images.is_none() {
                val.default_robustness_images = <PipelineRobustnessImageBehavior>::from_vulkan(
                    default_robustness_images,
                );
            }
        }
        if let Some(val_vk) = provoking_vertex_properties_ext_vk {
            let &ash::vk::PhysicalDeviceProvokingVertexPropertiesEXT {
                provoking_vertex_mode_per_pipeline,
                transform_feedback_preserves_triangle_fan_provoking_vertex,
                ..
            } = val_vk;
            if val.provoking_vertex_mode_per_pipeline.is_none() {
                val.provoking_vertex_mode_per_pipeline = <bool>::from_vulkan(
                    provoking_vertex_mode_per_pipeline,
                );
            }
            if val.transform_feedback_preserves_triangle_fan_provoking_vertex.is_none() {
                val.transform_feedback_preserves_triangle_fan_provoking_vertex = <bool>::from_vulkan(
                    transform_feedback_preserves_triangle_fan_provoking_vertex,
                );
            }
        }
        if let Some(val_vk) = robustness2_properties_ext_vk {
            let &ash::vk::PhysicalDeviceRobustness2PropertiesEXT {
                robust_storage_buffer_access_size_alignment,
                robust_uniform_buffer_access_size_alignment,
                ..
            } = val_vk;
            if val.robust_storage_buffer_access_size_alignment.is_none() {
                val.robust_storage_buffer_access_size_alignment = <DeviceAlignment>::from_vulkan(
                    robust_storage_buffer_access_size_alignment,
                );
            }
            if val.robust_uniform_buffer_access_size_alignment.is_none() {
                val.robust_uniform_buffer_access_size_alignment = <DeviceAlignment>::from_vulkan(
                    robust_uniform_buffer_access_size_alignment,
                );
            }
        }
        if let Some(val_vk) = sample_locations_properties_ext_vk {
            let &ash::vk::PhysicalDeviceSampleLocationsPropertiesEXT {
                sample_location_sample_counts,
                max_sample_location_grid_size,
                sample_location_coordinate_range,
                sample_location_sub_pixel_bits,
                variable_sample_locations,
                ..
            } = val_vk;
            if val.sample_location_sample_counts.is_none() {
                val.sample_location_sample_counts = <SampleCounts>::from_vulkan(
                    sample_location_sample_counts,
                );
            }
            if val.max_sample_location_grid_size.is_none() {
                val.max_sample_location_grid_size = <[u32; 2]>::from_vulkan(
                    max_sample_location_grid_size,
                );
            }
            if val.sample_location_coordinate_range.is_none() {
                val.sample_location_coordinate_range = <[f32; 2usize]>::from_vulkan(
                    sample_location_coordinate_range,
                );
            }
            if val.sample_location_sub_pixel_bits.is_none() {
                val.sample_location_sub_pixel_bits = <u32>::from_vulkan(
                    sample_location_sub_pixel_bits,
                );
            }
            if val.variable_sample_locations.is_none() {
                val.variable_sample_locations = <bool>::from_vulkan(
                    variable_sample_locations,
                );
            }
        }
        if let Some(val_vk) = shader_module_identifier_properties_ext_vk {
            let &ash::vk::PhysicalDeviceShaderModuleIdentifierPropertiesEXT {
                shader_module_identifier_algorithm_uuid,
                ..
            } = val_vk;
            if val.shader_module_identifier_algorithm_uuid.is_none() {
                val.shader_module_identifier_algorithm_uuid = <[u8; 16usize]>::from_vulkan(
                    shader_module_identifier_algorithm_uuid,
                );
            }
        }
        if let Some(val_vk) = shader_object_properties_ext_vk {
            let &ash::vk::PhysicalDeviceShaderObjectPropertiesEXT {
                shader_binary_uuid,
                shader_binary_version,
                ..
            } = val_vk;
            if val.shader_binary_uuid.is_none() {
                val.shader_binary_uuid = <[u8; 16usize]>::from_vulkan(
                    shader_binary_uuid,
                );
            }
            if val.shader_binary_version.is_none() {
                val.shader_binary_version = <u32>::from_vulkan(shader_binary_version);
            }
        }
        if let Some(val_vk) = shader_tile_image_properties_ext_vk {
            let &ash::vk::PhysicalDeviceShaderTileImagePropertiesEXT {
                shader_tile_image_coherent_read_accelerated,
                shader_tile_image_read_sample_from_pixel_rate_invocation,
                shader_tile_image_read_from_helper_invocation,
                ..
            } = val_vk;
            if val.shader_tile_image_coherent_read_accelerated.is_none() {
                val.shader_tile_image_coherent_read_accelerated = <bool>::from_vulkan(
                    shader_tile_image_coherent_read_accelerated,
                );
            }
            if val.shader_tile_image_read_sample_from_pixel_rate_invocation.is_none() {
                val.shader_tile_image_read_sample_from_pixel_rate_invocation = <bool>::from_vulkan(
                    shader_tile_image_read_sample_from_pixel_rate_invocation,
                );
            }
            if val.shader_tile_image_read_from_helper_invocation.is_none() {
                val.shader_tile_image_read_from_helper_invocation = <bool>::from_vulkan(
                    shader_tile_image_read_from_helper_invocation,
                );
            }
        }
        if let Some(val_vk) = transform_feedback_properties_ext_vk {
            let &ash::vk::PhysicalDeviceTransformFeedbackPropertiesEXT {
                max_transform_feedback_streams,
                max_transform_feedback_buffers,
                max_transform_feedback_buffer_size,
                max_transform_feedback_stream_data_size,
                max_transform_feedback_buffer_data_size,
                max_transform_feedback_buffer_data_stride,
                transform_feedback_queries,
                transform_feedback_streams_lines_triangles,
                transform_feedback_rasterization_stream_select,
                transform_feedback_draw,
                ..
            } = val_vk;
            if val.max_transform_feedback_streams.is_none() {
                val.max_transform_feedback_streams = <u32>::from_vulkan(
                    max_transform_feedback_streams,
                );
            }
            if val.max_transform_feedback_buffers.is_none() {
                val.max_transform_feedback_buffers = <u32>::from_vulkan(
                    max_transform_feedback_buffers,
                );
            }
            if val.max_transform_feedback_buffer_size.is_none() {
                val.max_transform_feedback_buffer_size = <DeviceSize>::from_vulkan(
                    max_transform_feedback_buffer_size,
                );
            }
            if val.max_transform_feedback_stream_data_size.is_none() {
                val.max_transform_feedback_stream_data_size = <u32>::from_vulkan(
                    max_transform_feedback_stream_data_size,
                );
            }
            if val.max_transform_feedback_buffer_data_size.is_none() {
                val.max_transform_feedback_buffer_data_size = <u32>::from_vulkan(
                    max_transform_feedback_buffer_data_size,
                );
            }
            if val.max_transform_feedback_buffer_data_stride.is_none() {
                val.max_transform_feedback_buffer_data_stride = <u32>::from_vulkan(
                    max_transform_feedback_buffer_data_stride,
                );
            }
            if val.transform_feedback_queries.is_none() {
                val.transform_feedback_queries = <bool>::from_vulkan(
                    transform_feedback_queries,
                );
            }
            if val.transform_feedback_streams_lines_triangles.is_none() {
                val.transform_feedback_streams_lines_triangles = <bool>::from_vulkan(
                    transform_feedback_streams_lines_triangles,
                );
            }
            if val.transform_feedback_rasterization_stream_select.is_none() {
                val.transform_feedback_rasterization_stream_select = <bool>::from_vulkan(
                    transform_feedback_rasterization_stream_select,
                );
            }
            if val.transform_feedback_draw.is_none() {
                val.transform_feedback_draw = <bool>::from_vulkan(
                    transform_feedback_draw,
                );
            }
        }
        if let Some(val_vk) = vertex_attribute_divisor_properties_ext_vk {
            let &ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
                max_vertex_attrib_divisor,
                ..
            } = val_vk;
            if val.max_vertex_attrib_divisor.is_none() {
                val.max_vertex_attrib_divisor = <u32>::from_vulkan(
                    max_vertex_attrib_divisor,
                );
            }
        }
        if let Some(val_vk) = cluster_culling_shader_properties_huawei_vk {
            let &ash::vk::PhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
                max_work_group_count,
                max_work_group_size,
                max_output_cluster_count,
                indirect_buffer_offset_alignment,
                ..
            } = val_vk;
            if val.max_work_group_count.is_none() {
                val.max_work_group_count = <[u32; 3usize]>::from_vulkan(
                    max_work_group_count,
                );
            }
            if val.max_work_group_size.is_none() {
                val.max_work_group_size = <[u32; 3usize]>::from_vulkan(
                    max_work_group_size,
                );
            }
            if val.max_output_cluster_count.is_none() {
                val.max_output_cluster_count = <u32>::from_vulkan(
                    max_output_cluster_count,
                );
            }
            if val.indirect_buffer_offset_alignment.is_none() {
                val.indirect_buffer_offset_alignment = <DeviceSize>::from_vulkan(
                    indirect_buffer_offset_alignment,
                );
            }
        }
        if let Some(val_vk) = cooperative_matrix_properties_nv_vk {
            let &ash::vk::PhysicalDeviceCooperativeMatrixPropertiesNV {
                cooperative_matrix_supported_stages,
                ..
            } = val_vk;
            if val.cooperative_matrix_supported_stages.is_none() {
                val.cooperative_matrix_supported_stages = <ShaderStages>::from_vulkan(
                    cooperative_matrix_supported_stages,
                );
            }
        }
        if let Some(val_vk) = copy_memory_indirect_properties_nv_vk {
            let &ash::vk::PhysicalDeviceCopyMemoryIndirectPropertiesNV {
                supported_queues,
                ..
            } = val_vk;
            if val.supported_queues.is_none() {
                val.supported_queues = <QueueFlags>::from_vulkan(supported_queues);
            }
        }
        if let Some(val_vk) = cuda_kernel_launch_properties_nv_vk {
            let &ash::vk::PhysicalDeviceCudaKernelLaunchPropertiesNV {
                compute_capability_minor,
                compute_capability_major,
                ..
            } = val_vk;
            if val.compute_capability_minor.is_none() {
                val.compute_capability_minor = <u32>::from_vulkan(
                    compute_capability_minor,
                );
            }
            if val.compute_capability_major.is_none() {
                val.compute_capability_major = <u32>::from_vulkan(
                    compute_capability_major,
                );
            }
        }
        if let Some(val_vk) = device_generated_commands_properties_nv_vk {
            let &ash::vk::PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
                max_graphics_shader_group_count,
                max_indirect_sequence_count,
                max_indirect_commands_token_count,
                max_indirect_commands_stream_count,
                max_indirect_commands_token_offset,
                max_indirect_commands_stream_stride,
                min_sequences_count_buffer_offset_alignment,
                min_sequences_index_buffer_offset_alignment,
                min_indirect_commands_buffer_offset_alignment,
                ..
            } = val_vk;
            if val.max_graphics_shader_group_count.is_none() {
                val.max_graphics_shader_group_count = <u32>::from_vulkan(
                    max_graphics_shader_group_count,
                );
            }
            if val.max_indirect_sequence_count.is_none() {
                val.max_indirect_sequence_count = <u32>::from_vulkan(
                    max_indirect_sequence_count,
                );
            }
            if val.max_indirect_commands_token_count.is_none() {
                val.max_indirect_commands_token_count = <u32>::from_vulkan(
                    max_indirect_commands_token_count,
                );
            }
            if val.max_indirect_commands_stream_count.is_none() {
                val.max_indirect_commands_stream_count = <u32>::from_vulkan(
                    max_indirect_commands_stream_count,
                );
            }
            if val.max_indirect_commands_token_offset.is_none() {
                val.max_indirect_commands_token_offset = <u32>::from_vulkan(
                    max_indirect_commands_token_offset,
                );
            }
            if val.max_indirect_commands_stream_stride.is_none() {
                val.max_indirect_commands_stream_stride = <u32>::from_vulkan(
                    max_indirect_commands_stream_stride,
                );
            }
            if val.min_sequences_count_buffer_offset_alignment.is_none() {
                val.min_sequences_count_buffer_offset_alignment = <u32>::from_vulkan(
                    min_sequences_count_buffer_offset_alignment,
                );
            }
            if val.min_sequences_index_buffer_offset_alignment.is_none() {
                val.min_sequences_index_buffer_offset_alignment = <u32>::from_vulkan(
                    min_sequences_index_buffer_offset_alignment,
                );
            }
            if val.min_indirect_commands_buffer_offset_alignment.is_none() {
                val.min_indirect_commands_buffer_offset_alignment = <u32>::from_vulkan(
                    min_indirect_commands_buffer_offset_alignment,
                );
            }
        }
        if let Some(val_vk) = displacement_micromap_properties_nv_vk {
            let &ash::vk::PhysicalDeviceDisplacementMicromapPropertiesNV {
                max_displacement_micromap_subdivision_level,
                ..
            } = val_vk;
            if val.max_displacement_micromap_subdivision_level.is_none() {
                val.max_displacement_micromap_subdivision_level = <u32>::from_vulkan(
                    max_displacement_micromap_subdivision_level,
                );
            }
        }
        if let Some(val_vk) = extended_sparse_address_space_properties_nv_vk {
            let &ash::vk::PhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
                extended_sparse_address_space_size,
                extended_sparse_image_usage_flags,
                extended_sparse_buffer_usage_flags,
                ..
            } = val_vk;
            if val.extended_sparse_address_space_size.is_none() {
                val.extended_sparse_address_space_size = <DeviceSize>::from_vulkan(
                    extended_sparse_address_space_size,
                );
            }
            if val.extended_sparse_image_usage_flags.is_none() {
                val.extended_sparse_image_usage_flags = <ImageUsage>::from_vulkan(
                    extended_sparse_image_usage_flags,
                );
            }
            if val.extended_sparse_buffer_usage_flags.is_none() {
                val.extended_sparse_buffer_usage_flags = <BufferUsage>::from_vulkan(
                    extended_sparse_buffer_usage_flags,
                );
            }
        }
        if let Some(val_vk) = external_format_resolve_properties_android_vk {
            let &ash::vk::PhysicalDeviceExternalFormatResolvePropertiesANDROID {
                null_color_attachment_with_external_format_resolve,
                external_format_resolve_chroma_offset_x,
                external_format_resolve_chroma_offset_y,
                ..
            } = val_vk;
            if val.null_color_attachment_with_external_format_resolve.is_none() {
                val.null_color_attachment_with_external_format_resolve = <bool>::from_vulkan(
                    null_color_attachment_with_external_format_resolve,
                );
            }
            if val.external_format_resolve_chroma_offset_x.is_none() {
                val.external_format_resolve_chroma_offset_x = <ChromaLocation>::from_vulkan(
                    external_format_resolve_chroma_offset_x,
                );
            }
            if val.external_format_resolve_chroma_offset_y.is_none() {
                val.external_format_resolve_chroma_offset_y = <ChromaLocation>::from_vulkan(
                    external_format_resolve_chroma_offset_y,
                );
            }
        }
        if let Some(val_vk) = fragment_density_map_offset_properties_qcom_vk {
            let &ash::vk::PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
                fragment_density_offset_granularity,
                ..
            } = val_vk;
            if val.fragment_density_offset_granularity.is_none() {
                val.fragment_density_offset_granularity = <[u32; 2]>::from_vulkan(
                    fragment_density_offset_granularity,
                );
            }
        }
        if let Some(val_vk) = fragment_shading_rate_enums_properties_nv_vk {
            let &ash::vk::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
                max_fragment_shading_rate_invocation_count,
                ..
            } = val_vk;
            if val.max_fragment_shading_rate_invocation_count.is_none() {
                val.max_fragment_shading_rate_invocation_count = <SampleCount>::from_vulkan(
                    max_fragment_shading_rate_invocation_count,
                );
            }
        }
        if let Some(val_vk) = image_processing2_properties_qcom_vk {
            let &ash::vk::PhysicalDeviceImageProcessing2PropertiesQCOM {
                max_block_match_window,
                ..
            } = val_vk;
            if val.max_block_match_window.is_none() {
                val.max_block_match_window = <[u32; 2]>::from_vulkan(
                    max_block_match_window,
                );
            }
        }
        if let Some(val_vk) = image_processing_properties_qcom_vk {
            let &ash::vk::PhysicalDeviceImageProcessingPropertiesQCOM {
                max_weight_filter_phases,
                max_weight_filter_dimension,
                max_block_match_region,
                max_box_filter_block_size,
                ..
            } = val_vk;
            if val.max_weight_filter_phases.is_none() {
                val.max_weight_filter_phases = <u32>::from_vulkan(
                    max_weight_filter_phases,
                );
            }
            if val.max_weight_filter_dimension.is_none() {
                val.max_weight_filter_dimension = <[u32; 2]>::from_vulkan(
                    max_weight_filter_dimension,
                );
            }
            if val.max_block_match_region.is_none() {
                val.max_block_match_region = <[u32; 2]>::from_vulkan(
                    max_block_match_region,
                );
            }
            if val.max_box_filter_block_size.is_none() {
                val.max_box_filter_block_size = <[u32; 2]>::from_vulkan(
                    max_box_filter_block_size,
                );
            }
        }
        if let Some(val_vk) = layered_driver_properties_msft_vk {
            let &ash::vk::PhysicalDeviceLayeredDriverPropertiesMSFT {
                underlying_api,
                ..
            } = val_vk;
            if val.underlying_api.is_none() {
                val.underlying_api = <LayeredDriverUnderlyingApi>::from_vulkan(
                    underlying_api,
                );
            }
        }
        if let Some(val_vk) = memory_decompression_properties_nv_vk {
            let &ash::vk::PhysicalDeviceMemoryDecompressionPropertiesNV {
                decompression_methods,
                max_decompression_indirect_count,
                ..
            } = val_vk;
            if val.decompression_methods.is_none() {
                val.decompression_methods = <MemoryDecompressionMethods>::from_vulkan(
                    decompression_methods,
                );
            }
            if val.max_decompression_indirect_count.is_none() {
                val.max_decompression_indirect_count = <u64>::from_vulkan(
                    max_decompression_indirect_count,
                );
            }
        }
        if let Some(val_vk) = mesh_shader_properties_nv_vk {
            let &ash::vk::PhysicalDeviceMeshShaderPropertiesNV {
                max_draw_mesh_tasks_count,
                max_task_work_group_invocations,
                max_task_work_group_size,
                max_task_total_memory_size,
                max_task_output_count,
                max_mesh_work_group_invocations,
                max_mesh_work_group_size,
                max_mesh_total_memory_size,
                max_mesh_output_vertices,
                max_mesh_output_primitives,
                max_mesh_multiview_view_count,
                mesh_output_per_vertex_granularity,
                mesh_output_per_primitive_granularity,
                ..
            } = val_vk;
            if val.max_draw_mesh_tasks_count.is_none() {
                val.max_draw_mesh_tasks_count = <u32>::from_vulkan(
                    max_draw_mesh_tasks_count,
                );
            }
            if val.max_task_work_group_invocations.is_none() {
                val.max_task_work_group_invocations = <u32>::from_vulkan(
                    max_task_work_group_invocations,
                );
            }
            if val.max_task_work_group_size.is_none() {
                val.max_task_work_group_size = <[u32; 3usize]>::from_vulkan(
                    max_task_work_group_size,
                );
            }
            if val.max_task_total_memory_size.is_none() {
                val.max_task_total_memory_size = <u32>::from_vulkan(
                    max_task_total_memory_size,
                );
            }
            if val.max_task_output_count.is_none() {
                val.max_task_output_count = <u32>::from_vulkan(max_task_output_count);
            }
            if val.max_mesh_work_group_invocations.is_none() {
                val.max_mesh_work_group_invocations = <u32>::from_vulkan(
                    max_mesh_work_group_invocations,
                );
            }
            if val.max_mesh_work_group_size.is_none() {
                val.max_mesh_work_group_size = <[u32; 3usize]>::from_vulkan(
                    max_mesh_work_group_size,
                );
            }
            if val.max_mesh_total_memory_size.is_none() {
                val.max_mesh_total_memory_size = <u32>::from_vulkan(
                    max_mesh_total_memory_size,
                );
            }
            if val.max_mesh_output_vertices.is_none() {
                val.max_mesh_output_vertices = <u32>::from_vulkan(
                    max_mesh_output_vertices,
                );
            }
            if val.max_mesh_output_primitives.is_none() {
                val.max_mesh_output_primitives = <u32>::from_vulkan(
                    max_mesh_output_primitives,
                );
            }
            if val.max_mesh_multiview_view_count.is_none() {
                val.max_mesh_multiview_view_count = <u32>::from_vulkan(
                    max_mesh_multiview_view_count,
                );
            }
            if val.mesh_output_per_vertex_granularity.is_none() {
                val.mesh_output_per_vertex_granularity = <u32>::from_vulkan(
                    mesh_output_per_vertex_granularity,
                );
            }
            if val.mesh_output_per_primitive_granularity.is_none() {
                val.mesh_output_per_primitive_granularity = <u32>::from_vulkan(
                    mesh_output_per_primitive_granularity,
                );
            }
        }
        if let Some(val_vk) = multiview_per_view_attributes_properties_nvx_vk {
            let &ash::vk::PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
                per_view_position_all_components,
                ..
            } = val_vk;
            if val.per_view_position_all_components.is_none() {
                val.per_view_position_all_components = <bool>::from_vulkan(
                    per_view_position_all_components,
                );
            }
        }
        if let Some(val_vk) = optical_flow_properties_nv_vk {
            let &ash::vk::PhysicalDeviceOpticalFlowPropertiesNV {
                supported_output_grid_sizes,
                supported_hint_grid_sizes,
                hint_supported,
                cost_supported,
                bidirectional_flow_supported,
                global_flow_supported,
                min_width,
                min_height,
                max_width,
                max_height,
                max_num_regions_of_interest,
                ..
            } = val_vk;
            if val.supported_output_grid_sizes.is_none() {
                val.supported_output_grid_sizes = <OpticalFlowGridSizes>::from_vulkan(
                    supported_output_grid_sizes,
                );
            }
            if val.supported_hint_grid_sizes.is_none() {
                val.supported_hint_grid_sizes = <OpticalFlowGridSizes>::from_vulkan(
                    supported_hint_grid_sizes,
                );
            }
            if val.hint_supported.is_none() {
                val.hint_supported = <bool>::from_vulkan(hint_supported);
            }
            if val.cost_supported.is_none() {
                val.cost_supported = <bool>::from_vulkan(cost_supported);
            }
            if val.bidirectional_flow_supported.is_none() {
                val.bidirectional_flow_supported = <bool>::from_vulkan(
                    bidirectional_flow_supported,
                );
            }
            if val.global_flow_supported.is_none() {
                val.global_flow_supported = <bool>::from_vulkan(global_flow_supported);
            }
            if val.min_width.is_none() {
                val.min_width = <u32>::from_vulkan(min_width);
            }
            if val.min_height.is_none() {
                val.min_height = <u32>::from_vulkan(min_height);
            }
            if val.max_width.is_none() {
                val.max_width = <u32>::from_vulkan(max_width);
            }
            if val.max_height.is_none() {
                val.max_height = <u32>::from_vulkan(max_height);
            }
            if val.max_num_regions_of_interest.is_none() {
                val.max_num_regions_of_interest = <u32>::from_vulkan(
                    max_num_regions_of_interest,
                );
            }
        }
        if let Some(val_vk) = ray_tracing_invocation_reorder_properties_nv_vk {
            let &ash::vk::PhysicalDeviceRayTracingInvocationReorderPropertiesNV {
                ray_tracing_invocation_reorder_reordering_hint,
                ..
            } = val_vk;
            if val.ray_tracing_invocation_reorder_reordering_hint.is_none() {
                val.ray_tracing_invocation_reorder_reordering_hint = <RayTracingInvocationReorderMode>::from_vulkan(
                    ray_tracing_invocation_reorder_reordering_hint,
                );
            }
        }
        if let Some(val_vk) = ray_tracing_properties_nv_vk {
            let &ash::vk::PhysicalDeviceRayTracingPropertiesNV {
                shader_group_handle_size,
                max_recursion_depth,
                max_shader_group_stride,
                shader_group_base_alignment,
                max_geometry_count,
                max_instance_count,
                max_triangle_count,
                max_descriptor_set_acceleration_structures,
                ..
            } = val_vk;
            if val.shader_group_handle_size.is_none() {
                val.shader_group_handle_size = <u32>::from_vulkan(
                    shader_group_handle_size,
                );
            }
            if val.max_recursion_depth.is_none() {
                val.max_recursion_depth = <u32>::from_vulkan(max_recursion_depth);
            }
            if val.max_shader_group_stride.is_none() {
                val.max_shader_group_stride = <u32>::from_vulkan(
                    max_shader_group_stride,
                );
            }
            if val.shader_group_base_alignment.is_none() {
                val.shader_group_base_alignment = <u32>::from_vulkan(
                    shader_group_base_alignment,
                );
            }
            if val.max_geometry_count.is_none() {
                val.max_geometry_count = <u64>::from_vulkan(max_geometry_count);
            }
            if val.max_instance_count.is_none() {
                val.max_instance_count = <u64>::from_vulkan(max_instance_count);
            }
            if val.max_triangle_count.is_none() {
                val.max_triangle_count = <u64>::from_vulkan(max_triangle_count);
            }
            if val.max_descriptor_set_acceleration_structures.is_none() {
                val.max_descriptor_set_acceleration_structures = <u32>::from_vulkan(
                    max_descriptor_set_acceleration_structures,
                );
            }
        }
        if let Some(val_vk) = render_pass_striped_properties_arm_vk {
            let &ash::vk::PhysicalDeviceRenderPassStripedPropertiesARM {
                render_pass_stripe_granularity,
                max_render_pass_stripes,
                ..
            } = val_vk;
            if val.render_pass_stripe_granularity.is_none() {
                val.render_pass_stripe_granularity = <[u32; 2]>::from_vulkan(
                    render_pass_stripe_granularity,
                );
            }
            if val.max_render_pass_stripes.is_none() {
                val.max_render_pass_stripes = <u32>::from_vulkan(
                    max_render_pass_stripes,
                );
            }
        }
        if let Some(val_vk) = scheduling_controls_properties_arm_vk {
            let &ash::vk::PhysicalDeviceSchedulingControlsPropertiesARM {
                scheduling_controls_flags,
                ..
            } = val_vk;
            if val.scheduling_controls_flags.is_none() {
                val.scheduling_controls_flags = <PhysicalDeviceSchedulingControlsFlags>::from_vulkan(
                    scheduling_controls_flags,
                );
            }
        }
        if let Some(val_vk) = shader_core_builtins_properties_arm_vk {
            let &ash::vk::PhysicalDeviceShaderCoreBuiltinsPropertiesARM {
                shader_core_mask,
                shader_core_count,
                shader_warps_per_core,
                ..
            } = val_vk;
            if val.shader_core_mask.is_none() {
                val.shader_core_mask = <u64>::from_vulkan(shader_core_mask);
            }
            if val.shader_core_count.is_none() {
                val.shader_core_count = <u32>::from_vulkan(shader_core_count);
            }
            if val.shader_warps_per_core.is_none() {
                val.shader_warps_per_core = <u32>::from_vulkan(shader_warps_per_core);
            }
        }
        if let Some(val_vk) = shader_core_properties2_amd_vk {
            let &ash::vk::PhysicalDeviceShaderCoreProperties2AMD {
                shader_core_features,
                active_compute_unit_count,
                ..
            } = val_vk;
            if val.shader_core_features.is_none() {
                val.shader_core_features = <ShaderCoreProperties>::from_vulkan(
                    shader_core_features,
                );
            }
            if val.active_compute_unit_count.is_none() {
                val.active_compute_unit_count = <u32>::from_vulkan(
                    active_compute_unit_count,
                );
            }
        }
        if let Some(val_vk) = shader_core_properties_amd_vk {
            let &ash::vk::PhysicalDeviceShaderCorePropertiesAMD {
                shader_engine_count,
                shader_arrays_per_engine_count,
                compute_units_per_shader_array,
                simd_per_compute_unit,
                wavefronts_per_simd,
                wavefront_size,
                sgprs_per_simd,
                min_sgpr_allocation,
                max_sgpr_allocation,
                sgpr_allocation_granularity,
                vgprs_per_simd,
                min_vgpr_allocation,
                max_vgpr_allocation,
                vgpr_allocation_granularity,
                ..
            } = val_vk;
            if val.shader_engine_count.is_none() {
                val.shader_engine_count = <u32>::from_vulkan(shader_engine_count);
            }
            if val.shader_arrays_per_engine_count.is_none() {
                val.shader_arrays_per_engine_count = <u32>::from_vulkan(
                    shader_arrays_per_engine_count,
                );
            }
            if val.compute_units_per_shader_array.is_none() {
                val.compute_units_per_shader_array = <u32>::from_vulkan(
                    compute_units_per_shader_array,
                );
            }
            if val.simd_per_compute_unit.is_none() {
                val.simd_per_compute_unit = <u32>::from_vulkan(simd_per_compute_unit);
            }
            if val.wavefronts_per_simd.is_none() {
                val.wavefronts_per_simd = <u32>::from_vulkan(wavefronts_per_simd);
            }
            if val.wavefront_size.is_none() {
                val.wavefront_size = <u32>::from_vulkan(wavefront_size);
            }
            if val.sgprs_per_simd.is_none() {
                val.sgprs_per_simd = <u32>::from_vulkan(sgprs_per_simd);
            }
            if val.min_sgpr_allocation.is_none() {
                val.min_sgpr_allocation = <u32>::from_vulkan(min_sgpr_allocation);
            }
            if val.max_sgpr_allocation.is_none() {
                val.max_sgpr_allocation = <u32>::from_vulkan(max_sgpr_allocation);
            }
            if val.sgpr_allocation_granularity.is_none() {
                val.sgpr_allocation_granularity = <u32>::from_vulkan(
                    sgpr_allocation_granularity,
                );
            }
            if val.vgprs_per_simd.is_none() {
                val.vgprs_per_simd = <u32>::from_vulkan(vgprs_per_simd);
            }
            if val.min_vgpr_allocation.is_none() {
                val.min_vgpr_allocation = <u32>::from_vulkan(min_vgpr_allocation);
            }
            if val.max_vgpr_allocation.is_none() {
                val.max_vgpr_allocation = <u32>::from_vulkan(max_vgpr_allocation);
            }
            if val.vgpr_allocation_granularity.is_none() {
                val.vgpr_allocation_granularity = <u32>::from_vulkan(
                    vgpr_allocation_granularity,
                );
            }
        }
        if let Some(val_vk) = shader_core_properties_arm_vk {
            let &ash::vk::PhysicalDeviceShaderCorePropertiesARM {
                pixel_rate,
                texel_rate,
                fma_rate,
                ..
            } = val_vk;
            if val.pixel_rate.is_none() {
                val.pixel_rate = <u32>::from_vulkan(pixel_rate);
            }
            if val.texel_rate.is_none() {
                val.texel_rate = <u32>::from_vulkan(texel_rate);
            }
            if val.fma_rate.is_none() {
                val.fma_rate = <u32>::from_vulkan(fma_rate);
            }
        }
        if let Some(val_vk) = shader_enqueue_properties_amdx_vk {
            let &ash::vk::PhysicalDeviceShaderEnqueuePropertiesAMDX {
                max_execution_graph_depth,
                max_execution_graph_shader_output_nodes,
                max_execution_graph_shader_payload_size,
                max_execution_graph_shader_payload_count,
                execution_graph_dispatch_address_alignment,
                ..
            } = val_vk;
            if val.max_execution_graph_depth.is_none() {
                val.max_execution_graph_depth = <u32>::from_vulkan(
                    max_execution_graph_depth,
                );
            }
            if val.max_execution_graph_shader_output_nodes.is_none() {
                val.max_execution_graph_shader_output_nodes = <u32>::from_vulkan(
                    max_execution_graph_shader_output_nodes,
                );
            }
            if val.max_execution_graph_shader_payload_size.is_none() {
                val.max_execution_graph_shader_payload_size = <u32>::from_vulkan(
                    max_execution_graph_shader_payload_size,
                );
            }
            if val.max_execution_graph_shader_payload_count.is_none() {
                val.max_execution_graph_shader_payload_count = <u32>::from_vulkan(
                    max_execution_graph_shader_payload_count,
                );
            }
            if val.execution_graph_dispatch_address_alignment.is_none() {
                val.execution_graph_dispatch_address_alignment = <u32>::from_vulkan(
                    execution_graph_dispatch_address_alignment,
                );
            }
        }
        if let Some(val_vk) = shader_sm_builtins_properties_nv_vk {
            let &ash::vk::PhysicalDeviceShaderSMBuiltinsPropertiesNV {
                shader_sm_count,
                shader_warps_per_sm,
                ..
            } = val_vk;
            if val.shader_sm_count.is_none() {
                val.shader_sm_count = <u32>::from_vulkan(shader_sm_count);
            }
            if val.shader_warps_per_sm.is_none() {
                val.shader_warps_per_sm = <u32>::from_vulkan(shader_warps_per_sm);
            }
        }
        if let Some(val_vk) = shading_rate_image_properties_nv_vk {
            let &ash::vk::PhysicalDeviceShadingRateImagePropertiesNV {
                shading_rate_texel_size,
                shading_rate_palette_size,
                shading_rate_max_coarse_samples,
                ..
            } = val_vk;
            if val.shading_rate_texel_size.is_none() {
                val.shading_rate_texel_size = <[u32; 2]>::from_vulkan(
                    shading_rate_texel_size,
                );
            }
            if val.shading_rate_palette_size.is_none() {
                val.shading_rate_palette_size = <u32>::from_vulkan(
                    shading_rate_palette_size,
                );
            }
            if val.shading_rate_max_coarse_samples.is_none() {
                val.shading_rate_max_coarse_samples = <u32>::from_vulkan(
                    shading_rate_max_coarse_samples,
                );
            }
        }
        if let Some(val_vk) = subpass_shading_properties_huawei_vk {
            let &ash::vk::PhysicalDeviceSubpassShadingPropertiesHUAWEI {
                max_subpass_shading_workgroup_size_aspect_ratio,
                ..
            } = val_vk;
            if val.max_subpass_shading_workgroup_size_aspect_ratio.is_none() {
                val.max_subpass_shading_workgroup_size_aspect_ratio = <u32>::from_vulkan(
                    max_subpass_shading_workgroup_size_aspect_ratio,
                );
            }
        }
        val
    }
}
impl Default for DeviceProperties {
    fn default() -> Self {
        DeviceProperties {
            acceleration_structure_capture_replay_descriptor_data_size: Default::default(),
            acceleration_structure_descriptor_size: Default::default(),
            active_compute_unit_count: Default::default(),
            advanced_blend_all_operations: Default::default(),
            advanced_blend_correlated_overlap: Default::default(),
            advanced_blend_independent_blend: Default::default(),
            advanced_blend_max_color_attachments: Default::default(),
            advanced_blend_non_premultiplied_dst_color: Default::default(),
            advanced_blend_non_premultiplied_src_color: Default::default(),
            allow_command_buffer_query_copies: Default::default(),
            allow_sampler_image_view_post_submit_creation: Default::default(),
            api_version: Default::default(),
            bidirectional_flow_supported: Default::default(),
            block_texel_view_compatible_multiple_layers: Default::default(),
            buffer_capture_replay_descriptor_data_size: Default::default(),
            buffer_image_granularity: Default::default(),
            bufferless_push_descriptors: Default::default(),
            combined_image_sampler_density_map_descriptor_size: Default::default(),
            combined_image_sampler_descriptor_single_array: Default::default(),
            combined_image_sampler_descriptor_size: Default::default(),
            compute_capability_major: Default::default(),
            compute_capability_minor: Default::default(),
            compute_units_per_shader_array: Default::default(),
            conformance_version: Default::default(),
            conservative_point_and_line_rasterization: Default::default(),
            conservative_rasterization_post_depth_coverage: Default::default(),
            cooperative_matrix_supported_stages: Default::default(),
            copy_dst_layouts: Default::default(),
            copy_src_layouts: Default::default(),
            cost_supported: Default::default(),
            decompression_methods: Default::default(),
            default_robustness_images: Default::default(),
            default_robustness_storage_buffers: Default::default(),
            default_robustness_uniform_buffers: Default::default(),
            default_robustness_vertex_inputs: Default::default(),
            degenerate_lines_rasterized: Default::default(),
            degenerate_triangles_rasterized: Default::default(),
            denorm_behavior_independence: Default::default(),
            depth_stencil_swizzle_one_support: Default::default(),
            descriptor_buffer_address_space_size: Default::default(),
            descriptor_buffer_offset_alignment: Default::default(),
            device_id: Default::default(),
            device_luid: Default::default(),
            device_luid_valid: Default::default(),
            device_name: Default::default(),
            device_node_mask: Default::default(),
            device_type: Default::default(),
            device_uuid: Default::default(),
            discrete_queue_priorities: Default::default(),
            driver_id: Default::default(),
            driver_info: Default::default(),
            driver_name: Default::default(),
            driver_uuid: Default::default(),
            driver_version: Default::default(),
            dynamic_primitive_topology_unrestricted: Default::default(),
            early_fragment_multisample_coverage_after_sample_counting: Default::default(),
            early_fragment_sample_mask_test_before_sample_counting: Default::default(),
            execution_graph_dispatch_address_alignment: Default::default(),
            extended_sparse_address_space_size: Default::default(),
            extended_sparse_buffer_usage_flags: Default::default(),
            extended_sparse_image_usage_flags: Default::default(),
            external_format_resolve_chroma_offset_x: Default::default(),
            external_format_resolve_chroma_offset_y: Default::default(),
            extra_primitive_overestimation_size_granularity: Default::default(),
            filter_minmax_image_component_mapping: Default::default(),
            filter_minmax_single_component_formats: Default::default(),
            fma_rate: Default::default(),
            fragment_density_invocations: Default::default(),
            fragment_density_offset_granularity: Default::default(),
            fragment_shading_rate_clamp_combiner_inputs: Default::default(),
            fragment_shading_rate_non_trivial_combiner_ops: Default::default(),
            fragment_shading_rate_strict_multiply_combiner: Default::default(),
            fragment_shading_rate_with_conservative_rasterization: Default::default(),
            fragment_shading_rate_with_custom_sample_locations: Default::default(),
            fragment_shading_rate_with_fragment_shader_interlock: Default::default(),
            fragment_shading_rate_with_sample_mask: Default::default(),
            fragment_shading_rate_with_shader_depth_stencil_writes: Default::default(),
            fragment_shading_rate_with_shader_sample_mask: Default::default(),
            framebuffer_color_sample_counts: Default::default(),
            framebuffer_depth_sample_counts: Default::default(),
            framebuffer_integer_color_sample_counts: Default::default(),
            framebuffer_no_attachments_sample_counts: Default::default(),
            framebuffer_stencil_sample_counts: Default::default(),
            fully_covered_fragment_shader_input_variable: Default::default(),
            global_flow_supported: Default::default(),
            graphics_pipeline_library_fast_linking: Default::default(),
            graphics_pipeline_library_independent_interpolation_decoration: Default::default(),
            has_primary: Default::default(),
            has_render: Default::default(),
            hint_supported: Default::default(),
            identical_memory_type_requirements: Default::default(),
            image_capture_replay_descriptor_data_size: Default::default(),
            image_view_capture_replay_descriptor_data_size: Default::default(),
            independent_resolve: Default::default(),
            independent_resolve_none: Default::default(),
            indirect_buffer_offset_alignment: Default::default(),
            input_attachment_descriptor_size: Default::default(),
            integer_dot_product16_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product16_bit_signed_accelerated: Default::default(),
            integer_dot_product16_bit_unsigned_accelerated: Default::default(),
            integer_dot_product32_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product32_bit_signed_accelerated: Default::default(),
            integer_dot_product32_bit_unsigned_accelerated: Default::default(),
            integer_dot_product4x8_bit_packed_mixed_signedness_accelerated: Default::default(),
            integer_dot_product4x8_bit_packed_signed_accelerated: Default::default(),
            integer_dot_product4x8_bit_packed_unsigned_accelerated: Default::default(),
            integer_dot_product64_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product64_bit_signed_accelerated: Default::default(),
            integer_dot_product64_bit_unsigned_accelerated: Default::default(),
            integer_dot_product8_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product8_bit_signed_accelerated: Default::default(),
            integer_dot_product8_bit_unsigned_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating16_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating16_bit_signed_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating16_bit_unsigned_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating32_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating32_bit_signed_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating32_bit_unsigned_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating4x8_bit_packed_mixed_signedness_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating4x8_bit_packed_signed_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating4x8_bit_packed_unsigned_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating64_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating64_bit_signed_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating64_bit_unsigned_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating8_bit_mixed_signedness_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating8_bit_signed_accelerated: Default::default(),
            integer_dot_product_accumulating_saturating8_bit_unsigned_accelerated: Default::default(),
            layered_shading_rate_attachments: Default::default(),
            line_sub_pixel_precision_bits: Default::default(),
            line_width_granularity: Default::default(),
            line_width_range: Default::default(),
            max_block_match_region: Default::default(),
            max_block_match_window: Default::default(),
            max_bound_descriptor_sets: Default::default(),
            max_box_filter_block_size: Default::default(),
            max_buffer_size: Default::default(),
            max_clip_distances: Default::default(),
            max_color_attachments: Default::default(),
            max_combined_clip_and_cull_distances: Default::default(),
            max_combined_image_sampler_descriptor_count: Default::default(),
            max_command_buffer_nesting_level: Default::default(),
            max_compute_shared_memory_size: Default::default(),
            max_compute_work_group_count: Default::default(),
            max_compute_work_group_invocations: Default::default(),
            max_compute_work_group_size: Default::default(),
            max_compute_workgroup_subgroups: Default::default(),
            max_cull_distances: Default::default(),
            max_custom_border_color_samplers: Default::default(),
            max_decompression_indirect_count: Default::default(),
            max_descriptor_buffer_bindings: Default::default(),
            max_descriptor_set_acceleration_structures: Default::default(),
            max_descriptor_set_inline_uniform_blocks: Default::default(),
            max_descriptor_set_input_attachments: Default::default(),
            max_descriptor_set_sampled_images: Default::default(),
            max_descriptor_set_samplers: Default::default(),
            max_descriptor_set_storage_buffers: Default::default(),
            max_descriptor_set_storage_buffers_dynamic: Default::default(),
            max_descriptor_set_storage_images: Default::default(),
            max_descriptor_set_subsampled_samplers: Default::default(),
            max_descriptor_set_uniform_buffers: Default::default(),
            max_descriptor_set_uniform_buffers_dynamic: Default::default(),
            max_descriptor_set_update_after_bind_acceleration_structures: Default::default(),
            max_descriptor_set_update_after_bind_inline_uniform_blocks: Default::default(),
            max_descriptor_set_update_after_bind_input_attachments: Default::default(),
            max_descriptor_set_update_after_bind_sampled_images: Default::default(),
            max_descriptor_set_update_after_bind_samplers: Default::default(),
            max_descriptor_set_update_after_bind_storage_buffers: Default::default(),
            max_descriptor_set_update_after_bind_storage_buffers_dynamic: Default::default(),
            max_descriptor_set_update_after_bind_storage_images: Default::default(),
            max_descriptor_set_update_after_bind_uniform_buffers: Default::default(),
            max_descriptor_set_update_after_bind_uniform_buffers_dynamic: Default::default(),
            max_discard_rectangles: Default::default(),
            max_displacement_micromap_subdivision_level: Default::default(),
            max_draw_indexed_index_value: Default::default(),
            max_draw_indirect_count: Default::default(),
            max_draw_mesh_tasks_count: Default::default(),
            max_embedded_immutable_sampler_bindings: Default::default(),
            max_embedded_immutable_samplers: Default::default(),
            max_execution_graph_depth: Default::default(),
            max_execution_graph_shader_output_nodes: Default::default(),
            max_execution_graph_shader_payload_count: Default::default(),
            max_execution_graph_shader_payload_size: Default::default(),
            max_extra_primitive_overestimation_size: Default::default(),
            max_fragment_combined_output_resources: Default::default(),
            max_fragment_density_texel_size: Default::default(),
            max_fragment_dual_src_attachments: Default::default(),
            max_fragment_input_components: Default::default(),
            max_fragment_output_attachments: Default::default(),
            max_fragment_shading_rate_attachment_texel_size: Default::default(),
            max_fragment_shading_rate_attachment_texel_size_aspect_ratio: Default::default(),
            max_fragment_shading_rate_coverage_samples: Default::default(),
            max_fragment_shading_rate_invocation_count: Default::default(),
            max_fragment_shading_rate_rasterization_samples: Default::default(),
            max_fragment_size: Default::default(),
            max_fragment_size_aspect_ratio: Default::default(),
            max_framebuffer_height: Default::default(),
            max_framebuffer_layers: Default::default(),
            max_framebuffer_width: Default::default(),
            max_geometry_count: Default::default(),
            max_geometry_input_components: Default::default(),
            max_geometry_output_components: Default::default(),
            max_geometry_output_vertices: Default::default(),
            max_geometry_shader_invocations: Default::default(),
            max_geometry_total_output_components: Default::default(),
            max_graphics_shader_group_count: Default::default(),
            max_height: Default::default(),
            max_image_array_layers: Default::default(),
            max_image_dimension1_d: Default::default(),
            max_image_dimension2_d: Default::default(),
            max_image_dimension3_d: Default::default(),
            max_image_dimension_cube: Default::default(),
            max_indirect_commands_stream_count: Default::default(),
            max_indirect_commands_stream_stride: Default::default(),
            max_indirect_commands_token_count: Default::default(),
            max_indirect_commands_token_offset: Default::default(),
            max_indirect_sequence_count: Default::default(),
            max_inline_uniform_block_size: Default::default(),
            max_inline_uniform_total_size: Default::default(),
            max_instance_count: Default::default(),
            max_interpolation_offset: Default::default(),
            max_memory_allocation_count: Default::default(),
            max_memory_allocation_size: Default::default(),
            max_mesh_multiview_view_count: Default::default(),
            max_mesh_output_components: Default::default(),
            max_mesh_output_layers: Default::default(),
            max_mesh_output_memory_size: Default::default(),
            max_mesh_output_primitives: Default::default(),
            max_mesh_output_vertices: Default::default(),
            max_mesh_payload_and_output_memory_size: Default::default(),
            max_mesh_payload_and_shared_memory_size: Default::default(),
            max_mesh_shared_memory_size: Default::default(),
            max_mesh_total_memory_size: Default::default(),
            max_mesh_work_group_count: Default::default(),
            max_mesh_work_group_invocations: Default::default(),
            max_mesh_work_group_size: Default::default(),
            max_mesh_work_group_total_count: Default::default(),
            max_multi_draw_count: Default::default(),
            max_multiview_instance_index: Default::default(),
            max_multiview_view_count: Default::default(),
            max_num_regions_of_interest: Default::default(),
            max_opacity2_state_subdivision_level: Default::default(),
            max_opacity4_state_subdivision_level: Default::default(),
            max_output_cluster_count: Default::default(),
            max_per_set_descriptors: Default::default(),
            max_per_stage_descriptor_acceleration_structures: Default::default(),
            max_per_stage_descriptor_inline_uniform_blocks: Default::default(),
            max_per_stage_descriptor_input_attachments: Default::default(),
            max_per_stage_descriptor_sampled_images: Default::default(),
            max_per_stage_descriptor_samplers: Default::default(),
            max_per_stage_descriptor_storage_buffers: Default::default(),
            max_per_stage_descriptor_storage_images: Default::default(),
            max_per_stage_descriptor_uniform_buffers: Default::default(),
            max_per_stage_descriptor_update_after_bind_acceleration_structures: Default::default(),
            max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: Default::default(),
            max_per_stage_descriptor_update_after_bind_input_attachments: Default::default(),
            max_per_stage_descriptor_update_after_bind_sampled_images: Default::default(),
            max_per_stage_descriptor_update_after_bind_samplers: Default::default(),
            max_per_stage_descriptor_update_after_bind_storage_buffers: Default::default(),
            max_per_stage_descriptor_update_after_bind_storage_images: Default::default(),
            max_per_stage_descriptor_update_after_bind_uniform_buffers: Default::default(),
            max_per_stage_resources: Default::default(),
            max_per_stage_update_after_bind_resources: Default::default(),
            max_preferred_mesh_work_group_invocations: Default::default(),
            max_preferred_task_work_group_invocations: Default::default(),
            max_primitive_count: Default::default(),
            max_push_constants_size: Default::default(),
            max_push_descriptors: Default::default(),
            max_ray_dispatch_invocation_count: Default::default(),
            max_ray_hit_attribute_size: Default::default(),
            max_ray_recursion_depth: Default::default(),
            max_recursion_depth: Default::default(),
            max_render_pass_stripes: Default::default(),
            max_resource_descriptor_buffer_bindings: Default::default(),
            max_resource_descriptor_buffer_range: Default::default(),
            max_sample_location_grid_size: Default::default(),
            max_sample_mask_words: Default::default(),
            max_sampler_allocation_count: Default::default(),
            max_sampler_anisotropy: Default::default(),
            max_sampler_descriptor_buffer_bindings: Default::default(),
            max_sampler_descriptor_buffer_range: Default::default(),
            max_sampler_lod_bias: Default::default(),
            max_sgpr_allocation: Default::default(),
            max_shader_group_stride: Default::default(),
            max_storage_buffer_range: Default::default(),
            max_subgroup_size: Default::default(),
            max_subpass_shading_workgroup_size_aspect_ratio: Default::default(),
            max_subsampled_array_layers: Default::default(),
            max_task_output_count: Default::default(),
            max_task_payload_and_shared_memory_size: Default::default(),
            max_task_payload_size: Default::default(),
            max_task_shared_memory_size: Default::default(),
            max_task_total_memory_size: Default::default(),
            max_task_work_group_count: Default::default(),
            max_task_work_group_invocations: Default::default(),
            max_task_work_group_size: Default::default(),
            max_task_work_group_total_count: Default::default(),
            max_tessellation_control_per_patch_output_components: Default::default(),
            max_tessellation_control_per_vertex_input_components: Default::default(),
            max_tessellation_control_per_vertex_output_components: Default::default(),
            max_tessellation_control_total_output_components: Default::default(),
            max_tessellation_evaluation_input_components: Default::default(),
            max_tessellation_evaluation_output_components: Default::default(),
            max_tessellation_generation_level: Default::default(),
            max_tessellation_patch_size: Default::default(),
            max_texel_buffer_elements: Default::default(),
            max_texel_gather_offset: Default::default(),
            max_texel_offset: Default::default(),
            max_timeline_semaphore_value_difference: Default::default(),
            max_transform_feedback_buffer_data_size: Default::default(),
            max_transform_feedback_buffer_data_stride: Default::default(),
            max_transform_feedback_buffer_size: Default::default(),
            max_transform_feedback_buffers: Default::default(),
            max_transform_feedback_stream_data_size: Default::default(),
            max_transform_feedback_streams: Default::default(),
            max_triangle_count: Default::default(),
            max_uniform_buffer_range: Default::default(),
            max_update_after_bind_descriptors_in_all_pools: Default::default(),
            max_vertex_attrib_divisor: Default::default(),
            max_vertex_input_attribute_offset: Default::default(),
            max_vertex_input_attributes: Default::default(),
            max_vertex_input_binding_stride: Default::default(),
            max_vertex_input_bindings: Default::default(),
            max_vertex_output_components: Default::default(),
            max_vgpr_allocation: Default::default(),
            max_viewport_dimensions: Default::default(),
            max_viewports: Default::default(),
            max_weight_filter_dimension: Default::default(),
            max_weight_filter_phases: Default::default(),
            max_width: Default::default(),
            max_work_group_count: Default::default(),
            max_work_group_size: Default::default(),
            mesh_output_per_primitive_granularity: Default::default(),
            mesh_output_per_vertex_granularity: Default::default(),
            min_acceleration_structure_scratch_offset_alignment: Default::default(),
            min_fragment_density_texel_size: Default::default(),
            min_fragment_shading_rate_attachment_texel_size: Default::default(),
            min_height: Default::default(),
            min_imported_host_pointer_alignment: Default::default(),
            min_indirect_commands_buffer_offset_alignment: Default::default(),
            min_interpolation_offset: Default::default(),
            min_memory_map_alignment: Default::default(),
            min_placed_memory_map_alignment: Default::default(),
            min_sequences_count_buffer_offset_alignment: Default::default(),
            min_sequences_index_buffer_offset_alignment: Default::default(),
            min_sgpr_allocation: Default::default(),
            min_storage_buffer_offset_alignment: Default::default(),
            min_subgroup_size: Default::default(),
            min_texel_buffer_offset_alignment: Default::default(),
            min_texel_gather_offset: Default::default(),
            min_texel_offset: Default::default(),
            min_uniform_buffer_offset_alignment: Default::default(),
            min_vertex_input_binding_stride_alignment: Default::default(),
            min_vgpr_allocation: Default::default(),
            min_width: Default::default(),
            mipmap_precision_bits: Default::default(),
            non_coherent_atom_size: Default::default(),
            non_strict_single_pixel_wide_lines_use_parallelogram: Default::default(),
            non_strict_wide_lines_use_parallelogram: Default::default(),
            null_color_attachment_with_external_format_resolve: Default::default(),
            optimal_buffer_copy_offset_alignment: Default::default(),
            optimal_buffer_copy_row_pitch_alignment: Default::default(),
            optimal_tiling_layout_uuid: Default::default(),
            pci_bus: Default::default(),
            pci_device: Default::default(),
            pci_domain: Default::default(),
            pci_function: Default::default(),
            per_view_position_all_components: Default::default(),
            pipeline_cache_uuid: Default::default(),
            pixel_rate: Default::default(),
            point_clipping_behavior: Default::default(),
            point_size_granularity: Default::default(),
            point_size_range: Default::default(),
            polygon_mode_point_size: Default::default(),
            prefers_compact_primitive_output: Default::default(),
            prefers_compact_vertex_output: Default::default(),
            prefers_local_invocation_primitive_output: Default::default(),
            prefers_local_invocation_vertex_output: Default::default(),
            primary_major: Default::default(),
            primary_minor: Default::default(),
            primitive_fragment_shading_rate_with_multiple_viewports: Default::default(),
            primitive_overestimation_size: Default::default(),
            primitive_underestimation: Default::default(),
            protected_no_fault: Default::default(),
            provoking_vertex_mode_per_pipeline: Default::default(),
            quad_divergent_implicit_lod: Default::default(),
            quad_operations_in_all_stages: Default::default(),
            ray_tracing_invocation_reorder_reordering_hint: Default::default(),
            render_major: Default::default(),
            render_minor: Default::default(),
            render_pass_stripe_granularity: Default::default(),
            required_subgroup_size_stages: Default::default(),
            residency_aligned_mip_size: Default::default(),
            residency_non_resident_strict: Default::default(),
            residency_standard2_d_block_shape: Default::default(),
            residency_standard2_d_multisample_block_shape: Default::default(),
            residency_standard3_d_block_shape: Default::default(),
            resource_descriptor_buffer_address_space_size: Default::default(),
            robust_buffer_access_update_after_bind: Default::default(),
            robust_storage_buffer_access_size_alignment: Default::default(),
            robust_storage_buffer_descriptor_size: Default::default(),
            robust_storage_texel_buffer_descriptor_size: Default::default(),
            robust_uniform_buffer_access_size_alignment: Default::default(),
            robust_uniform_buffer_descriptor_size: Default::default(),
            robust_uniform_texel_buffer_descriptor_size: Default::default(),
            rounding_mode_independence: Default::default(),
            sample_location_coordinate_range: Default::default(),
            sample_location_sample_counts: Default::default(),
            sample_location_sub_pixel_bits: Default::default(),
            sampled_image_color_sample_counts: Default::default(),
            sampled_image_depth_sample_counts: Default::default(),
            sampled_image_descriptor_size: Default::default(),
            sampled_image_integer_sample_counts: Default::default(),
            sampled_image_stencil_sample_counts: Default::default(),
            sampler_capture_replay_descriptor_data_size: Default::default(),
            sampler_descriptor_buffer_address_space_size: Default::default(),
            sampler_descriptor_size: Default::default(),
            scheduling_controls_flags: Default::default(),
            sgpr_allocation_granularity: Default::default(),
            sgprs_per_simd: Default::default(),
            shader_arrays_per_engine_count: Default::default(),
            shader_binary_uuid: Default::default(),
            shader_binary_version: Default::default(),
            shader_core_count: Default::default(),
            shader_core_features: Default::default(),
            shader_core_mask: Default::default(),
            shader_denorm_flush_to_zero_float16: Default::default(),
            shader_denorm_flush_to_zero_float32: Default::default(),
            shader_denorm_flush_to_zero_float64: Default::default(),
            shader_denorm_preserve_float16: Default::default(),
            shader_denorm_preserve_float32: Default::default(),
            shader_denorm_preserve_float64: Default::default(),
            shader_engine_count: Default::default(),
            shader_group_base_alignment: Default::default(),
            shader_group_handle_alignment: Default::default(),
            shader_group_handle_capture_replay_size: Default::default(),
            shader_group_handle_size: Default::default(),
            shader_input_attachment_array_non_uniform_indexing_native: Default::default(),
            shader_module_identifier_algorithm_uuid: Default::default(),
            shader_rounding_mode_rte_float16: Default::default(),
            shader_rounding_mode_rte_float32: Default::default(),
            shader_rounding_mode_rte_float64: Default::default(),
            shader_rounding_mode_rtz_float16: Default::default(),
            shader_rounding_mode_rtz_float32: Default::default(),
            shader_rounding_mode_rtz_float64: Default::default(),
            shader_sampled_image_array_non_uniform_indexing_native: Default::default(),
            shader_signed_zero_inf_nan_preserve_float16: Default::default(),
            shader_signed_zero_inf_nan_preserve_float32: Default::default(),
            shader_signed_zero_inf_nan_preserve_float64: Default::default(),
            shader_sm_count: Default::default(),
            shader_storage_buffer_array_non_uniform_indexing_native: Default::default(),
            shader_storage_image_array_non_uniform_indexing_native: Default::default(),
            shader_tile_image_coherent_read_accelerated: Default::default(),
            shader_tile_image_read_from_helper_invocation: Default::default(),
            shader_tile_image_read_sample_from_pixel_rate_invocation: Default::default(),
            shader_uniform_buffer_array_non_uniform_indexing_native: Default::default(),
            shader_warps_per_core: Default::default(),
            shader_warps_per_sm: Default::default(),
            shading_rate_max_coarse_samples: Default::default(),
            shading_rate_palette_size: Default::default(),
            shading_rate_texel_size: Default::default(),
            simd_per_compute_unit: Default::default(),
            sparse_address_space_size: Default::default(),
            standard_sample_locations: Default::default(),
            storage_buffer_descriptor_size: Default::default(),
            storage_image_descriptor_size: Default::default(),
            storage_image_sample_counts: Default::default(),
            storage_texel_buffer_descriptor_size: Default::default(),
            storage_texel_buffer_offset_alignment_bytes: Default::default(),
            storage_texel_buffer_offset_single_texel_alignment: Default::default(),
            strict_lines: Default::default(),
            sub_pixel_interpolation_offset_bits: Default::default(),
            sub_pixel_precision_bits: Default::default(),
            sub_texel_precision_bits: Default::default(),
            subgroup_quad_operations_in_all_stages: Default::default(),
            subgroup_size: Default::default(),
            subgroup_supported_operations: Default::default(),
            subgroup_supported_stages: Default::default(),
            subsampled_coarse_reconstruction_early_access: Default::default(),
            subsampled_loads: Default::default(),
            supported_depth_resolve_modes: Default::default(),
            supported_hint_grid_sizes: Default::default(),
            supported_operations: Default::default(),
            supported_output_grid_sizes: Default::default(),
            supported_queues: Default::default(),
            supported_stages: Default::default(),
            supported_stencil_resolve_modes: Default::default(),
            supports_non_zero_first_instance: Default::default(),
            texel_rate: Default::default(),
            timestamp_compute_and_graphics: Default::default(),
            timestamp_period: Default::default(),
            transform_feedback_draw: Default::default(),
            transform_feedback_preserves_triangle_fan_provoking_vertex: Default::default(),
            transform_feedback_queries: Default::default(),
            transform_feedback_rasterization_stream_select: Default::default(),
            transform_feedback_streams_lines_triangles: Default::default(),
            tri_strip_vertex_order_independent_of_provoking_vertex: Default::default(),
            underlying_api: Default::default(),
            uniform_buffer_descriptor_size: Default::default(),
            uniform_texel_buffer_descriptor_size: Default::default(),
            uniform_texel_buffer_offset_alignment_bytes: Default::default(),
            uniform_texel_buffer_offset_single_texel_alignment: Default::default(),
            variable_sample_locations: Default::default(),
            vendor_id: Default::default(),
            vgpr_allocation_granularity: Default::default(),
            vgprs_per_simd: Default::default(),
            viewport_bounds_range: Default::default(),
            viewport_sub_pixel_bits: Default::default(),
            wavefront_size: Default::default(),
            wavefronts_per_simd: Default::default(),
            _ne: crate::NonExhaustive(()),
        }
    }
}
pub(crate) struct PhysicalDeviceProperties2ExtensionsVk<'a> {
    pub(crate) vulkan11_properties_vk: Option<
        ash::vk::PhysicalDeviceVulkan11Properties<'static>,
    >,
    pub(crate) vulkan12_properties_vk: Option<
        ash::vk::PhysicalDeviceVulkan12Properties<'static>,
    >,
    pub(crate) vulkan13_properties_vk: Option<
        ash::vk::PhysicalDeviceVulkan13Properties<'static>,
    >,
    pub(crate) id_properties_vk: Option<ash::vk::PhysicalDeviceIDProperties<'static>>,
    pub(crate) maintenance3_properties_vk: Option<
        ash::vk::PhysicalDeviceMaintenance3Properties<'static>,
    >,
    pub(crate) multiview_properties_vk: Option<
        ash::vk::PhysicalDeviceMultiviewProperties<'static>,
    >,
    pub(crate) point_clipping_properties_vk: Option<
        ash::vk::PhysicalDevicePointClippingProperties<'static>,
    >,
    pub(crate) protected_memory_properties_vk: Option<
        ash::vk::PhysicalDeviceProtectedMemoryProperties<'static>,
    >,
    pub(crate) subgroup_properties_vk: Option<
        ash::vk::PhysicalDeviceSubgroupProperties<'static>,
    >,
    pub(crate) depth_stencil_resolve_properties_vk: Option<
        ash::vk::PhysicalDeviceDepthStencilResolveProperties<'static>,
    >,
    pub(crate) descriptor_indexing_properties_vk: Option<
        ash::vk::PhysicalDeviceDescriptorIndexingProperties<'static>,
    >,
    pub(crate) driver_properties_vk: Option<
        ash::vk::PhysicalDeviceDriverProperties<'static>,
    >,
    pub(crate) float_controls_properties_vk: Option<
        ash::vk::PhysicalDeviceFloatControlsProperties<'static>,
    >,
    pub(crate) sampler_filter_minmax_properties_vk: Option<
        ash::vk::PhysicalDeviceSamplerFilterMinmaxProperties<'static>,
    >,
    pub(crate) timeline_semaphore_properties_vk: Option<
        ash::vk::PhysicalDeviceTimelineSemaphoreProperties<'static>,
    >,
    pub(crate) inline_uniform_block_properties_vk: Option<
        ash::vk::PhysicalDeviceInlineUniformBlockProperties<'static>,
    >,
    pub(crate) maintenance4_properties_vk: Option<
        ash::vk::PhysicalDeviceMaintenance4Properties<'static>,
    >,
    pub(crate) shader_integer_dot_product_properties_vk: Option<
        ash::vk::PhysicalDeviceShaderIntegerDotProductProperties<'static>,
    >,
    pub(crate) subgroup_size_control_properties_vk: Option<
        ash::vk::PhysicalDeviceSubgroupSizeControlProperties<'static>,
    >,
    pub(crate) texel_buffer_alignment_properties_vk: Option<
        ash::vk::PhysicalDeviceTexelBufferAlignmentProperties<'static>,
    >,
    pub(crate) acceleration_structure_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceAccelerationStructurePropertiesKHR<'static>,
    >,
    pub(crate) cooperative_matrix_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceCooperativeMatrixPropertiesKHR<'static>,
    >,
    pub(crate) fragment_shader_barycentric_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceFragmentShaderBarycentricPropertiesKHR<'static>,
    >,
    pub(crate) fragment_shading_rate_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceFragmentShadingRatePropertiesKHR<'static>,
    >,
    pub(crate) line_rasterization_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceLineRasterizationPropertiesKHR<'static>,
    >,
    pub(crate) maintenance5_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceMaintenance5PropertiesKHR<'static>,
    >,
    pub(crate) maintenance6_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceMaintenance6PropertiesKHR<'static>,
    >,
    pub(crate) performance_query_properties_khr_vk: Option<
        ash::vk::PhysicalDevicePerformanceQueryPropertiesKHR<'static>,
    >,
    pub(crate) portability_subset_properties_khr_vk: Option<
        ash::vk::PhysicalDevicePortabilitySubsetPropertiesKHR<'static>,
    >,
    pub(crate) push_descriptor_properties_khr_vk: Option<
        ash::vk::PhysicalDevicePushDescriptorPropertiesKHR<'static>,
    >,
    pub(crate) ray_tracing_pipeline_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceRayTracingPipelinePropertiesKHR<'static>,
    >,
    pub(crate) vertex_attribute_divisor_properties_khr_vk: Option<
        ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesKHR<'static>,
    >,
    pub(crate) blend_operation_advanced_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceBlendOperationAdvancedPropertiesEXT<'static>,
    >,
    pub(crate) conservative_rasterization_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceConservativeRasterizationPropertiesEXT<'static>,
    >,
    pub(crate) custom_border_color_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceCustomBorderColorPropertiesEXT<'static>,
    >,
    pub(crate) descriptor_buffer_density_map_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT<'static>,
    >,
    pub(crate) descriptor_buffer_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceDescriptorBufferPropertiesEXT<'static>,
    >,
    pub(crate) discard_rectangle_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceDiscardRectanglePropertiesEXT<'static>,
    >,
    pub(crate) drm_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceDrmPropertiesEXT<'static>,
    >,
    pub(crate) extended_dynamic_state3_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceExtendedDynamicState3PropertiesEXT<'static>,
    >,
    pub(crate) external_memory_host_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceExternalMemoryHostPropertiesEXT<'static>,
    >,
    pub(crate) fragment_density_map2_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceFragmentDensityMap2PropertiesEXT<'static>,
    >,
    pub(crate) fragment_density_map_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceFragmentDensityMapPropertiesEXT<'static>,
    >,
    pub(crate) graphics_pipeline_library_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT<'static>,
    >,
    pub(crate) host_image_copy_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT<'a>,
    >,
    pub(crate) map_memory_placed_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceMapMemoryPlacedPropertiesEXT<'static>,
    >,
    pub(crate) mesh_shader_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceMeshShaderPropertiesEXT<'static>,
    >,
    pub(crate) multi_draw_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceMultiDrawPropertiesEXT<'static>,
    >,
    pub(crate) nested_command_buffer_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceNestedCommandBufferPropertiesEXT<'static>,
    >,
    pub(crate) opacity_micromap_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceOpacityMicromapPropertiesEXT<'static>,
    >,
    pub(crate) pci_bus_info_properties_ext_vk: Option<
        ash::vk::PhysicalDevicePCIBusInfoPropertiesEXT<'static>,
    >,
    pub(crate) pipeline_robustness_properties_ext_vk: Option<
        ash::vk::PhysicalDevicePipelineRobustnessPropertiesEXT<'static>,
    >,
    pub(crate) provoking_vertex_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceProvokingVertexPropertiesEXT<'static>,
    >,
    pub(crate) robustness2_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceRobustness2PropertiesEXT<'static>,
    >,
    pub(crate) sample_locations_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceSampleLocationsPropertiesEXT<'static>,
    >,
    pub(crate) shader_module_identifier_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceShaderModuleIdentifierPropertiesEXT<'static>,
    >,
    pub(crate) shader_object_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceShaderObjectPropertiesEXT<'static>,
    >,
    pub(crate) shader_tile_image_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceShaderTileImagePropertiesEXT<'static>,
    >,
    pub(crate) transform_feedback_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceTransformFeedbackPropertiesEXT<'static>,
    >,
    pub(crate) vertex_attribute_divisor_properties_ext_vk: Option<
        ash::vk::PhysicalDeviceVertexAttributeDivisorPropertiesEXT<'static>,
    >,
    pub(crate) cluster_culling_shader_properties_huawei_vk: Option<
        ash::vk::PhysicalDeviceClusterCullingShaderPropertiesHUAWEI<'static>,
    >,
    pub(crate) cooperative_matrix_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceCooperativeMatrixPropertiesNV<'static>,
    >,
    pub(crate) copy_memory_indirect_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceCopyMemoryIndirectPropertiesNV<'static>,
    >,
    pub(crate) cuda_kernel_launch_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceCudaKernelLaunchPropertiesNV<'static>,
    >,
    pub(crate) device_generated_commands_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceDeviceGeneratedCommandsPropertiesNV<'static>,
    >,
    pub(crate) displacement_micromap_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceDisplacementMicromapPropertiesNV<'static>,
    >,
    pub(crate) extended_sparse_address_space_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceExtendedSparseAddressSpacePropertiesNV<'static>,
    >,
    pub(crate) external_format_resolve_properties_android_vk: Option<
        ash::vk::PhysicalDeviceExternalFormatResolvePropertiesANDROID<'static>,
    >,
    pub(crate) fragment_density_map_offset_properties_qcom_vk: Option<
        ash::vk::PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM<'static>,
    >,
    pub(crate) fragment_shading_rate_enums_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV<'static>,
    >,
    pub(crate) image_processing2_properties_qcom_vk: Option<
        ash::vk::PhysicalDeviceImageProcessing2PropertiesQCOM<'static>,
    >,
    pub(crate) image_processing_properties_qcom_vk: Option<
        ash::vk::PhysicalDeviceImageProcessingPropertiesQCOM<'static>,
    >,
    pub(crate) layered_driver_properties_msft_vk: Option<
        ash::vk::PhysicalDeviceLayeredDriverPropertiesMSFT<'static>,
    >,
    pub(crate) memory_decompression_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceMemoryDecompressionPropertiesNV<'static>,
    >,
    pub(crate) mesh_shader_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceMeshShaderPropertiesNV<'static>,
    >,
    pub(crate) multiview_per_view_attributes_properties_nvx_vk: Option<
        ash::vk::PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX<'static>,
    >,
    pub(crate) optical_flow_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceOpticalFlowPropertiesNV<'static>,
    >,
    pub(crate) ray_tracing_invocation_reorder_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceRayTracingInvocationReorderPropertiesNV<'static>,
    >,
    pub(crate) ray_tracing_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceRayTracingPropertiesNV<'static>,
    >,
    pub(crate) render_pass_striped_properties_arm_vk: Option<
        ash::vk::PhysicalDeviceRenderPassStripedPropertiesARM<'static>,
    >,
    pub(crate) scheduling_controls_properties_arm_vk: Option<
        ash::vk::PhysicalDeviceSchedulingControlsPropertiesARM<'static>,
    >,
    pub(crate) shader_core_builtins_properties_arm_vk: Option<
        ash::vk::PhysicalDeviceShaderCoreBuiltinsPropertiesARM<'static>,
    >,
    pub(crate) shader_core_properties2_amd_vk: Option<
        ash::vk::PhysicalDeviceShaderCoreProperties2AMD<'static>,
    >,
    pub(crate) shader_core_properties_amd_vk: Option<
        ash::vk::PhysicalDeviceShaderCorePropertiesAMD<'static>,
    >,
    pub(crate) shader_core_properties_arm_vk: Option<
        ash::vk::PhysicalDeviceShaderCorePropertiesARM<'static>,
    >,
    pub(crate) shader_enqueue_properties_amdx_vk: Option<
        ash::vk::PhysicalDeviceShaderEnqueuePropertiesAMDX<'static>,
    >,
    pub(crate) shader_sm_builtins_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceShaderSMBuiltinsPropertiesNV<'static>,
    >,
    pub(crate) shading_rate_image_properties_nv_vk: Option<
        ash::vk::PhysicalDeviceShadingRateImagePropertiesNV<'static>,
    >,
    pub(crate) subpass_shading_properties_huawei_vk: Option<
        ash::vk::PhysicalDeviceSubpassShadingPropertiesHUAWEI<'static>,
    >,
}
impl PhysicalDeviceProperties2ExtensionsVk<'_> {
    pub(crate) fn unborrow(self) -> PhysicalDeviceProperties2ExtensionsVk<'static> {
        let Self {
            vulkan11_properties_vk,
            vulkan12_properties_vk,
            vulkan13_properties_vk,
            id_properties_vk,
            maintenance3_properties_vk,
            multiview_properties_vk,
            point_clipping_properties_vk,
            protected_memory_properties_vk,
            subgroup_properties_vk,
            depth_stencil_resolve_properties_vk,
            descriptor_indexing_properties_vk,
            driver_properties_vk,
            float_controls_properties_vk,
            sampler_filter_minmax_properties_vk,
            timeline_semaphore_properties_vk,
            inline_uniform_block_properties_vk,
            maintenance4_properties_vk,
            shader_integer_dot_product_properties_vk,
            subgroup_size_control_properties_vk,
            texel_buffer_alignment_properties_vk,
            acceleration_structure_properties_khr_vk,
            cooperative_matrix_properties_khr_vk,
            fragment_shader_barycentric_properties_khr_vk,
            fragment_shading_rate_properties_khr_vk,
            line_rasterization_properties_khr_vk,
            maintenance5_properties_khr_vk,
            maintenance6_properties_khr_vk,
            performance_query_properties_khr_vk,
            portability_subset_properties_khr_vk,
            push_descriptor_properties_khr_vk,
            ray_tracing_pipeline_properties_khr_vk,
            vertex_attribute_divisor_properties_khr_vk,
            blend_operation_advanced_properties_ext_vk,
            conservative_rasterization_properties_ext_vk,
            custom_border_color_properties_ext_vk,
            descriptor_buffer_density_map_properties_ext_vk,
            descriptor_buffer_properties_ext_vk,
            discard_rectangle_properties_ext_vk,
            drm_properties_ext_vk,
            extended_dynamic_state3_properties_ext_vk,
            external_memory_host_properties_ext_vk,
            fragment_density_map2_properties_ext_vk,
            fragment_density_map_properties_ext_vk,
            graphics_pipeline_library_properties_ext_vk,
            host_image_copy_properties_ext_vk,
            map_memory_placed_properties_ext_vk,
            mesh_shader_properties_ext_vk,
            multi_draw_properties_ext_vk,
            nested_command_buffer_properties_ext_vk,
            opacity_micromap_properties_ext_vk,
            pci_bus_info_properties_ext_vk,
            pipeline_robustness_properties_ext_vk,
            provoking_vertex_properties_ext_vk,
            robustness2_properties_ext_vk,
            sample_locations_properties_ext_vk,
            shader_module_identifier_properties_ext_vk,
            shader_object_properties_ext_vk,
            shader_tile_image_properties_ext_vk,
            transform_feedback_properties_ext_vk,
            vertex_attribute_divisor_properties_ext_vk,
            cluster_culling_shader_properties_huawei_vk,
            cooperative_matrix_properties_nv_vk,
            copy_memory_indirect_properties_nv_vk,
            cuda_kernel_launch_properties_nv_vk,
            device_generated_commands_properties_nv_vk,
            displacement_micromap_properties_nv_vk,
            extended_sparse_address_space_properties_nv_vk,
            external_format_resolve_properties_android_vk,
            fragment_density_map_offset_properties_qcom_vk,
            fragment_shading_rate_enums_properties_nv_vk,
            image_processing2_properties_qcom_vk,
            image_processing_properties_qcom_vk,
            layered_driver_properties_msft_vk,
            memory_decompression_properties_nv_vk,
            mesh_shader_properties_nv_vk,
            multiview_per_view_attributes_properties_nvx_vk,
            optical_flow_properties_nv_vk,
            ray_tracing_invocation_reorder_properties_nv_vk,
            ray_tracing_properties_nv_vk,
            render_pass_striped_properties_arm_vk,
            scheduling_controls_properties_arm_vk,
            shader_core_builtins_properties_arm_vk,
            shader_core_properties2_amd_vk,
            shader_core_properties_amd_vk,
            shader_core_properties_arm_vk,
            shader_enqueue_properties_amdx_vk,
            shader_sm_builtins_properties_nv_vk,
            shading_rate_image_properties_nv_vk,
            subpass_shading_properties_huawei_vk,
        } = self;
        let host_image_copy_properties_ext_vk = host_image_copy_properties_ext_vk
            .map(|val_vk| {
                ash::vk::PhysicalDeviceHostImageCopyPropertiesEXT {
                    _marker: std::marker::PhantomData,
                    ..val_vk
                }
            });
        PhysicalDeviceProperties2ExtensionsVk {
            vulkan11_properties_vk,
            vulkan12_properties_vk,
            vulkan13_properties_vk,
            id_properties_vk,
            maintenance3_properties_vk,
            multiview_properties_vk,
            point_clipping_properties_vk,
            protected_memory_properties_vk,
            subgroup_properties_vk,
            depth_stencil_resolve_properties_vk,
            descriptor_indexing_properties_vk,
            driver_properties_vk,
            float_controls_properties_vk,
            sampler_filter_minmax_properties_vk,
            timeline_semaphore_properties_vk,
            inline_uniform_block_properties_vk,
            maintenance4_properties_vk,
            shader_integer_dot_product_properties_vk,
            subgroup_size_control_properties_vk,
            texel_buffer_alignment_properties_vk,
            acceleration_structure_properties_khr_vk,
            cooperative_matrix_properties_khr_vk,
            fragment_shader_barycentric_properties_khr_vk,
            fragment_shading_rate_properties_khr_vk,
            line_rasterization_properties_khr_vk,
            maintenance5_properties_khr_vk,
            maintenance6_properties_khr_vk,
            performance_query_properties_khr_vk,
            portability_subset_properties_khr_vk,
            push_descriptor_properties_khr_vk,
            ray_tracing_pipeline_properties_khr_vk,
            vertex_attribute_divisor_properties_khr_vk,
            blend_operation_advanced_properties_ext_vk,
            conservative_rasterization_properties_ext_vk,
            custom_border_color_properties_ext_vk,
            descriptor_buffer_density_map_properties_ext_vk,
            descriptor_buffer_properties_ext_vk,
            discard_rectangle_properties_ext_vk,
            drm_properties_ext_vk,
            extended_dynamic_state3_properties_ext_vk,
            external_memory_host_properties_ext_vk,
            fragment_density_map2_properties_ext_vk,
            fragment_density_map_properties_ext_vk,
            graphics_pipeline_library_properties_ext_vk,
            host_image_copy_properties_ext_vk,
            map_memory_placed_properties_ext_vk,
            mesh_shader_properties_ext_vk,
            multi_draw_properties_ext_vk,
            nested_command_buffer_properties_ext_vk,
            opacity_micromap_properties_ext_vk,
            pci_bus_info_properties_ext_vk,
            pipeline_robustness_properties_ext_vk,
            provoking_vertex_properties_ext_vk,
            robustness2_properties_ext_vk,
            sample_locations_properties_ext_vk,
            shader_module_identifier_properties_ext_vk,
            shader_object_properties_ext_vk,
            shader_tile_image_properties_ext_vk,
            transform_feedback_properties_ext_vk,
            vertex_attribute_divisor_properties_ext_vk,
            cluster_culling_shader_properties_huawei_vk,
            cooperative_matrix_properties_nv_vk,
            copy_memory_indirect_properties_nv_vk,
            cuda_kernel_launch_properties_nv_vk,
            device_generated_commands_properties_nv_vk,
            displacement_micromap_properties_nv_vk,
            extended_sparse_address_space_properties_nv_vk,
            external_format_resolve_properties_android_vk,
            fragment_density_map_offset_properties_qcom_vk,
            fragment_shading_rate_enums_properties_nv_vk,
            image_processing2_properties_qcom_vk,
            image_processing_properties_qcom_vk,
            layered_driver_properties_msft_vk,
            memory_decompression_properties_nv_vk,
            mesh_shader_properties_nv_vk,
            multiview_per_view_attributes_properties_nvx_vk,
            optical_flow_properties_nv_vk,
            ray_tracing_invocation_reorder_properties_nv_vk,
            ray_tracing_properties_nv_vk,
            render_pass_striped_properties_arm_vk,
            scheduling_controls_properties_arm_vk,
            shader_core_builtins_properties_arm_vk,
            shader_core_properties2_amd_vk,
            shader_core_properties_amd_vk,
            shader_core_properties_arm_vk,
            shader_enqueue_properties_amdx_vk,
            shader_sm_builtins_properties_nv_vk,
            shading_rate_image_properties_nv_vk,
            subpass_shading_properties_huawei_vk,
        }
    }
}
pub(crate) struct PhysicalDeviceProperties2Fields1Vk {
    pub(crate) physical_device_host_image_copy_properties_ext_fields1_vk: Option<
        PhysicalDeviceHostImageCopyPropertiesEXTFields1Vk,
    >,
}
pub(crate) struct PhysicalDeviceHostImageCopyPropertiesEXTFields1Vk {
    pub(crate) copy_src_layouts: Vec<ash::vk::ImageLayout>,
    pub(crate) copy_dst_layouts: Vec<ash::vk::ImageLayout>,
}
