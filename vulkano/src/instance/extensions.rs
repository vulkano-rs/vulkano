// Copyright (c) 2016 The vulkano developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or https://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.

use super::{loader, LoadingError};
use crate::{check_errors, Success};
pub use crate::{
    extensions::{
        ExtensionRestriction, ExtensionRestrictionError, OneOfRequirements,
        SupportedExtensionsError,
    },
    Version,
};
use std::{
    ffi::{CStr, CString},
    fmt::Formatter,
    ptr,
};

// Generated by build.rs
include!(concat!(env!("OUT_DIR"), "/instance_extensions.rs"));

impl InstanceExtensions {
    /// See the docs of supported_by_core().
    pub fn supported_by_core_raw() -> Result<Self, SupportedExtensionsError> {
        InstanceExtensions::supported_by_core_raw_with_loader(loader::auto_loader()?)
    }

    /// Returns an `InstanceExtensions` object with extensions supported by the core driver.
    pub fn supported_by_core() -> Result<Self, LoadingError> {
        match InstanceExtensions::supported_by_core_raw() {
            Ok(l) => Ok(l),
            Err(SupportedExtensionsError::LoadingError(e)) => Err(e),
            Err(SupportedExtensionsError::OomError(e)) => panic!("{:?}", e),
        }
    }

    /// Same as `supported_by_core`, but allows specifying a loader.
    pub fn supported_by_core_with_loader<L>(
        ptrs: &loader::FunctionPointers<L>,
    ) -> Result<Self, LoadingError>
    where
        L: loader::Loader,
    {
        match InstanceExtensions::supported_by_core_raw_with_loader(ptrs) {
            Ok(l) => Ok(l),
            Err(SupportedExtensionsError::LoadingError(e)) => Err(e),
            Err(SupportedExtensionsError::OomError(e)) => panic!("{:?}", e),
        }
    }

    /// See the docs of supported_by_core().
    pub fn supported_by_core_raw_with_loader<L>(
        ptrs: &loader::FunctionPointers<L>,
    ) -> Result<Self, SupportedExtensionsError>
    where
        L: loader::Loader,
    {
        let fns = ptrs.fns();

        let extension_properties = unsafe {
            loop {
                let mut count = 0;
                check_errors((fns.v1_0.enumerate_instance_extension_properties)(
                    ptr::null(),
                    &mut count,
                    ptr::null_mut(),
                ))?;

                let mut properties = Vec::with_capacity(count as usize);
                let result = check_errors((fns.v1_0.enumerate_instance_extension_properties)(
                    ptr::null(),
                    &mut count,
                    properties.as_mut_ptr(),
                ))?;

                if !matches!(result, Success::Incomplete) {
                    properties.set_len(count as usize);
                    break properties;
                }
            }
        };

        Ok(Self::from(extension_properties.iter().map(
            |property| unsafe { CStr::from_ptr(property.extension_name.as_ptr()) },
        )))
    }
}

#[cfg(test)]
mod tests {
    use crate::instance::InstanceExtensions;
    use std::ffi::CString;

    #[test]
    fn empty_extensions() {
        let i: Vec<CString> = (&InstanceExtensions::none()).into();
        assert!(i.iter().next().is_none());
    }
}
