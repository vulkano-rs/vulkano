// This file is auto-generated by vulkano autogen from vk.xml header version 1.3.281.
// It should not be edited manually. Changes should be made by editing autogen.


fn validate_spirv_capability(
    device: &Device,
    item: Capability,
) -> Result<(), Box<ValidationError>> {
    #[allow(unused_variables)]
    let api_version = device.api_version();
    #[allow(unused_variables)]
    let device_extensions = device.enabled_extensions();
    #[allow(unused_variables)]
    let device_features = device.enabled_features();
    #[allow(unused_variables)]
    let properties = device.physical_device().properties();
    match item {
        Capability::Matrix => {}
        Capability::Shader => {}
        Capability::InputAttachment => {}
        Capability::Sampled1D => {}
        Capability::Image1D => {}
        Capability::SampledBuffer => {}
        Capability::ImageBuffer => {}
        Capability::ImageQuery => {}
        Capability::DerivativeControl => {}
        Capability::Geometry => {
            if !(device_features.geometry_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Geometry`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("geometry_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Tessellation => {
            if !(device_features.tessellation_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Tessellation`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("tessellation_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Float64 => {
            if !(device_features.shader_float64) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Float64`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_float64")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Int64 => {
            if !(device_features.shader_int64) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Int64`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_int64")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Int64Atomics => {
            if !(device_features.shader_buffer_int64_atomics
                || device_features.shader_image_int64_atomics
                || device_features.shader_shared_int64_atomics)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Int64Atomics`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_int64_atomics",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_image_int64_atomics"),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_int64_atomics",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat16AddEXT => {
            if !(device_features.shader_buffer_float16_atomic_add
                || device_features.shader_shared_float16_atomic_add)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat16AddEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float16_atomic_add",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float16_atomic_add",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat32AddEXT => {
            if !(device_features.shader_buffer_float32_atomic_add
                || device_features.shader_image_float32_atomic_add
                || device_features.shader_shared_float32_atomic_add)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat32AddEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float32_atomic_add",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_image_float32_atomic_add",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float32_atomic_add",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat64AddEXT => {
            if !(device_features.shader_buffer_float64_atomic_add
                || device_features.shader_shared_float64_atomic_add)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat64AddEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float64_atomic_add",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float64_atomic_add",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat16MinMaxEXT => {
            if !(device_features.shader_buffer_float16_atomic_min_max
                || device_features.shader_shared_float16_atomic_min_max)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat16MinMaxEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float16_atomic_min_max",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float16_atomic_min_max",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat32MinMaxEXT => {
            if !(device_features.shader_buffer_float32_atomic_min_max
                || device_features.shader_image_float32_atomic_min_max
                || device_features.shader_shared_float32_atomic_min_max)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat32MinMaxEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float32_atomic_min_max",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_image_float32_atomic_min_max",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float32_atomic_min_max",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat64MinMaxEXT => {
            if !(device_features.shader_buffer_float64_atomic_min_max
                || device_features.shader_shared_float64_atomic_min_max)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat64MinMaxEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_buffer_float64_atomic_min_max",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_shared_float64_atomic_min_max",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::AtomicFloat16VectorNV => {
            if !(device_features.shader_float16_vector_atomics) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `AtomicFloat16VectorNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_float16_vector_atomics",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Int64ImageEXT => {
            if !(device_features.shader_image_int64_atomics) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Int64ImageEXT`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_image_int64_atomics"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Int16 => {
            if !(device_features.shader_int16) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Int16`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_int16")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TessellationPointSize => {
            if !(device_features.shader_tessellation_and_geometry_point_size) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TessellationPointSize`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_tessellation_and_geometry_point_size",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GeometryPointSize => {
            if !(device_features.shader_tessellation_and_geometry_point_size) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GeometryPointSize`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_tessellation_and_geometry_point_size",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageGatherExtended => {
            if !(device_features.shader_image_gather_extended) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageGatherExtended`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_image_gather_extended",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageMultisample => {
            if !(device_features.shader_storage_image_multisample) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageImageMultisample`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_multisample",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformBufferArrayDynamicIndexing => {
            if !(device_features.shader_uniform_buffer_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformBufferArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_uniform_buffer_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampledImageArrayDynamicIndexing => {
            if !(device_features.shader_sampled_image_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampledImageArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_sampled_image_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageBufferArrayDynamicIndexing => {
            if !(device_features.shader_storage_buffer_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageBufferArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_buffer_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageArrayDynamicIndexing => {
            if !(device_features.shader_storage_image_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageImageArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ClipDistance => {
            if !(device_features.shader_clip_distance) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ClipDistance`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_clip_distance")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::CullDistance => {
            if !(device_features.shader_cull_distance) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `CullDistance`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_cull_distance")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageCubeArray => {
            if !(device_features.image_cube_array) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageCubeArray`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("image_cube_array")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampleRateShading => {
            if !(device_features.sample_rate_shading) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampleRateShading`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("sample_rate_shading")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SparseResidency => {
            if !(device_features.shader_resource_residency) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SparseResidency`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_resource_residency"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::MinLod => {
            if !(device_features.shader_resource_min_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `MinLod`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_resource_min_lod")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampledCubeArray => {
            if !(device_features.image_cube_array) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampledCubeArray`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("image_cube_array")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageMSArray => {
            if !(device_features.shader_storage_image_multisample) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageMSArray`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_multisample",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageExtendedFormats => {}
        Capability::InterpolationFunction => {
            if !(device_features.sample_rate_shading) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `InterpolationFunction`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("sample_rate_shading")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageReadWithoutFormat => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_format_feature_flags2
                || device_features.shader_storage_image_read_without_format)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageImageReadWithoutFormat`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_format_feature_flags2",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_read_without_format",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageWriteWithoutFormat => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_format_feature_flags2
                || device_features.shader_storage_image_write_without_format)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageImageWriteWithoutFormat`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_format_feature_flags2",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_write_without_format",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::MultiViewport => {
            if !(device_features.multi_viewport) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `MultiViewport`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("multi_viewport")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DrawParameters => {
            if !(device_extensions.khr_shader_draw_parameters
                || device_features.shader_draw_parameters)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DrawParameters`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_draw_parameters",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_draw_parameters")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::MultiView => {
            if !(device_features.multiview) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `MultiView`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("multiview")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DeviceGroup => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_device_group)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DeviceGroup`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_device_group")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::VariablePointersStorageBuffer => {
            if !(device_features.variable_pointers_storage_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `VariablePointersStorageBuffer`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "variable_pointers_storage_buffer",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::VariablePointers => {
            if !(device_features.variable_pointers) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `VariablePointers`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("variable_pointers")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderClockKHR => {
            if !(device_extensions.khr_shader_clock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderClockKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_shader_clock")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StencilExportEXT => {
            if !(device_extensions.ext_shader_stencil_export) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StencilExportEXT`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_stencil_export",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SubgroupBallotKHR => {
            if !(device_extensions.ext_shader_subgroup_ballot) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SubgroupBallotKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_subgroup_ballot",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SubgroupVoteKHR => {
            if !(device_extensions.ext_shader_subgroup_vote) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SubgroupVoteKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_shader_subgroup_vote"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageReadWriteLodAMD => {
            if !(device_extensions.amd_shader_image_load_store_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageReadWriteLodAMD`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_shader_image_load_store_lod",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageGatherBiasLodAMD => {
            if !(device_extensions.amd_texture_gather_bias_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageGatherBiasLodAMD`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_texture_gather_bias_lod",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentMaskAMD => {
            if !(device_extensions.amd_shader_fragment_mask) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentMaskAMD`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("amd_shader_fragment_mask"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampleMaskOverrideCoverageNV => {
            if !(device_extensions.nv_sample_mask_override_coverage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampleMaskOverrideCoverageNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_sample_mask_override_coverage",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GeometryShaderPassthroughNV => {
            if !(device_extensions.nv_geometry_shader_passthrough) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GeometryShaderPassthroughNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_geometry_shader_passthrough",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderViewportIndex => {
            if !(device_features.shader_output_viewport_index) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderViewportIndex`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_output_viewport_index",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderLayer => {
            if !(device_features.shader_output_layer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderLayer`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_output_layer")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderViewportIndexLayerEXT => {
            if !(device_extensions.ext_shader_viewport_index_layer
                || device_extensions.nv_viewport_array2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderViewportIndexLayerEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_viewport_index_layer",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_viewport_array2")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderViewportMaskNV => {
            if !(device_extensions.nv_viewport_array2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderViewportMaskNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_viewport_array2")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::PerViewAttributesNV => {
            if !(device_extensions.nvx_multiview_per_view_attributes) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `PerViewAttributesNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nvx_multiview_per_view_attributes",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageBuffer16BitAccess => {
            if !(device_features.storage_buffer16_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageBuffer16BitAccess`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "storage_buffer16_bit_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformAndStorageBuffer16BitAccess => {
            if !(device_features.uniform_and_storage_buffer16_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformAndStorageBuffer16BitAccess`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "uniform_and_storage_buffer16_bit_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StoragePushConstant16 => {
            if !(device_features.storage_push_constant16) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StoragePushConstant16`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("storage_push_constant16")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageInputOutput16 => {
            if !(device_features.storage_input_output16) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageInputOutput16`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("storage_input_output16")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniform => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| x.intersects(crate::device::physical::SubgroupFeatures::BASIC))
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniform`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::BASIC`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformVote => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| x.intersects(crate::device::physical::SubgroupFeatures::VOTE))
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformVote`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::VOTE`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformArithmetic => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| {
                    x.intersects(crate::device::physical::SubgroupFeatures::ARITHMETIC)
                })
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformArithmetic`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::ARITHMETIC`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformBallot => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| x.intersects(crate::device::physical::SubgroupFeatures::BALLOT))
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformBallot`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::BALLOT`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformShuffle => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| {
                    x.intersects(crate::device::physical::SubgroupFeatures::SHUFFLE)
                })
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformShuffle`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::SHUFFLE`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformShuffleRelative => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| {
                    x
                        .intersects(
                            crate::device::physical::SubgroupFeatures::SHUFFLE_RELATIVE,
                        )
                })
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformShuffleRelative`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::SHUFFLE_RELATIVE`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformClustered => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| {
                    x.intersects(crate::device::physical::SubgroupFeatures::CLUSTERED)
                })
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformClustered`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::CLUSTERED`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformQuad => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| x.intersects(crate::device::physical::SubgroupFeatures::QUAD))
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformQuad`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::QUAD`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformPartitionedNV => {
            if !(device
                .physical_device()
                .properties()
                .subgroup_supported_operations
                .map(|x| {
                    x.intersects(crate::device::physical::SubgroupFeatures::PARTITIONED)
                })
                .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformPartitionedNV`, but the device properties do not meet at least one of the requirements (`subgroup_supported_operations` must contain `SubgroupFeatures::PARTITIONED`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampleMaskPostDepthCoverage => {
            if !(device_extensions.ext_post_depth_coverage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampleMaskPostDepthCoverage`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_post_depth_coverage"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderNonUniform => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderNonUniform`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_descriptor_indexing"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RuntimeDescriptorArray => {
            if !(device_features.runtime_descriptor_array) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RuntimeDescriptorArray`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("runtime_descriptor_array"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::InputAttachmentArrayDynamicIndexing => {
            if !(device_features.shader_input_attachment_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `InputAttachmentArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_input_attachment_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformTexelBufferArrayDynamicIndexing => {
            if !(device_features.shader_uniform_texel_buffer_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformTexelBufferArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_uniform_texel_buffer_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageTexelBufferArrayDynamicIndexing => {
            if !(device_features.shader_storage_texel_buffer_array_dynamic_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageTexelBufferArrayDynamicIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_texel_buffer_array_dynamic_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformBufferArrayNonUniformIndexing => {
            if !(device_features.shader_uniform_buffer_array_non_uniform_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformBufferArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_uniform_buffer_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SampledImageArrayNonUniformIndexing => {
            if !(device_features.shader_sampled_image_array_non_uniform_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SampledImageArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_sampled_image_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageBufferArrayNonUniformIndexing => {
            if !(device_features.shader_storage_buffer_array_non_uniform_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageBufferArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_buffer_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageImageArrayNonUniformIndexing => {
            if !(device_features.shader_storage_image_array_non_uniform_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageImageArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_image_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::InputAttachmentArrayNonUniformIndexing => {
            if !(device_features.shader_input_attachment_array_non_uniform_indexing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `InputAttachmentArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_input_attachment_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformTexelBufferArrayNonUniformIndexing => {
            if !(device_features.shader_uniform_texel_buffer_array_non_uniform_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformTexelBufferArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_uniform_texel_buffer_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageTexelBufferArrayNonUniformIndexing => {
            if !(device_features.shader_storage_texel_buffer_array_non_uniform_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageTexelBufferArrayNonUniformIndexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_storage_texel_buffer_array_non_uniform_indexing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentFullyCoveredEXT => {
            if !(device_extensions.ext_conservative_rasterization) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentFullyCoveredEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_conservative_rasterization",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Float16 => {
            if !(device_extensions.amd_gpu_shader_half_float
                || device_features.shader_float16)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Float16`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_gpu_shader_half_float",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_float16")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::Int8 => {
            if !(device_features.shader_int8) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `Int8`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_int8")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StorageBuffer8BitAccess => {
            if !(device_features.storage_buffer8_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StorageBuffer8BitAccess`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("storage_buffer8_bit_access"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::UniformAndStorageBuffer8BitAccess => {
            if !(device_features.uniform_and_storage_buffer8_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `UniformAndStorageBuffer8BitAccess`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "uniform_and_storage_buffer8_bit_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::StoragePushConstant8 => {
            if !(device_features.storage_push_constant8) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `StoragePushConstant8`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("storage_push_constant8")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::VulkanMemoryModel => {
            if !(device_features.vulkan_memory_model) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `VulkanMemoryModel`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("vulkan_memory_model")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::VulkanMemoryModelDeviceScope => {
            if !(device_features.vulkan_memory_model_device_scope) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `VulkanMemoryModelDeviceScope`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "vulkan_memory_model_device_scope",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DenormPreserve => {
            if !(device
                .physical_device()
                .properties()
                .shader_denorm_preserve_float16
                .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_denorm_preserve_float32
                    .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_denorm_preserve_float64
                    .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DenormPreserve`, but the device properties do not meet at least one of the requirements (`shader_denorm_preserve_float16` must be `true` or `shader_denorm_preserve_float32` must be `true` or `shader_denorm_preserve_float64` must be `true`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DenormFlushToZero => {
            if !(device
                .physical_device()
                .properties()
                .shader_denorm_flush_to_zero_float16
                .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_denorm_flush_to_zero_float32
                    .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_denorm_flush_to_zero_float64
                    .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DenormFlushToZero`, but the device properties do not meet at least one of the requirements (`shader_denorm_flush_to_zero_float16` must be `true` or `shader_denorm_flush_to_zero_float32` must be `true` or `shader_denorm_flush_to_zero_float64` must be `true`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::SignedZeroInfNanPreserve => {
            if !(device
                .physical_device()
                .properties()
                .shader_signed_zero_inf_nan_preserve_float16
                .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_signed_zero_inf_nan_preserve_float32
                    .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_signed_zero_inf_nan_preserve_float64
                    .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `SignedZeroInfNanPreserve`, but the device properties do not meet at least one of the requirements (`shader_signed_zero_inf_nan_preserve_float16` must be `true` or `shader_signed_zero_inf_nan_preserve_float32` must be `true` or `shader_signed_zero_inf_nan_preserve_float64` must be `true`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RoundingModeRTE => {
            if !(device
                .physical_device()
                .properties()
                .shader_rounding_mode_rte_float16
                .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_rounding_mode_rte_float32
                    .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_rounding_mode_rte_float64
                    .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RoundingModeRTE`, but the device properties do not meet at least one of the requirements (`shader_rounding_mode_rte_float16` must be `true` or `shader_rounding_mode_rte_float32` must be `true` or `shader_rounding_mode_rte_float64` must be `true`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RoundingModeRTZ => {
            if !(device
                .physical_device()
                .properties()
                .shader_rounding_mode_rtz_float16
                .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_rounding_mode_rtz_float32
                    .unwrap_or(false)
                || device
                    .physical_device()
                    .properties()
                    .shader_rounding_mode_rtz_float64
                    .unwrap_or(false))
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RoundingModeRTZ`, but the device properties do not meet at least one of the requirements (`shader_rounding_mode_rtz_float16` must be `true` or `shader_rounding_mode_rtz_float32` must be `true` or `shader_rounding_mode_rtz_float64` must be `true`)"
                            .into(),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ComputeDerivativeGroupQuadsNV => {
            if !(device_features.compute_derivative_group_quads) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ComputeDerivativeGroupQuadsNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "compute_derivative_group_quads",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ComputeDerivativeGroupLinearNV => {
            if !(device_features.compute_derivative_group_linear) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ComputeDerivativeGroupLinearNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "compute_derivative_group_linear",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentBarycentricKHR => {
            if !(device_features.fragment_shader_barycentric) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentBarycentricKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "fragment_shader_barycentric",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ImageFootprintNV => {
            if !(device_features.image_footprint) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ImageFootprintNV`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("image_footprint")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentDensityEXT => {
            if !(device_features.shading_rate_image
                || device_features.fragment_density_map)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentDensityEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shading_rate_image")],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("fragment_density_map")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::MeshShadingNV => {
            if !(device_extensions.nv_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `MeshShadingNV`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_mesh_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTracingKHR => {
            if !(device_features.ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTracingKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayQueryKHR => {
            if !(device_features.ray_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayQueryKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("ray_query")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTraversalPrimitiveCullingKHR => {
            if !(device_features.ray_query
                || device_features.ray_traversal_primitive_culling)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTraversalPrimitiveCullingKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("ray_query")],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "ray_traversal_primitive_culling",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayCullMaskKHR => {
            if !(device_features.ray_tracing_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayCullMaskKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("ray_tracing_maintenance1"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTracingNV => {
            if !(device_extensions.nv_ray_tracing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTracingNV`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_ray_tracing")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTracingMotionBlurNV => {
            if !(device_features.ray_tracing_motion_blur) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTracingMotionBlurNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("ray_tracing_motion_blur")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TransformFeedback => {
            if !(device_features.transform_feedback) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TransformFeedback`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("transform_feedback")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GeometryStreams => {
            if !(device_features.geometry_streams) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GeometryStreams`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("geometry_streams")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::PhysicalStorageBufferAddresses => {
            if !(device_features.buffer_device_address) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `PhysicalStorageBufferAddresses`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("buffer_device_address")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::CooperativeMatrixNV => {
            if !(device_features.cooperative_matrix) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `CooperativeMatrixNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("cooperative_matrix")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::IntegerFunctions2INTEL => {
            if !(device_features.shader_integer_functions2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `IntegerFunctions2INTEL`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_integer_functions2"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderSMBuiltinsNV => {
            if !(device_features.shader_sm_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderSMBuiltinsNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_sm_builtins")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentShaderSampleInterlockEXT => {
            if !(device_features.fragment_shader_sample_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentShaderSampleInterlockEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "fragment_shader_sample_interlock",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentShaderPixelInterlockEXT => {
            if !(device_features.fragment_shader_pixel_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentShaderPixelInterlockEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "fragment_shader_pixel_interlock",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentShaderShadingRateInterlockEXT => {
            if !(device_features.fragment_shader_shading_rate_interlock
                || device_features.shading_rate_image)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentShaderShadingRateInterlockEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "fragment_shader_shading_rate_interlock",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shading_rate_image")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DemoteToHelperInvocation => {
            if !(device_features.shader_demote_to_helper_invocation) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DemoteToHelperInvocation`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_demote_to_helper_invocation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FragmentShadingRateKHR => {
            if !(device_features.attachment_fragment_shading_rate
                || device_features.pipeline_fragment_shading_rate
                || device_features.primitive_fragment_shading_rate)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FragmentShadingRateKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "attachment_fragment_shading_rate",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "pipeline_fragment_shading_rate",
                                        ),
                                    ],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "primitive_fragment_shading_rate",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::WorkgroupMemoryExplicitLayoutKHR => {
            if !(device_features.workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `WorkgroupMemoryExplicitLayoutKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::WorkgroupMemoryExplicitLayout8BitAccessKHR => {
            if !(device_features.workgroup_memory_explicit_layout8_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `WorkgroupMemoryExplicitLayout8BitAccessKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "workgroup_memory_explicit_layout8_bit_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::WorkgroupMemoryExplicitLayout16BitAccessKHR => {
            if !(device_features.workgroup_memory_explicit_layout16_bit_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `WorkgroupMemoryExplicitLayout16BitAccessKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "workgroup_memory_explicit_layout16_bit_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DotProductInputAll => {
            if !(device_features.shader_integer_dot_product) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DotProductInputAll`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_integer_dot_product"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DotProductInput4x8Bit => {
            if !(device_features.shader_integer_dot_product) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DotProductInput4x8Bit`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_integer_dot_product"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DotProductInput4x8BitPacked => {
            if !(device_features.shader_integer_dot_product) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DotProductInput4x8BitPacked`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_integer_dot_product"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::DotProduct => {
            if !(device_features.shader_integer_dot_product) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `DotProduct`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_integer_dot_product"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TextureSampleWeightedQCOM => {
            if !(device_features.texture_sample_weighted) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TextureSampleWeightedQCOM`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("texture_sample_weighted")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TextureBoxFilterQCOM => {
            if !(device_features.texture_box_filter) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TextureBoxFilterQCOM`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("texture_box_filter")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TextureBlockMatchQCOM => {
            if !(device_features.texture_block_match) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TextureBlockMatchQCOM`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("texture_block_match")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TextureBlockMatch2QCOM => {
            if !(device_features.texture_block_match2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TextureBlockMatch2QCOM`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("texture_block_match2")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::MeshShadingEXT => {
            if !(device_extensions.ext_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `MeshShadingEXT`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTracingOpacityMicromapEXT => {
            if !(device_extensions.ext_opacity_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTracingOpacityMicromapEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("ext_opacity_micromap")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::CoreBuiltinsARM => {
            if !(device_features.shader_core_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `CoreBuiltinsARM`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_core_builtins")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderInvocationReorderNV => {
            if !(device_extensions.nv_ray_tracing_invocation_reorder) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderInvocationReorderNV`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_ray_tracing_invocation_reorder",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RayTracingPositionFetchKHR => {
            if !(device_features.ray_tracing_position_fetch) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RayTracingPositionFetchKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("ray_tracing_position_fetch"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TileImageColorReadAccessEXT => {
            if !(device_features.shader_tile_image_color_read_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TileImageColorReadAccessEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_tile_image_color_read_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TileImageDepthReadAccessEXT => {
            if !(device_features.shader_tile_image_depth_read_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TileImageDepthReadAccessEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_tile_image_depth_read_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::TileImageStencilReadAccessEXT => {
            if !(device_features.shader_tile_image_stencil_read_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `TileImageStencilReadAccessEXT`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature(
                                            "shader_tile_image_stencil_read_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::CooperativeMatrixKHR => {
            if !(device_features.cooperative_matrix) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `CooperativeMatrixKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("cooperative_matrix")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ShaderEnqueueAMDX => {
            if !(device_features.shader_enqueue) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ShaderEnqueueAMDX`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_enqueue")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::GroupNonUniformRotateKHR => {
            if !(device_features.shader_subgroup_rotate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `GroupNonUniformRotateKHR`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_subgroup_rotate")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::ExpectAssumeKHR => {
            if !(device_features.shader_expect_assume) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `ExpectAssumeKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_expect_assume")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::FloatControls2 => {
            if !(device_features.shader_float_controls2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `FloatControls2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_float_controls2")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::QuadControlKHR => {
            if !(device_features.shader_quad_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `QuadControlKHR`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceFeature("shader_quad_control")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        Capability::RawAccessChainsNV => {
            if !(device_features.shader_raw_access_chains) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V capability `RawAccessChainsNV`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceFeature("shader_raw_access_chains"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08742"],
                        ..Default::default()
                    }),
                );
            }
        }
        _ => {
            return Err(
                Box::new(crate::ValidationError {
                    problem: format!(
                        "uses the SPIR-V capability `{item:?}`, which is not supported by Vulkan"
                    )
                        .into(),
                    vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08741"],
                    ..Default::default()
                }),
            );
        }
    }
    Ok(())
}
fn validate_spirv_extension(
    device: &Device,
    item: &str,
) -> Result<(), Box<ValidationError>> {
    #[allow(unused_variables)]
    let api_version = device.api_version();
    #[allow(unused_variables)]
    let device_extensions = device.enabled_extensions();
    #[allow(unused_variables)]
    let device_features = device.enabled_features();
    #[allow(unused_variables)]
    let properties = device.physical_device().properties();
    match item {
        "SPV_KHR_variable_pointers" => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_variable_pointers)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_variable_pointers`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_variable_pointers")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_explicit_vertex_parameter" => {
            if !(device_extensions.amd_shader_explicit_vertex_parameter) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_explicit_vertex_parameter`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_shader_explicit_vertex_parameter",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_gcn_shader" => {
            if !(device_extensions.amd_gcn_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_gcn_shader`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("amd_gcn_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_gpu_shader_half_float" => {
            if !(device_extensions.amd_gpu_shader_half_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_gpu_shader_half_float`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_gpu_shader_half_float",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_gpu_shader_int16" => {
            if !(device_extensions.amd_gpu_shader_int16) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_gpu_shader_int16`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("amd_gpu_shader_int16")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_ballot" => {
            if !(device_extensions.amd_shader_ballot) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_ballot`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("amd_shader_ballot")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_fragment_mask" => {
            if !(device_extensions.amd_shader_fragment_mask) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_fragment_mask`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("amd_shader_fragment_mask"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_image_load_store_lod" => {
            if !(device_extensions.amd_shader_image_load_store_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_image_load_store_lod`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_shader_image_load_store_lod",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_trinary_minmax" => {
            if !(device_extensions.amd_shader_trinary_minmax) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_trinary_minmax`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_shader_trinary_minmax",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_texture_gather_bias_lod" => {
            if !(device_extensions.amd_texture_gather_bias_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_texture_gather_bias_lod`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_texture_gather_bias_lod",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMD_shader_early_and_late_fragment_tests" => {
            if !(device_extensions.amd_shader_early_and_late_fragment_tests) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMD_shader_early_and_late_fragment_tests`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "amd_shader_early_and_late_fragment_tests",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_shader_draw_parameters" => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_shader_draw_parameters)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_shader_draw_parameters`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_draw_parameters",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_8bit_storage" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.khr_8bit_storage)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_8bit_storage`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_8bit_storage")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_16bit_storage" => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_16bit_storage)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_16bit_storage`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_16bit_storage")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_shader_clock" => {
            if !(device_extensions.khr_shader_clock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_shader_clock`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_shader_clock")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_float_controls" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.khr_shader_float_controls)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_float_controls`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_float_controls",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_storage_buffer_storage_class" => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_storage_buffer_storage_class)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_storage_buffer_storage_class`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_storage_buffer_storage_class",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_post_depth_coverage" => {
            if !(device_extensions.ext_post_depth_coverage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_post_depth_coverage`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_post_depth_coverage"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_stencil_export" => {
            if !(device_extensions.ext_shader_stencil_export) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_stencil_export`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_stencil_export",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_shader_ballot" => {
            if !(device_extensions.ext_shader_subgroup_ballot) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_shader_ballot`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_subgroup_ballot",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_subgroup_vote" => {
            if !(device_extensions.ext_shader_subgroup_vote) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_subgroup_vote`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_shader_subgroup_vote"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_sample_mask_override_coverage" => {
            if !(device_extensions.nv_sample_mask_override_coverage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_sample_mask_override_coverage`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_sample_mask_override_coverage",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_geometry_shader_passthrough" => {
            if !(device_extensions.nv_geometry_shader_passthrough) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_geometry_shader_passthrough`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_geometry_shader_passthrough",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_mesh_shader" => {
            if !(device_extensions.nv_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_mesh_shader`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_mesh_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_viewport_array2" => {
            if !(device_extensions.nv_viewport_array2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_viewport_array2`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_viewport_array2")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shader_subgroup_partitioned" => {
            if !(device_extensions.nv_shader_subgroup_partitioned) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shader_subgroup_partitioned`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_shader_subgroup_partitioned",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shader_invocation_reorder" => {
            if !(device_extensions.nv_ray_tracing_invocation_reorder) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shader_invocation_reorder`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_ray_tracing_invocation_reorder",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_viewport_index_layer" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.ext_shader_viewport_index_layer)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_viewport_index_layer`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_viewport_index_layer",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NVX_multiview_per_view_attributes" => {
            if !(device_extensions.nvx_multiview_per_view_attributes) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NVX_multiview_per_view_attributes`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nvx_multiview_per_view_attributes",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_descriptor_indexing" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_descriptor_indexing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_descriptor_indexing"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_vulkan_memory_model" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_vulkan_memory_model`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("khr_vulkan_memory_model"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_compute_shader_derivatives" => {
            if !(device_extensions.nv_compute_shader_derivatives) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_compute_shader_derivatives`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_compute_shader_derivatives",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_fragment_shader_barycentric" => {
            if !(device_extensions.nv_fragment_shader_barycentric) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_fragment_shader_barycentric`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_fragment_shader_barycentric",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shader_image_footprint" => {
            if !(device_extensions.nv_shader_image_footprint) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shader_image_footprint`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_shader_image_footprint",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shading_rate" => {
            if !(device_extensions.nv_shading_rate_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shading_rate`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_shading_rate_image")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_ray_tracing" => {
            if !(device_extensions.nv_ray_tracing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_ray_tracing`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_ray_tracing")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_ray_tracing" => {
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_ray_tracing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("khr_ray_tracing_pipeline"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_ray_query" => {
            if !(device_extensions.khr_ray_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_ray_query`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_ray_query")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_ray_cull_mask" => {
            if !(device_extensions.khr_ray_tracing_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_ray_cull_mask`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_ray_tracing_maintenance1",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_GOOGLE_hlsl_functionality1" => {
            if !(device_extensions.google_hlsl_functionality1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_GOOGLE_hlsl_functionality1`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "google_hlsl_functionality1",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_GOOGLE_user_type" => {
            if !(device_extensions.google_user_type) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_GOOGLE_user_type`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("google_user_type")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_GOOGLE_decorate_string" => {
            if !(device_extensions.google_decorate_string) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_GOOGLE_decorate_string`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("google_decorate_string"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_fragment_invocation_density" => {
            if !(device_extensions.ext_fragment_density_map) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_fragment_invocation_density`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_fragment_density_map"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_physical_storage_buffer" => {
            if !(api_version >= crate::Version::V1_2
                || device_extensions.khr_buffer_device_address)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_physical_storage_buffer`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_2)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_buffer_device_address",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_physical_storage_buffer" => {
            if !(device_extensions.ext_buffer_device_address) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_physical_storage_buffer`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_buffer_device_address",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_cooperative_matrix" => {
            if !(device_extensions.nv_cooperative_matrix) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_cooperative_matrix`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_cooperative_matrix")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shader_sm_builtins" => {
            if !(device_extensions.nv_shader_sm_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shader_sm_builtins`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_shader_sm_builtins")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_fragment_shader_interlock" => {
            if !(device_extensions.ext_fragment_shader_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_fragment_shader_interlock`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_fragment_shader_interlock",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_demote_to_helper_invocation" => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.ext_shader_demote_to_helper_invocation)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_demote_to_helper_invocation`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_demote_to_helper_invocation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_fragment_shading_rate" => {
            if !(device_extensions.khr_fragment_shading_rate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_fragment_shading_rate`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_fragment_shading_rate",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_non_semantic_info" => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_shader_non_semantic_info)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_non_semantic_info`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_non_semantic_info",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_image_int64" => {
            if !(device_extensions.ext_shader_image_atomic_int64) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_image_int64`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_shader_image_atomic_int64",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_terminate_invocation" => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_shader_terminate_invocation)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_terminate_invocation`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_terminate_invocation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_multiview" => {
            if !(api_version >= crate::Version::V1_1 || device_extensions.khr_multiview)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_multiview`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_multiview")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_workgroup_memory_explicit_layout" => {
            if !(device_extensions.khr_workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_workgroup_memory_explicit_layout`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_atomic_float_add" => {
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_atomic_float_add`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_shader_atomic_float"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_fragment_shader_barycentric" => {
            if !(device_extensions.khr_fragment_shader_barycentric) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_fragment_shader_barycentric`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_fragment_shader_barycentric",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_subgroup_uniform_control_flow" => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_shader_subgroup_uniform_control_flow)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_subgroup_uniform_control_flow`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_subgroup_uniform_control_flow",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_atomic_float_min_max" => {
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_atomic_float_min_max`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_shader_atomic_float2"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_atomic_float16_add" => {
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_atomic_float16_add`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("ext_shader_atomic_float2"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_shader_atomic_fp16_vector" => {
            if !(device_extensions.nv_shader_atomic_float16_vector) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_shader_atomic_fp16_vector`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_shader_atomic_float16_vector",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_fragment_fully_covered" => {
            if !(device_extensions.ext_conservative_rasterization) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_fragment_fully_covered`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "ext_conservative_rasterization",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_integer_dot_product" => {
            if !(api_version >= crate::Version::V1_3
                || device_extensions.khr_shader_integer_dot_product)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_integer_dot_product`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_integer_dot_product",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_INTEL_shader_integer_functions2" => {
            if !(device_extensions.intel_shader_integer_functions2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_INTEL_shader_integer_functions2`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "intel_shader_integer_functions2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_device_group" => {
            if !(api_version >= crate::Version::V1_1
                || device_extensions.khr_device_group)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_device_group`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("khr_device_group")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_QCOM_image_processing" => {
            if !(device_extensions.qcom_image_processing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_QCOM_image_processing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("qcom_image_processing")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_QCOM_image_processing2" => {
            if !(device_extensions.qcom_image_processing2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_QCOM_image_processing2`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("qcom_image_processing2"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_mesh_shader" => {
            if !(device_extensions.ext_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_mesh_shader`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_ray_tracing_position_fetch" => {
            if !(device_extensions.khr_ray_tracing_position_fetch) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_ray_tracing_position_fetch`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_ray_tracing_position_fetch",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_shader_tile_image" => {
            if !(device_extensions.ext_shader_tile_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_shader_tile_image`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("ext_shader_tile_image")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_EXT_opacity_micromap" => {
            if !(device_extensions.ext_opacity_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_EXT_opacity_micromap`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("ext_opacity_micromap")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_cooperative_matrix" => {
            if !(device_extensions.khr_cooperative_matrix) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_cooperative_matrix`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("khr_cooperative_matrix"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_ARM_core_builtins" => {
            if !(device_extensions.arm_shader_core_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_ARM_core_builtins`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("arm_shader_core_builtins"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_AMDX_shader_enqueue" => {
            if !(device_extensions.amdx_shader_enqueue) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_AMDX_shader_enqueue`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("amdx_shader_enqueue")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_HUAWEI_cluster_culling_shader" => {
            if !(device_extensions.huawei_cluster_culling_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_HUAWEI_cluster_culling_shader`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "huawei_cluster_culling_shader",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_HUAWEI_subpass_shading" => {
            if !(device_extensions.huawei_subpass_shading) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_HUAWEI_subpass_shading`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("huawei_subpass_shading"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_ray_tracing_motion_blur" => {
            if !(device_extensions.nv_ray_tracing_motion_blur) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_ray_tracing_motion_blur`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "nv_ray_tracing_motion_blur",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_maximal_reconvergence" => {
            if !(device_extensions.khr_shader_maximal_reconvergence) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_maximal_reconvergence`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_maximal_reconvergence",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_subgroup_rotate" => {
            if !(device_extensions.khr_shader_subgroup_rotate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_subgroup_rotate`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_subgroup_rotate",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_expect_assume" => {
            if !(device_extensions.khr_shader_expect_assume) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_expect_assume`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("khr_shader_expect_assume"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_float_controls2" => {
            if !(device_extensions.khr_shader_float_controls2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_float_controls2`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension(
                                            "khr_shader_float_controls2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_KHR_quad_control" => {
            if !(device_extensions.khr_shader_quad_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_KHR_quad_control`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::DeviceExtension("khr_shader_quad_control"),
                                    ],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        "SPV_NV_raw_access_chains" => {
            if !(device_extensions.nv_raw_access_chains) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "uses the SPIR-V extension `SPV_NV_raw_access_chains`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::DeviceExtension("nv_raw_access_chains")],
                                ),
                            ],
                        ),
                        vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08740"],
                        ..Default::default()
                    }),
                );
            }
        }
        _ => {
            return Err(
                Box::new(crate::ValidationError {
                    problem: format!(
                        "uses the SPIR-V extension `{item:?}`, which is not supported by Vulkan"
                    )
                        .into(),
                    vuids: &["VUID-VkShaderModuleCreateInfo-pCode-08739"],
                    ..Default::default()
                }),
            );
        }
    }
    Ok(())
}
