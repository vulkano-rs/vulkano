// This file is auto-generated by vulkano autogen from vk.xml header version 1.3.281.
// It should not be edited manually. Changes should be made by editing autogen.


///List of device extensions that are enabled or available.
#[derive(Copy, Clone, PartialEq, Eq)]
#[repr(C)]
pub struct DeviceExtensions {
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_16bit_storage.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_storage_buffer_storage_class`](DeviceExtensions::khr_storage_buffer_storage_class)
    pub khr_16bit_storage: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_8bit_storage.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_storage_buffer_storage_class`](DeviceExtensions::khr_storage_buffer_storage_class)
    pub khr_8bit_storage: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_acceleration_structure.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.2 or device extension [`ext_descriptor_indexing`](DeviceExtensions::ext_descriptor_indexing)
    ///  - Vulkan API version 1.2 or device extension [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    ///  - Device extension [`khr_deferred_host_operations`](DeviceExtensions::khr_deferred_host_operations)
    pub khr_acceleration_structure: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_bind_memory2.html)
    ///- Promoted to Vulkan 1.1
    pub khr_bind_memory2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_buffer_device_address.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_device_group`](DeviceExtensions::khr_device_group)
    pub khr_buffer_device_address: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_calibrated_timestamps.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_calibrated_timestamps: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_cooperative_matrix.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_cooperative_matrix: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_copy_commands2.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_copy_commands2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_create_renderpass2.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_multiview`](DeviceExtensions::khr_multiview)
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance2`](DeviceExtensions::khr_maintenance2)
    pub khr_create_renderpass2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_dedicated_allocation.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_get_memory_requirements2`](DeviceExtensions::khr_get_memory_requirements2)
    pub khr_dedicated_allocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_deferred_host_operations.html)
    pub khr_deferred_host_operations: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_depth_stencil_resolve.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.2 or device extension [`khr_create_renderpass2`](DeviceExtensions::khr_create_renderpass2)
    pub khr_depth_stencil_resolve: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_descriptor_update_template.html)
    ///- Promoted to Vulkan 1.1
    pub khr_descriptor_update_template: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_device_group.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_device_group_creation`](InstanceExtensions::khr_device_group_creation)
    pub khr_device_group: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_display_swapchain.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Instance extension [`khr_display`](InstanceExtensions::khr_display)
    pub khr_display_swapchain: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_draw_indirect_count.html)
    ///- Promoted to Vulkan 1.2
    pub khr_draw_indirect_count: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_driver_properties.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_driver_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_dynamic_rendering.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_depth_stencil_resolve`](DeviceExtensions::khr_depth_stencil_resolve)
    pub khr_dynamic_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_dynamic_rendering_local_read.html)
    ///- Requires:
    ///  - Vulkan API version 1.3 or device extension [`khr_dynamic_rendering`](DeviceExtensions::khr_dynamic_rendering)
    pub khr_dynamic_rendering_local_read: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_fence.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_external_fence_capabilities`](InstanceExtensions::khr_external_fence_capabilities)
    pub khr_external_fence: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_fence_fd.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_fence`](DeviceExtensions::khr_external_fence)
    pub khr_external_fence_fd: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_fence_win32.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_fence`](DeviceExtensions::khr_external_fence)
    pub khr_external_fence_win32: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_memory.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_external_memory_capabilities`](InstanceExtensions::khr_external_memory_capabilities)
    pub khr_external_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_memory_fd.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub khr_external_memory_fd: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_memory_win32.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub khr_external_memory_win32: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_semaphore.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_external_semaphore_capabilities`](InstanceExtensions::khr_external_semaphore_capabilities)
    pub khr_external_semaphore: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_semaphore_fd.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_semaphore`](DeviceExtensions::khr_external_semaphore)
    pub khr_external_semaphore_fd: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_external_semaphore_win32.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_semaphore`](DeviceExtensions::khr_external_semaphore)
    pub khr_external_semaphore_win32: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_format_feature_flags2.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_format_feature_flags2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_fragment_shader_barycentric.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_fragment_shader_barycentric: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_fragment_shading_rate.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_create_renderpass2`](DeviceExtensions::khr_create_renderpass2)
    pub khr_fragment_shading_rate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_get_memory_requirements2.html)
    ///- Promoted to Vulkan 1.1
    pub khr_get_memory_requirements2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_global_priority.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_global_priority: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_image_format_list.html)
    ///- Promoted to Vulkan 1.2
    pub khr_image_format_list: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_imageless_framebuffer.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance2`](DeviceExtensions::khr_maintenance2)
    ///  - Vulkan API version 1.2 or device extension [`khr_image_format_list`](DeviceExtensions::khr_image_format_list)
    pub khr_imageless_framebuffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_incremental_present.html)
    ///- Requires:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub khr_incremental_present: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_index_type_uint8.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_index_type_uint8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_line_rasterization.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_line_rasterization: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_load_store_op_none.html)
    pub khr_load_store_op_none: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance1.html)
    ///- Promoted to Vulkan 1.1
    pub khr_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance2.html)
    ///- Promoted to Vulkan 1.1
    pub khr_maintenance2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance3.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_maintenance3: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance4.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub khr_maintenance4: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance5.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.3 or device extension [`khr_dynamic_rendering`](DeviceExtensions::khr_dynamic_rendering)
    pub khr_maintenance5: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_maintenance6.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub khr_maintenance6: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_map_memory2.html)
    pub khr_map_memory2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_multiview.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_multiview: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_performance_query.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_performance_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_pipeline_executable_properties.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_pipeline_executable_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_pipeline_library.html)
    pub khr_pipeline_library: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_portability_subset.html)
    ///- Must be enabled if it is supported by the physical device
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_portability_subset: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_present_id.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_present_id: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_present_wait.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Device extension [`khr_present_id`](DeviceExtensions::khr_present_id)
    pub khr_present_wait: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_push_descriptor.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_push_descriptor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_ray_query.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.2 or device extension [`khr_spirv_1_4`](DeviceExtensions::khr_spirv_1_4)
    ///  - Device extension [`khr_acceleration_structure`](DeviceExtensions::khr_acceleration_structure)
    pub khr_ray_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_ray_tracing_maintenance1.html)
    ///- Requires:
    ///  - Device extension [`khr_acceleration_structure`](DeviceExtensions::khr_acceleration_structure)
    pub khr_ray_tracing_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_ray_tracing_pipeline.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.2 or device extension [`khr_spirv_1_4`](DeviceExtensions::khr_spirv_1_4)
    ///  - Device extension [`khr_acceleration_structure`](DeviceExtensions::khr_acceleration_structure)
    pub khr_ray_tracing_pipeline: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_ray_tracing_position_fetch.html)
    ///- Requires:
    ///  - Device extension [`khr_acceleration_structure`](DeviceExtensions::khr_acceleration_structure)
    pub khr_ray_tracing_position_fetch: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_relaxed_block_layout.html)
    ///- Promoted to Vulkan 1.1
    pub khr_relaxed_block_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_sampler_mirror_clamp_to_edge.html)
    ///- Promoted to Vulkan 1.2
    pub khr_sampler_mirror_clamp_to_edge: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_sampler_ycbcr_conversion.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance1`](DeviceExtensions::khr_maintenance1)
    ///  - Vulkan API version 1.1 or device extension [`khr_bind_memory2`](DeviceExtensions::khr_bind_memory2)
    ///  - Vulkan API version 1.1 or device extension [`khr_get_memory_requirements2`](DeviceExtensions::khr_get_memory_requirements2)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_sampler_ycbcr_conversion: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_separate_depth_stencil_layouts.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_create_renderpass2`](DeviceExtensions::khr_create_renderpass2)
    pub khr_separate_depth_stencil_layouts: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_atomic_int64.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_atomic_int64: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_clock.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_clock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_draw_parameters.html)
    ///- Promoted to Vulkan 1.1
    pub khr_shader_draw_parameters: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_expect_assume.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_expect_assume: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_float16_int8.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_float16_int8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_float_controls.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_float_controls: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_float_controls2.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.2 or device extension [`khr_shader_float_controls`](DeviceExtensions::khr_shader_float_controls)
    pub khr_shader_float_controls2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_integer_dot_product.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_integer_dot_product: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_maximal_reconvergence.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub khr_shader_maximal_reconvergence: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_non_semantic_info.html)
    ///- Promoted to Vulkan 1.3
    pub khr_shader_non_semantic_info: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_quad_control.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.2 or device extension [`khr_vulkan_memory_model`](DeviceExtensions::khr_vulkan_memory_model)
    ///  - Device extension [`khr_shader_maximal_reconvergence`](DeviceExtensions::khr_shader_maximal_reconvergence)
    pub khr_shader_quad_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_subgroup_extended_types.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub khr_shader_subgroup_extended_types: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_subgroup_rotate.html)
    pub khr_shader_subgroup_rotate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_subgroup_uniform_control_flow.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub khr_shader_subgroup_uniform_control_flow: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shader_terminate_invocation.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shader_terminate_invocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_shared_presentable_image.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Instance extension [`khr_get_surface_capabilities2`](InstanceExtensions::khr_get_surface_capabilities2)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_shared_presentable_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_spirv_1_4.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.2 or device extension [`khr_shader_float_controls`](DeviceExtensions::khr_shader_float_controls)
    pub khr_spirv_1_4: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_storage_buffer_storage_class.html)
    ///- Promoted to Vulkan 1.1
    pub khr_storage_buffer_storage_class: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_swapchain.html)
    ///- Requires:
    ///  - Instance extension [`khr_surface`](InstanceExtensions::khr_surface)
    pub khr_swapchain: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_swapchain_mutable_format.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance2`](DeviceExtensions::khr_maintenance2)
    ///  - Vulkan API version 1.2 or device extension [`khr_image_format_list`](DeviceExtensions::khr_image_format_list)
    pub khr_swapchain_mutable_format: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_synchronization2.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_synchronization2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_timeline_semaphore.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_timeline_semaphore: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_uniform_buffer_standard_layout.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_uniform_buffer_standard_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_variable_pointers.html)
    ///- Promoted to Vulkan 1.1
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_storage_buffer_storage_class`](DeviceExtensions::khr_storage_buffer_storage_class)
    pub khr_variable_pointers: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_vertex_attribute_divisor.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_vertex_attribute_divisor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_decode_av1.html)
    ///- Requires:
    ///  - Device extension [`khr_video_decode_queue`](DeviceExtensions::khr_video_decode_queue)
    pub khr_video_decode_av1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_decode_h264.html)
    ///- Requires:
    ///  - Device extension [`khr_video_decode_queue`](DeviceExtensions::khr_video_decode_queue)
    pub khr_video_decode_h264: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_decode_h265.html)
    ///- Requires:
    ///  - Device extension [`khr_video_decode_queue`](DeviceExtensions::khr_video_decode_queue)
    pub khr_video_decode_h265: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_decode_queue.html)
    ///- Requires all of:
    ///  - Device extension [`khr_video_queue`](DeviceExtensions::khr_video_queue)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub khr_video_decode_queue: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_encode_h264.html)
    ///- Requires:
    ///  - Device extension [`khr_video_encode_queue`](DeviceExtensions::khr_video_encode_queue)
    pub khr_video_encode_h264: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_encode_h265.html)
    ///- Requires:
    ///  - Device extension [`khr_video_encode_queue`](DeviceExtensions::khr_video_encode_queue)
    pub khr_video_encode_h265: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_encode_queue.html)
    ///- Requires all of:
    ///  - Device extension [`khr_video_queue`](DeviceExtensions::khr_video_queue)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub khr_video_encode_queue: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_maintenance1.html)
    ///- Requires:
    ///  - Device extension [`khr_video_queue`](DeviceExtensions::khr_video_queue)
    pub khr_video_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_video_queue.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub khr_video_queue: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_vulkan_memory_model.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_vulkan_memory_model: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_win32_keyed_mutex.html)
    ///- Requires:
    ///  - Device extension [`khr_external_memory_win32`](DeviceExtensions::khr_external_memory_win32)
    pub khr_win32_keyed_mutex: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_workgroup_memory_explicit_layout.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_workgroup_memory_explicit_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_zero_initialize_workgroup_memory.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub khr_zero_initialize_workgroup_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_4444_formats.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_4444_formats: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_astc_decode_mode.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_astc_decode_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_attachment_feedback_loop_dynamic_state.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Device extension [`ext_attachment_feedback_loop_layout`](DeviceExtensions::ext_attachment_feedback_loop_layout)
    pub ext_attachment_feedback_loop_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_attachment_feedback_loop_layout.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_attachment_feedback_loop_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_blend_operation_advanced.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_blend_operation_advanced: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_border_color_swizzle.html)
    ///- Requires:
    ///  - Device extension [`ext_custom_border_color`](DeviceExtensions::ext_custom_border_color)
    pub ext_border_color_swizzle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_buffer_device_address.html)
    ///- Deprecated by [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_buffer_device_address: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_calibrated_timestamps.html)
    ///- Promoted to [`khr_calibrated_timestamps`](DeviceExtensions::khr_calibrated_timestamps)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_calibrated_timestamps: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_color_write_enable.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_color_write_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_conditional_rendering.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_conditional_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_conservative_rasterization.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_conservative_rasterization: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_custom_border_color.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_custom_border_color: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_debug_marker.html)
    ///- Promoted to [`ext_debug_utils`](InstanceExtensions::ext_debug_utils)
    ///- Requires:
    ///  - Instance extension [`ext_debug_report`](InstanceExtensions::ext_debug_report)
    pub ext_debug_marker: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_bias_control.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_depth_bias_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_clamp_zero_one.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_depth_clamp_zero_one: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_clip_control.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_depth_clip_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_clip_enable.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_depth_clip_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_depth_range_unrestricted.html)
    pub ext_depth_range_unrestricted: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_descriptor_buffer.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    ///  - Vulkan API version 1.2 or device extension [`ext_descriptor_indexing`](DeviceExtensions::ext_descriptor_indexing)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub ext_descriptor_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_descriptor_indexing.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance3`](DeviceExtensions::khr_maintenance3)
    pub ext_descriptor_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_device_address_binding_report.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Instance extension [`ext_debug_utils`](InstanceExtensions::ext_debug_utils)
    pub ext_device_address_binding_report: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_device_fault.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_device_fault: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_device_memory_report.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_device_memory_report: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_discard_rectangles.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_discard_rectangles: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_display_control.html)
    ///- Requires all of:
    ///  - Instance extension [`ext_display_surface_counter`](InstanceExtensions::ext_display_surface_counter)
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub ext_display_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_dynamic_rendering_unused_attachments.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_dynamic_rendering`](DeviceExtensions::khr_dynamic_rendering)
    pub ext_dynamic_rendering_unused_attachments: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_extended_dynamic_state.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_extended_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_extended_dynamic_state2.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_extended_dynamic_state2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_extended_dynamic_state3.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_extended_dynamic_state3: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_external_memory_acquire_unmodified.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub ext_external_memory_acquire_unmodified: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_external_memory_dma_buf.html)
    ///- Requires:
    ///  - Device extension [`khr_external_memory_fd`](DeviceExtensions::khr_external_memory_fd)
    pub ext_external_memory_dma_buf: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_external_memory_host.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub ext_external_memory_host: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_filter_cubic.html)
    pub ext_filter_cubic: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_fragment_density_map.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_fragment_density_map: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_fragment_density_map2.html)
    ///- Requires:
    ///  - Device extension [`ext_fragment_density_map`](DeviceExtensions::ext_fragment_density_map)
    pub ext_fragment_density_map2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_fragment_shader_interlock.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_fragment_shader_interlock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_frame_boundary.html)
    pub ext_frame_boundary: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_full_screen_exclusive.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Instance extension [`khr_surface`](InstanceExtensions::khr_surface)
    ///  - Instance extension [`khr_get_surface_capabilities2`](InstanceExtensions::khr_get_surface_capabilities2)
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub ext_full_screen_exclusive: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_global_priority.html)
    ///- Promoted to [`khr_global_priority`](DeviceExtensions::khr_global_priority)
    pub ext_global_priority: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_global_priority_query.html)
    ///- Promoted to [`khr_global_priority`](DeviceExtensions::khr_global_priority)
    ///- Requires all of:
    ///  - Device extension [`khr_global_priority`](DeviceExtensions::khr_global_priority) or device extension [`ext_global_priority`](DeviceExtensions::ext_global_priority)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_global_priority_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_graphics_pipeline_library.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Device extension [`khr_pipeline_library`](DeviceExtensions::khr_pipeline_library)
    pub ext_graphics_pipeline_library: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_hdr_metadata.html)
    ///- Requires:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub ext_hdr_metadata: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_host_image_copy.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_copy_commands2`](DeviceExtensions::khr_copy_commands2)
    ///  - Vulkan API version 1.3 or device extension [`khr_format_feature_flags2`](DeviceExtensions::khr_format_feature_flags2)
    pub ext_host_image_copy: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_host_query_reset.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_host_query_reset: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_2d_view_of_3d.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance1`](DeviceExtensions::khr_maintenance1)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_image_2d_view_of_3d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_compression_control.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_image_compression_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_compression_control_swapchain.html)
    ///- Requires:
    ///  - Device extension [`ext_image_compression_control`](DeviceExtensions::ext_image_compression_control)
    pub ext_image_compression_control_swapchain: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_drm_format_modifier.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_bind_memory2`](DeviceExtensions::khr_bind_memory2)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    ///  - Vulkan API version 1.2 or device extension [`khr_image_format_list`](DeviceExtensions::khr_image_format_list)
    pub ext_image_drm_format_modifier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_robustness.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_image_robustness: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_sliced_view_of_3d.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance1`](DeviceExtensions::khr_maintenance1)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_image_sliced_view_of_3d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_image_view_min_lod.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_image_view_min_lod: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_index_type_uint8.html)
    ///- Promoted to [`khr_index_type_uint8`](DeviceExtensions::khr_index_type_uint8)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_index_type_uint8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_inline_uniform_block.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance1`](DeviceExtensions::khr_maintenance1)
    pub ext_inline_uniform_block: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_legacy_dithering.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_legacy_dithering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_line_rasterization.html)
    ///- Promoted to [`khr_line_rasterization`](DeviceExtensions::khr_line_rasterization)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_line_rasterization: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_load_store_op_none.html)
    ///- Promoted to [`khr_load_store_op_none`](DeviceExtensions::khr_load_store_op_none)
    pub ext_load_store_op_none: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_map_memory_placed.html)
    ///- Requires:
    ///  - Device extension [`khr_map_memory2`](DeviceExtensions::khr_map_memory2)
    pub ext_map_memory_placed: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_memory_budget.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_memory_budget: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_memory_priority.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_memory_priority: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_mesh_shader.html)
    ///- Requires:
    ///  - Vulkan API version 1.2 or device extension [`khr_spirv_1_4`](DeviceExtensions::khr_spirv_1_4)
    pub ext_mesh_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_metal_objects.html)
    pub ext_metal_objects: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_multi_draw.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_multi_draw: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_multisampled_render_to_single_sampled.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.2 or device extension [`khr_create_renderpass2`](DeviceExtensions::khr_create_renderpass2)
    ///  - Vulkan API version 1.2 or device extension [`khr_depth_stencil_resolve`](DeviceExtensions::khr_depth_stencil_resolve)
    pub ext_multisampled_render_to_single_sampled: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_mutable_descriptor_type.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance3`](DeviceExtensions::khr_maintenance3)
    pub ext_mutable_descriptor_type: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_nested_command_buffer.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_nested_command_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_non_seamless_cube_map.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_non_seamless_cube_map: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_opacity_micromap.html)
    ///- Requires all of:
    ///  - Device extension [`khr_acceleration_structure`](DeviceExtensions::khr_acceleration_structure)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub ext_opacity_micromap: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pageable_device_local_memory.html)
    ///- Requires:
    ///  - Device extension [`ext_memory_priority`](DeviceExtensions::ext_memory_priority)
    pub ext_pageable_device_local_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pci_bus_info.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_pci_bus_info: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_physical_device_drm.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_physical_device_drm: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_creation_cache_control.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_pipeline_creation_cache_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_creation_feedback.html)
    ///- Promoted to Vulkan 1.3
    pub ext_pipeline_creation_feedback: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_library_group_handles.html)
    ///- Requires all of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](DeviceExtensions::khr_ray_tracing_pipeline)
    ///  - Device extension [`khr_pipeline_library`](DeviceExtensions::khr_pipeline_library)
    pub ext_pipeline_library_group_handles: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_properties.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_pipeline_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_protected_access.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_pipeline_protected_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_pipeline_robustness.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_pipeline_robustness: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_post_depth_coverage.html)
    pub ext_post_depth_coverage: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_primitive_topology_list_restart.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_primitive_topology_list_restart: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_primitives_generated_query.html)
    ///- Requires:
    ///  - Device extension [`ext_transform_feedback`](DeviceExtensions::ext_transform_feedback)
    pub ext_primitives_generated_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_private_data.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_private_data: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_provoking_vertex.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_provoking_vertex: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_queue_family_foreign.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub ext_queue_family_foreign: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_rasterization_order_attachment_access.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_rasterization_order_attachment_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_rgba10x6_formats.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    pub ext_rgba10x6_formats: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_robustness2.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_robustness2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_sample_locations.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_sample_locations: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_sampler_filter_minmax.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_sampler_filter_minmax: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_scalar_block_layout.html)
    ///- Promoted to Vulkan 1.2
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_scalar_block_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_separate_stencil_usage.html)
    ///- Promoted to Vulkan 1.2
    pub ext_separate_stencil_usage: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_atomic_float.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_shader_atomic_float: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_atomic_float2.html)
    ///- Requires:
    ///  - Device extension [`ext_shader_atomic_float`](DeviceExtensions::ext_shader_atomic_float)
    pub ext_shader_atomic_float2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_demote_to_helper_invocation.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_shader_demote_to_helper_invocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_image_atomic_int64.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_shader_image_atomic_int64: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_module_identifier.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`ext_pipeline_creation_cache_control`](DeviceExtensions::ext_pipeline_creation_cache_control)
    pub ext_shader_module_identifier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_object.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_dynamic_rendering`](DeviceExtensions::khr_dynamic_rendering)
    pub ext_shader_object: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_stencil_export.html)
    pub ext_shader_stencil_export: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_subgroup_ballot.html)
    ///- Deprecated by Vulkan 1.2
    pub ext_shader_subgroup_ballot: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_subgroup_vote.html)
    ///- Deprecated by Vulkan 1.1
    pub ext_shader_subgroup_vote: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_tile_image.html)
    ///- Requires:
    ///  - Vulkan API version 1.3
    pub ext_shader_tile_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_shader_viewport_index_layer.html)
    ///- Promoted to Vulkan 1.2
    pub ext_shader_viewport_index_layer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_subgroup_size_control.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub ext_subgroup_size_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_subpass_merge_feedback.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_subpass_merge_feedback: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_swapchain_maintenance1.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Instance extension [`ext_surface_maintenance1`](InstanceExtensions::ext_surface_maintenance1)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_swapchain_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_texel_buffer_alignment.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_texel_buffer_alignment: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_texture_compression_astc_hdr.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_texture_compression_astc_hdr: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_tooling_info.html)
    ///- Promoted to Vulkan 1.3
    pub ext_tooling_info: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_transform_feedback.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_transform_feedback: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_validation_cache.html)
    pub ext_validation_cache: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_vertex_attribute_divisor.html)
    ///- Promoted to [`khr_vertex_attribute_divisor`](DeviceExtensions::khr_vertex_attribute_divisor)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_vertex_attribute_divisor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_vertex_input_dynamic_state.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub ext_vertex_input_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_ycbcr_2plane_444_formats.html)
    ///- Promoted to Vulkan 1.3
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    pub ext_ycbcr_2plane_444_formats: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_EXT_ycbcr_image_arrays.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    pub ext_ycbcr_image_arrays: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMDX_shader_enqueue.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    ///  - Device extension [`khr_pipeline_library`](DeviceExtensions::khr_pipeline_library)
    ///  - Vulkan API version 1.2 or device extension [`khr_spirv_1_4`](DeviceExtensions::khr_spirv_1_4)
    pub amdx_shader_enqueue: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_buffer_marker.html)
    pub amd_buffer_marker: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_device_coherent_memory.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub amd_device_coherent_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_display_native_hdr.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Instance extension [`khr_get_surface_capabilities2`](InstanceExtensions::khr_get_surface_capabilities2)
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub amd_display_native_hdr: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_draw_indirect_count.html)
    ///- Promoted to [`khr_draw_indirect_count`](DeviceExtensions::khr_draw_indirect_count)
    pub amd_draw_indirect_count: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_gcn_shader.html)
    pub amd_gcn_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_gpu_shader_half_float.html)
    ///- Deprecated by [`khr_shader_float16_int8`](DeviceExtensions::khr_shader_float16_int8)
    pub amd_gpu_shader_half_float: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_gpu_shader_int16.html)
    ///- Deprecated by [`khr_shader_float16_int8`](DeviceExtensions::khr_shader_float16_int8)
    pub amd_gpu_shader_int16: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_memory_overallocation_behavior.html)
    pub amd_memory_overallocation_behavior: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_mixed_attachment_samples.html)
    pub amd_mixed_attachment_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_pipeline_compiler_control.html)
    pub amd_pipeline_compiler_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_rasterization_order.html)
    pub amd_rasterization_order: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_ballot.html)
    pub amd_shader_ballot: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_core_properties.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub amd_shader_core_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_core_properties2.html)
    ///- Requires:
    ///  - Device extension [`amd_shader_core_properties`](DeviceExtensions::amd_shader_core_properties)
    pub amd_shader_core_properties2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_early_and_late_fragment_tests.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub amd_shader_early_and_late_fragment_tests: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_explicit_vertex_parameter.html)
    pub amd_shader_explicit_vertex_parameter: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_fragment_mask.html)
    pub amd_shader_fragment_mask: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_image_load_store_lod.html)
    pub amd_shader_image_load_store_lod: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_info.html)
    pub amd_shader_info: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_shader_trinary_minmax.html)
    pub amd_shader_trinary_minmax: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_AMD_texture_gather_bias_lod.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub amd_texture_gather_bias_lod: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ANDROID_external_format_resolve.html)
    ///- Requires:
    ///  - Device extension [`android_external_memory_android_hardware_buffer`](DeviceExtensions::android_external_memory_android_hardware_buffer)
    pub android_external_format_resolve: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ANDROID_external_memory_android_hardware_buffer.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    ///  - Vulkan API version 1.1 or device extension [`khr_dedicated_allocation`](DeviceExtensions::khr_dedicated_allocation)
    ///  - Device extension [`ext_queue_family_foreign`](DeviceExtensions::ext_queue_family_foreign)
    pub android_external_memory_android_hardware_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ARM_rasterization_order_attachment_access.html)
    ///- Promoted to [`ext_rasterization_order_attachment_access`](DeviceExtensions::ext_rasterization_order_attachment_access)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub arm_rasterization_order_attachment_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ARM_render_pass_striped.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub arm_render_pass_striped: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ARM_scheduling_controls.html)
    ///- Requires:
    ///  - Device extension [`arm_shader_core_builtins`](DeviceExtensions::arm_shader_core_builtins)
    pub arm_scheduling_controls: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ARM_shader_core_builtins.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub arm_shader_core_builtins: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_ARM_shader_core_properties.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub arm_shader_core_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_FUCHSIA_buffer_collection.html)
    ///- Requires all of:
    ///  - Device extension [`fuchsia_external_memory`](DeviceExtensions::fuchsia_external_memory)
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    pub fuchsia_buffer_collection: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_FUCHSIA_external_memory.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_external_memory_capabilities`](InstanceExtensions::khr_external_memory_capabilities)
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub fuchsia_external_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_FUCHSIA_external_semaphore.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_external_semaphore_capabilities`](InstanceExtensions::khr_external_semaphore_capabilities)
    ///  - Vulkan API version 1.1 or device extension [`khr_external_semaphore`](DeviceExtensions::khr_external_semaphore)
    pub fuchsia_external_semaphore: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GGP_frame_token.html)
    ///- Requires all of:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    ///  - Instance extension [`ggp_stream_descriptor_surface`](InstanceExtensions::ggp_stream_descriptor_surface)
    pub ggp_frame_token: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GOOGLE_decorate_string.html)
    pub google_decorate_string: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GOOGLE_display_timing.html)
    ///- Requires:
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub google_display_timing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GOOGLE_hlsl_functionality1.html)
    pub google_hlsl_functionality1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GOOGLE_user_type.html)
    pub google_user_type: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_HUAWEI_cluster_culling_shader.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub huawei_cluster_culling_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_HUAWEI_invocation_mask.html)
    ///- Requires all of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](DeviceExtensions::khr_ray_tracing_pipeline)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub huawei_invocation_mask: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_HUAWEI_subpass_shading.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.2 or device extension [`khr_create_renderpass2`](DeviceExtensions::khr_create_renderpass2)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub huawei_subpass_shading: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_IMG_filter_cubic.html)
    pub img_filter_cubic: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_IMG_format_pvrtc.html)
    ///- Deprecated without a replacement
    pub img_format_pvrtc: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_IMG_relaxed_line_rasterization.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub img_relaxed_line_rasterization: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_INTEL_performance_query.html)
    pub intel_performance_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_INTEL_shader_integer_functions2.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub intel_shader_integer_functions2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_MSFT_layered_driver.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub msft_layered_driver: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NVX_binary_import.html)
    pub nvx_binary_import: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NVX_image_view_handle.html)
    pub nvx_image_view_handle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NVX_multiview_per_view_attributes.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_multiview`](DeviceExtensions::khr_multiview)
    pub nvx_multiview_per_view_attributes: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_acquire_winrt_display.html)
    ///- Requires:
    ///  - Instance extension [`ext_direct_mode_display`](InstanceExtensions::ext_direct_mode_display)
    pub nv_acquire_winrt_display: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_clip_space_w_scaling.html)
    pub nv_clip_space_w_scaling: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_compute_shader_derivatives.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_compute_shader_derivatives: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_cooperative_matrix.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_cooperative_matrix: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_copy_memory_indirect.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    pub nv_copy_memory_indirect: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_corner_sampled_image.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_corner_sampled_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_coverage_reduction_mode.html)
    ///- Requires all of:
    ///  - Device extension [`nv_framebuffer_mixed_samples`](DeviceExtensions::nv_framebuffer_mixed_samples)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_coverage_reduction_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_cuda_kernel_launch.html)
    pub nv_cuda_kernel_launch: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_dedicated_allocation.html)
    ///- Deprecated by [`khr_dedicated_allocation`](DeviceExtensions::khr_dedicated_allocation)
    pub nv_dedicated_allocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_dedicated_allocation_image_aliasing.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_dedicated_allocation`](DeviceExtensions::khr_dedicated_allocation)
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_dedicated_allocation_image_aliasing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_descriptor_pool_overallocation.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub nv_descriptor_pool_overallocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_device_diagnostic_checkpoints.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_device_diagnostic_checkpoints: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_device_diagnostics_config.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_device_diagnostics_config: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_device_generated_commands.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1
    ///  - Vulkan API version 1.2 or device extension [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    pub nv_device_generated_commands: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_device_generated_commands_compute.html)
    ///- Requires:
    ///  - Device extension [`nv_device_generated_commands`](DeviceExtensions::nv_device_generated_commands)
    pub nv_device_generated_commands_compute: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_displacement_micromap.html)
    ///- Requires:
    ///  - Device extension [`ext_opacity_micromap`](DeviceExtensions::ext_opacity_micromap)
    pub nv_displacement_micromap: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_extended_sparse_address_space.html)
    pub nv_extended_sparse_address_space: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_external_memory.html)
    ///- Deprecated by [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    ///- Requires:
    ///  - Instance extension [`nv_external_memory_capabilities`](InstanceExtensions::nv_external_memory_capabilities)
    pub nv_external_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_external_memory_rdma.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    pub nv_external_memory_rdma: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_external_memory_win32.html)
    ///- Deprecated by [`khr_external_memory_win32`](DeviceExtensions::khr_external_memory_win32)
    ///- Requires:
    ///  - Device extension [`nv_external_memory`](DeviceExtensions::nv_external_memory)
    pub nv_external_memory_win32: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_fill_rectangle.html)
    pub nv_fill_rectangle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_fragment_coverage_to_color.html)
    pub nv_fragment_coverage_to_color: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_fragment_shader_barycentric.html)
    ///- Promoted to [`khr_fragment_shader_barycentric`](DeviceExtensions::khr_fragment_shader_barycentric)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_fragment_shader_barycentric: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_fragment_shading_rate_enums.html)
    ///- Requires:
    ///  - Device extension [`khr_fragment_shading_rate`](DeviceExtensions::khr_fragment_shading_rate)
    pub nv_fragment_shading_rate_enums: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_framebuffer_mixed_samples.html)
    pub nv_framebuffer_mixed_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_geometry_shader_passthrough.html)
    pub nv_geometry_shader_passthrough: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_glsl_shader.html)
    ///- Deprecated without a replacement
    pub nv_glsl_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_inherited_viewport_scissor.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_inherited_viewport_scissor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_linear_color_attachment.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_linear_color_attachment: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_low_latency.html)
    pub nv_low_latency: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_low_latency2.html)
    ///- Requires:
    ///  - Vulkan API version 1.2 or device extension [`khr_timeline_semaphore`](DeviceExtensions::khr_timeline_semaphore)
    pub nv_low_latency2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_memory_decompression.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.2 or device extension [`khr_buffer_device_address`](DeviceExtensions::khr_buffer_device_address)
    pub nv_memory_decompression: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_mesh_shader.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_mesh_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_optical_flow.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.3 or device extension [`khr_format_feature_flags2`](DeviceExtensions::khr_format_feature_flags2)
    ///  - Vulkan API version 1.3 or device extension [`khr_synchronization2`](DeviceExtensions::khr_synchronization2)
    pub nv_optical_flow: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_per_stage_descriptor_set.html)
    ///- Requires:
    ///  - Device extension [`khr_maintenance6`](DeviceExtensions::khr_maintenance6)
    pub nv_per_stage_descriptor_set: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_present_barrier.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Instance extension [`khr_surface`](InstanceExtensions::khr_surface)
    ///  - Instance extension [`khr_get_surface_capabilities2`](InstanceExtensions::khr_get_surface_capabilities2)
    ///  - Device extension [`khr_swapchain`](DeviceExtensions::khr_swapchain)
    pub nv_present_barrier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_raw_access_chains.html)
    pub nv_raw_access_chains: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_ray_tracing.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Vulkan API version 1.1 or device extension [`khr_get_memory_requirements2`](DeviceExtensions::khr_get_memory_requirements2)
    pub nv_ray_tracing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_ray_tracing_invocation_reorder.html)
    ///- Requires:
    ///  - Device extension [`khr_ray_tracing_pipeline`](DeviceExtensions::khr_ray_tracing_pipeline)
    pub nv_ray_tracing_invocation_reorder: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_ray_tracing_motion_blur.html)
    ///- Requires:
    ///  - Device extension [`khr_ray_tracing_pipeline`](DeviceExtensions::khr_ray_tracing_pipeline)
    pub nv_ray_tracing_motion_blur: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_ray_tracing_validation.html)
    pub nv_ray_tracing_validation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_representative_fragment_test.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_representative_fragment_test: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_sample_mask_override_coverage.html)
    pub nv_sample_mask_override_coverage: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_scissor_exclusive.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_scissor_exclusive: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_shader_atomic_float16_vector.html)
    pub nv_shader_atomic_float16_vector: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_shader_image_footprint.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_shader_image_footprint: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_shader_sm_builtins.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub nv_shader_sm_builtins: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_shader_subgroup_partitioned.html)
    ///- Requires:
    ///  - Vulkan API version 1.1
    pub nv_shader_subgroup_partitioned: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_shading_rate_image.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub nv_shading_rate_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_viewport_array2.html)
    pub nv_viewport_array2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_viewport_swizzle.html)
    pub nv_viewport_swizzle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_NV_win32_keyed_mutex.html)
    ///- Promoted to [`khr_win32_keyed_mutex`](DeviceExtensions::khr_win32_keyed_mutex)
    ///- Requires:
    ///  - Device extension [`nv_external_memory_win32`](DeviceExtensions::nv_external_memory_win32)
    pub nv_win32_keyed_mutex: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_filter_cubic_clamp.html)
    ///- Requires all of:
    ///  - Device extension [`ext_filter_cubic`](DeviceExtensions::ext_filter_cubic)
    ///  - Vulkan API version 1.2 or device extension [`ext_sampler_filter_minmax`](DeviceExtensions::ext_sampler_filter_minmax)
    pub qcom_filter_cubic_clamp: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_filter_cubic_weights.html)
    ///- Requires:
    ///  - Device extension [`ext_filter_cubic`](DeviceExtensions::ext_filter_cubic)
    pub qcom_filter_cubic_weights: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_fragment_density_map_offset.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    ///  - Device extension [`ext_fragment_density_map`](DeviceExtensions::ext_fragment_density_map)
    pub qcom_fragment_density_map_offset: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_image_processing.html)
    ///- Requires:
    ///  - Vulkan API version 1.3 or device extension [`khr_format_feature_flags2`](DeviceExtensions::khr_format_feature_flags2)
    pub qcom_image_processing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_image_processing2.html)
    ///- Requires:
    ///  - Device extension [`qcom_image_processing`](DeviceExtensions::qcom_image_processing)
    pub qcom_image_processing2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_multiview_per_view_render_areas.html)
    pub qcom_multiview_per_view_render_areas: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_multiview_per_view_viewports.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub qcom_multiview_per_view_viewports: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_render_pass_shader_resolve.html)
    pub qcom_render_pass_shader_resolve: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_render_pass_store_ops.html)
    pub qcom_render_pass_store_ops: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_render_pass_transform.html)
    pub qcom_render_pass_transform: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_rotated_copy_commands.html)
    ///- Requires:
    ///  - Vulkan API version 1.3 or device extension [`khr_copy_commands2`](DeviceExtensions::khr_copy_commands2)
    pub qcom_rotated_copy_commands: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_tile_properties.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub qcom_tile_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QCOM_ycbcr_degamma.html)
    pub qcom_ycbcr_degamma: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_QNX_external_memory_screen_buffer.html)
    ///- Requires all of:
    ///  - Vulkan API version 1.1 or device extension [`khr_sampler_ycbcr_conversion`](DeviceExtensions::khr_sampler_ycbcr_conversion)
    ///  - Vulkan API version 1.1 or device extension [`khr_external_memory`](DeviceExtensions::khr_external_memory)
    ///  - Vulkan API version 1.1 or device extension [`khr_dedicated_allocation`](DeviceExtensions::khr_dedicated_allocation)
    ///  - Device extension [`ext_queue_family_foreign`](DeviceExtensions::ext_queue_family_foreign)
    pub qnx_external_memory_screen_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_SEC_amigo_profiling.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub sec_amigo_profiling: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_VALVE_descriptor_set_host_mapping.html)
    ///- Requires:
    ///  - Vulkan API version 1.1 or instance extension [`khr_get_physical_device_properties2`](InstanceExtensions::khr_get_physical_device_properties2)
    pub valve_descriptor_set_host_mapping: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_VALVE_mutable_descriptor_type.html)
    ///- Promoted to [`ext_mutable_descriptor_type`](DeviceExtensions::ext_mutable_descriptor_type)
    ///- Requires:
    ///  - Vulkan API version 1.1 or device extension [`khr_maintenance3`](DeviceExtensions::khr_maintenance3)
    pub valve_mutable_descriptor_type: bool,
    pub _ne: crate::NonExhaustive<'static>,
}
impl DeviceExtensions {
    const COUNT: usize = 330usize;
    const NAMES_C: [&std::ffi::CStr; Self::COUNT] = [
        c"VK_KHR_16bit_storage",
        c"VK_KHR_8bit_storage",
        c"VK_KHR_acceleration_structure",
        c"VK_KHR_bind_memory2",
        c"VK_KHR_buffer_device_address",
        c"VK_KHR_calibrated_timestamps",
        c"VK_KHR_cooperative_matrix",
        c"VK_KHR_copy_commands2",
        c"VK_KHR_create_renderpass2",
        c"VK_KHR_dedicated_allocation",
        c"VK_KHR_deferred_host_operations",
        c"VK_KHR_depth_stencil_resolve",
        c"VK_KHR_descriptor_update_template",
        c"VK_KHR_device_group",
        c"VK_KHR_display_swapchain",
        c"VK_KHR_draw_indirect_count",
        c"VK_KHR_driver_properties",
        c"VK_KHR_dynamic_rendering",
        c"VK_KHR_dynamic_rendering_local_read",
        c"VK_KHR_external_fence",
        c"VK_KHR_external_fence_fd",
        c"VK_KHR_external_fence_win32",
        c"VK_KHR_external_memory",
        c"VK_KHR_external_memory_fd",
        c"VK_KHR_external_memory_win32",
        c"VK_KHR_external_semaphore",
        c"VK_KHR_external_semaphore_fd",
        c"VK_KHR_external_semaphore_win32",
        c"VK_KHR_format_feature_flags2",
        c"VK_KHR_fragment_shader_barycentric",
        c"VK_KHR_fragment_shading_rate",
        c"VK_KHR_get_memory_requirements2",
        c"VK_KHR_global_priority",
        c"VK_KHR_image_format_list",
        c"VK_KHR_imageless_framebuffer",
        c"VK_KHR_incremental_present",
        c"VK_KHR_index_type_uint8",
        c"VK_KHR_line_rasterization",
        c"VK_KHR_load_store_op_none",
        c"VK_KHR_maintenance1",
        c"VK_KHR_maintenance2",
        c"VK_KHR_maintenance3",
        c"VK_KHR_maintenance4",
        c"VK_KHR_maintenance5",
        c"VK_KHR_maintenance6",
        c"VK_KHR_map_memory2",
        c"VK_KHR_multiview",
        c"VK_KHR_performance_query",
        c"VK_KHR_pipeline_executable_properties",
        c"VK_KHR_pipeline_library",
        c"VK_KHR_portability_subset",
        c"VK_KHR_present_id",
        c"VK_KHR_present_wait",
        c"VK_KHR_push_descriptor",
        c"VK_KHR_ray_query",
        c"VK_KHR_ray_tracing_maintenance1",
        c"VK_KHR_ray_tracing_pipeline",
        c"VK_KHR_ray_tracing_position_fetch",
        c"VK_KHR_relaxed_block_layout",
        c"VK_KHR_sampler_mirror_clamp_to_edge",
        c"VK_KHR_sampler_ycbcr_conversion",
        c"VK_KHR_separate_depth_stencil_layouts",
        c"VK_KHR_shader_atomic_int64",
        c"VK_KHR_shader_clock",
        c"VK_KHR_shader_draw_parameters",
        c"VK_KHR_shader_expect_assume",
        c"VK_KHR_shader_float16_int8",
        c"VK_KHR_shader_float_controls",
        c"VK_KHR_shader_float_controls2",
        c"VK_KHR_shader_integer_dot_product",
        c"VK_KHR_shader_maximal_reconvergence",
        c"VK_KHR_shader_non_semantic_info",
        c"VK_KHR_shader_quad_control",
        c"VK_KHR_shader_subgroup_extended_types",
        c"VK_KHR_shader_subgroup_rotate",
        c"VK_KHR_shader_subgroup_uniform_control_flow",
        c"VK_KHR_shader_terminate_invocation",
        c"VK_KHR_shared_presentable_image",
        c"VK_KHR_spirv_1_4",
        c"VK_KHR_storage_buffer_storage_class",
        c"VK_KHR_swapchain",
        c"VK_KHR_swapchain_mutable_format",
        c"VK_KHR_synchronization2",
        c"VK_KHR_timeline_semaphore",
        c"VK_KHR_uniform_buffer_standard_layout",
        c"VK_KHR_variable_pointers",
        c"VK_KHR_vertex_attribute_divisor",
        c"VK_KHR_video_decode_av1",
        c"VK_KHR_video_decode_h264",
        c"VK_KHR_video_decode_h265",
        c"VK_KHR_video_decode_queue",
        c"VK_KHR_video_encode_h264",
        c"VK_KHR_video_encode_h265",
        c"VK_KHR_video_encode_queue",
        c"VK_KHR_video_maintenance1",
        c"VK_KHR_video_queue",
        c"VK_KHR_vulkan_memory_model",
        c"VK_KHR_win32_keyed_mutex",
        c"VK_KHR_workgroup_memory_explicit_layout",
        c"VK_KHR_zero_initialize_workgroup_memory",
        c"VK_EXT_4444_formats",
        c"VK_EXT_astc_decode_mode",
        c"VK_EXT_attachment_feedback_loop_dynamic_state",
        c"VK_EXT_attachment_feedback_loop_layout",
        c"VK_EXT_blend_operation_advanced",
        c"VK_EXT_border_color_swizzle",
        c"VK_EXT_buffer_device_address",
        c"VK_EXT_calibrated_timestamps",
        c"VK_EXT_color_write_enable",
        c"VK_EXT_conditional_rendering",
        c"VK_EXT_conservative_rasterization",
        c"VK_EXT_custom_border_color",
        c"VK_EXT_debug_marker",
        c"VK_EXT_depth_bias_control",
        c"VK_EXT_depth_clamp_zero_one",
        c"VK_EXT_depth_clip_control",
        c"VK_EXT_depth_clip_enable",
        c"VK_EXT_depth_range_unrestricted",
        c"VK_EXT_descriptor_buffer",
        c"VK_EXT_descriptor_indexing",
        c"VK_EXT_device_address_binding_report",
        c"VK_EXT_device_fault",
        c"VK_EXT_device_memory_report",
        c"VK_EXT_discard_rectangles",
        c"VK_EXT_display_control",
        c"VK_EXT_dynamic_rendering_unused_attachments",
        c"VK_EXT_extended_dynamic_state",
        c"VK_EXT_extended_dynamic_state2",
        c"VK_EXT_extended_dynamic_state3",
        c"VK_EXT_external_memory_acquire_unmodified",
        c"VK_EXT_external_memory_dma_buf",
        c"VK_EXT_external_memory_host",
        c"VK_EXT_filter_cubic",
        c"VK_EXT_fragment_density_map",
        c"VK_EXT_fragment_density_map2",
        c"VK_EXT_fragment_shader_interlock",
        c"VK_EXT_frame_boundary",
        c"VK_EXT_full_screen_exclusive",
        c"VK_EXT_global_priority",
        c"VK_EXT_global_priority_query",
        c"VK_EXT_graphics_pipeline_library",
        c"VK_EXT_hdr_metadata",
        c"VK_EXT_host_image_copy",
        c"VK_EXT_host_query_reset",
        c"VK_EXT_image_2d_view_of_3d",
        c"VK_EXT_image_compression_control",
        c"VK_EXT_image_compression_control_swapchain",
        c"VK_EXT_image_drm_format_modifier",
        c"VK_EXT_image_robustness",
        c"VK_EXT_image_sliced_view_of_3d",
        c"VK_EXT_image_view_min_lod",
        c"VK_EXT_index_type_uint8",
        c"VK_EXT_inline_uniform_block",
        c"VK_EXT_legacy_dithering",
        c"VK_EXT_line_rasterization",
        c"VK_EXT_load_store_op_none",
        c"VK_EXT_map_memory_placed",
        c"VK_EXT_memory_budget",
        c"VK_EXT_memory_priority",
        c"VK_EXT_mesh_shader",
        c"VK_EXT_metal_objects",
        c"VK_EXT_multi_draw",
        c"VK_EXT_multisampled_render_to_single_sampled",
        c"VK_EXT_mutable_descriptor_type",
        c"VK_EXT_nested_command_buffer",
        c"VK_EXT_non_seamless_cube_map",
        c"VK_EXT_opacity_micromap",
        c"VK_EXT_pageable_device_local_memory",
        c"VK_EXT_pci_bus_info",
        c"VK_EXT_physical_device_drm",
        c"VK_EXT_pipeline_creation_cache_control",
        c"VK_EXT_pipeline_creation_feedback",
        c"VK_EXT_pipeline_library_group_handles",
        c"VK_EXT_pipeline_properties",
        c"VK_EXT_pipeline_protected_access",
        c"VK_EXT_pipeline_robustness",
        c"VK_EXT_post_depth_coverage",
        c"VK_EXT_primitive_topology_list_restart",
        c"VK_EXT_primitives_generated_query",
        c"VK_EXT_private_data",
        c"VK_EXT_provoking_vertex",
        c"VK_EXT_queue_family_foreign",
        c"VK_EXT_rasterization_order_attachment_access",
        c"VK_EXT_rgba10x6_formats",
        c"VK_EXT_robustness2",
        c"VK_EXT_sample_locations",
        c"VK_EXT_sampler_filter_minmax",
        c"VK_EXT_scalar_block_layout",
        c"VK_EXT_separate_stencil_usage",
        c"VK_EXT_shader_atomic_float",
        c"VK_EXT_shader_atomic_float2",
        c"VK_EXT_shader_demote_to_helper_invocation",
        c"VK_EXT_shader_image_atomic_int64",
        c"VK_EXT_shader_module_identifier",
        c"VK_EXT_shader_object",
        c"VK_EXT_shader_stencil_export",
        c"VK_EXT_shader_subgroup_ballot",
        c"VK_EXT_shader_subgroup_vote",
        c"VK_EXT_shader_tile_image",
        c"VK_EXT_shader_viewport_index_layer",
        c"VK_EXT_subgroup_size_control",
        c"VK_EXT_subpass_merge_feedback",
        c"VK_EXT_swapchain_maintenance1",
        c"VK_EXT_texel_buffer_alignment",
        c"VK_EXT_texture_compression_astc_hdr",
        c"VK_EXT_tooling_info",
        c"VK_EXT_transform_feedback",
        c"VK_EXT_validation_cache",
        c"VK_EXT_vertex_attribute_divisor",
        c"VK_EXT_vertex_input_dynamic_state",
        c"VK_EXT_ycbcr_2plane_444_formats",
        c"VK_EXT_ycbcr_image_arrays",
        c"VK_AMDX_shader_enqueue",
        c"VK_AMD_buffer_marker",
        c"VK_AMD_device_coherent_memory",
        c"VK_AMD_display_native_hdr",
        c"VK_AMD_draw_indirect_count",
        c"VK_AMD_gcn_shader",
        c"VK_AMD_gpu_shader_half_float",
        c"VK_AMD_gpu_shader_int16",
        c"VK_AMD_memory_overallocation_behavior",
        c"VK_AMD_mixed_attachment_samples",
        c"VK_AMD_pipeline_compiler_control",
        c"VK_AMD_rasterization_order",
        c"VK_AMD_shader_ballot",
        c"VK_AMD_shader_core_properties",
        c"VK_AMD_shader_core_properties2",
        c"VK_AMD_shader_early_and_late_fragment_tests",
        c"VK_AMD_shader_explicit_vertex_parameter",
        c"VK_AMD_shader_fragment_mask",
        c"VK_AMD_shader_image_load_store_lod",
        c"VK_AMD_shader_info",
        c"VK_AMD_shader_trinary_minmax",
        c"VK_AMD_texture_gather_bias_lod",
        c"VK_ANDROID_external_format_resolve",
        c"VK_ANDROID_external_memory_android_hardware_buffer",
        c"VK_ARM_rasterization_order_attachment_access",
        c"VK_ARM_render_pass_striped",
        c"VK_ARM_scheduling_controls",
        c"VK_ARM_shader_core_builtins",
        c"VK_ARM_shader_core_properties",
        c"VK_FUCHSIA_buffer_collection",
        c"VK_FUCHSIA_external_memory",
        c"VK_FUCHSIA_external_semaphore",
        c"VK_GGP_frame_token",
        c"VK_GOOGLE_decorate_string",
        c"VK_GOOGLE_display_timing",
        c"VK_GOOGLE_hlsl_functionality1",
        c"VK_GOOGLE_user_type",
        c"VK_HUAWEI_cluster_culling_shader",
        c"VK_HUAWEI_invocation_mask",
        c"VK_HUAWEI_subpass_shading",
        c"VK_IMG_filter_cubic",
        c"VK_IMG_format_pvrtc",
        c"VK_IMG_relaxed_line_rasterization",
        c"VK_INTEL_performance_query",
        c"VK_INTEL_shader_integer_functions2",
        c"VK_MSFT_layered_driver",
        c"VK_NVX_binary_import",
        c"VK_NVX_image_view_handle",
        c"VK_NVX_multiview_per_view_attributes",
        c"VK_NV_acquire_winrt_display",
        c"VK_NV_clip_space_w_scaling",
        c"VK_NV_compute_shader_derivatives",
        c"VK_NV_cooperative_matrix",
        c"VK_NV_copy_memory_indirect",
        c"VK_NV_corner_sampled_image",
        c"VK_NV_coverage_reduction_mode",
        c"VK_NV_cuda_kernel_launch",
        c"VK_NV_dedicated_allocation",
        c"VK_NV_dedicated_allocation_image_aliasing",
        c"VK_NV_descriptor_pool_overallocation",
        c"VK_NV_device_diagnostic_checkpoints",
        c"VK_NV_device_diagnostics_config",
        c"VK_NV_device_generated_commands",
        c"VK_NV_device_generated_commands_compute",
        c"VK_NV_displacement_micromap",
        c"VK_NV_extended_sparse_address_space",
        c"VK_NV_external_memory",
        c"VK_NV_external_memory_rdma",
        c"VK_NV_external_memory_win32",
        c"VK_NV_fill_rectangle",
        c"VK_NV_fragment_coverage_to_color",
        c"VK_NV_fragment_shader_barycentric",
        c"VK_NV_fragment_shading_rate_enums",
        c"VK_NV_framebuffer_mixed_samples",
        c"VK_NV_geometry_shader_passthrough",
        c"VK_NV_glsl_shader",
        c"VK_NV_inherited_viewport_scissor",
        c"VK_NV_linear_color_attachment",
        c"VK_NV_low_latency",
        c"VK_NV_low_latency2",
        c"VK_NV_memory_decompression",
        c"VK_NV_mesh_shader",
        c"VK_NV_optical_flow",
        c"VK_NV_per_stage_descriptor_set",
        c"VK_NV_present_barrier",
        c"VK_NV_raw_access_chains",
        c"VK_NV_ray_tracing",
        c"VK_NV_ray_tracing_invocation_reorder",
        c"VK_NV_ray_tracing_motion_blur",
        c"VK_NV_ray_tracing_validation",
        c"VK_NV_representative_fragment_test",
        c"VK_NV_sample_mask_override_coverage",
        c"VK_NV_scissor_exclusive",
        c"VK_NV_shader_atomic_float16_vector",
        c"VK_NV_shader_image_footprint",
        c"VK_NV_shader_sm_builtins",
        c"VK_NV_shader_subgroup_partitioned",
        c"VK_NV_shading_rate_image",
        c"VK_NV_viewport_array2",
        c"VK_NV_viewport_swizzle",
        c"VK_NV_win32_keyed_mutex",
        c"VK_QCOM_filter_cubic_clamp",
        c"VK_QCOM_filter_cubic_weights",
        c"VK_QCOM_fragment_density_map_offset",
        c"VK_QCOM_image_processing",
        c"VK_QCOM_image_processing2",
        c"VK_QCOM_multiview_per_view_render_areas",
        c"VK_QCOM_multiview_per_view_viewports",
        c"VK_QCOM_render_pass_shader_resolve",
        c"VK_QCOM_render_pass_store_ops",
        c"VK_QCOM_render_pass_transform",
        c"VK_QCOM_rotated_copy_commands",
        c"VK_QCOM_tile_properties",
        c"VK_QCOM_ycbcr_degamma",
        c"VK_QNX_external_memory_screen_buffer",
        c"VK_SEC_amigo_profiling",
        c"VK_VALVE_descriptor_set_host_mapping",
        c"VK_VALVE_mutable_descriptor_type",
    ];
    ///Returns a `DeviceExtensions` with none of the members set.
    #[inline]
    pub const fn empty() -> Self {
        Self::from_array([false; Self::COUNT])
    }
    /// Returns the number of members set in self.
    #[inline]
    pub const fn count(self) -> u64 {
        crate::array_count(self.as_array()) as u64
    }
    /// Returns whether no members are set in `self`.
    #[inline]
    pub const fn is_empty(self) -> bool {
        crate::array_is_empty(self.as_array())
    }
    /// Returns whether any members are set in both `self` and `other`.
    #[inline]
    pub const fn intersects(&self, other: &Self) -> bool {
        crate::array_intersects(self.as_array(), other.as_array())
    }
    /// Returns whether all members in `other` are set in `self`.
    #[inline]
    pub const fn contains(&self, other: &Self) -> bool {
        crate::array_contains(self.as_array(), other.as_array())
    }
    /// Returns the union of `self` and `other`.
    #[inline]
    pub const fn union(&self, other: &Self) -> Self {
        Self::from_array(crate::array_union(self.as_array(), other.as_array()))
    }
    /// Returns the intersection of `self` and `other`.
    #[inline]
    pub const fn intersection(&self, other: &Self) -> Self {
        Self::from_array(crate::array_intersection(self.as_array(), other.as_array()))
    }
    /// Returns `self` without the members set in `other`.
    #[inline]
    pub const fn difference(&self, other: &Self) -> Self {
        Self::from_array(crate::array_difference(self.as_array(), other.as_array()))
    }
    /// Returns the members set in `self` or `other`, but not both.
    #[inline]
    pub const fn symmetric_difference(&self, other: &Self) -> Self {
        Self::from_array(
            crate::array_symmetric_difference(self.as_array(), other.as_array()),
        )
    }
    #[inline]
    const fn from_array(array: [bool; Self::COUNT]) -> Self {
        unsafe { ::std::mem::transmute::<[bool; Self::COUNT], DeviceExtensions>(array) }
    }
    #[inline]
    const fn as_array(&self) -> &[bool; Self::COUNT] {
        unsafe { ::std::mem::transmute::<&DeviceExtensions, &[bool; Self::COUNT]>(self) }
    }
    #[inline]
    const fn as_mut_array(&mut self) -> &mut [bool; Self::COUNT] {
        unsafe {
            ::std::mem::transmute::<
                &mut DeviceExtensions,
                &mut [bool; Self::COUNT],
            >(self)
        }
    }
    #[inline]
    fn iter(&self) -> extensions::Iter<'_> {
        extensions::Iter {
            inner: Self::NAMES_C.iter().copied().zip(self.as_array().iter().copied()),
        }
    }
    pub(crate) fn validate(
        &self,
        supported: &Self,
        api_version: Version,
        instance_extensions: &InstanceExtensions,
    ) -> Result<(), Box<ValidationError>> {
        if self.khr_16bit_storage {
            if !supported.khr_16bit_storage {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_16bit_storage`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_16bit_storage`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_8bit_storage {
            if !supported.khr_8bit_storage {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_8bit_storage`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_8bit_storage`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_acceleration_structure {
            if !supported.khr_acceleration_structure {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_acceleration_structure`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_acceleration_structure`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_bind_memory2 {
            if !supported.khr_bind_memory2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_bind_memory2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_buffer_device_address {
            if !supported.khr_buffer_device_address {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_buffer_device_address`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_buffer_device_address`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_calibrated_timestamps {
            if !supported.khr_calibrated_timestamps {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_calibrated_timestamps`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_calibrated_timestamps`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_cooperative_matrix {
            if !supported.khr_cooperative_matrix {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_cooperative_matrix`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_cooperative_matrix`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_copy_commands2 {
            if !supported.khr_copy_commands2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_copy_commands2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_copy_commands2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_create_renderpass2 {
            if !supported.khr_create_renderpass2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_create_renderpass2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_dedicated_allocation {
            if !supported.khr_dedicated_allocation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_dedicated_allocation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_deferred_host_operations {
            if !supported.khr_deferred_host_operations {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_deferred_host_operations`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_depth_stencil_resolve {
            if !supported.khr_depth_stencil_resolve {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_depth_stencil_resolve`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_descriptor_update_template {
            if !supported.khr_descriptor_update_template {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_descriptor_update_template`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_device_group {
            if !supported.khr_device_group {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_device_group`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_device_group_creation)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_device_group`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_device_group_creation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_display_swapchain {
            if !supported.khr_display_swapchain {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_display_swapchain`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_display) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_display_swapchain`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("khr_display")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_draw_indirect_count {
            if !supported.khr_draw_indirect_count {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_draw_indirect_count`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_driver_properties {
            if !supported.khr_driver_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_driver_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_driver_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_dynamic_rendering {
            if !supported.khr_dynamic_rendering {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_dynamic_rendering`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_dynamic_rendering`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_dynamic_rendering_local_read {
            if !supported.khr_dynamic_rendering_local_read {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_dynamic_rendering_local_read`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_fence {
            if !supported.khr_external_fence {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_fence`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_external_fence_capabilities)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_external_fence`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_external_fence_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_fence_fd {
            if !supported.khr_external_fence_fd {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_fence_fd`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_fence_win32 {
            if !supported.khr_external_fence_win32 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_fence_win32`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_memory {
            if !supported.khr_external_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_external_memory_capabilities)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_external_memory`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_external_memory_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_memory_fd {
            if !supported.khr_external_memory_fd {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_memory_fd`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_memory_win32 {
            if !supported.khr_external_memory_win32 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_memory_win32`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_semaphore {
            if !supported.khr_external_semaphore {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_semaphore`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_external_semaphore_capabilities)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_external_semaphore`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_external_semaphore_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_semaphore_fd {
            if !supported.khr_external_semaphore_fd {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_semaphore_fd`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_external_semaphore_win32 {
            if !supported.khr_external_semaphore_win32 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_external_semaphore_win32`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_format_feature_flags2 {
            if !supported.khr_format_feature_flags2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_format_feature_flags2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_format_feature_flags2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_fragment_shader_barycentric {
            if !supported.khr_fragment_shader_barycentric {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_fragment_shader_barycentric`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_fragment_shader_barycentric`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_fragment_shading_rate {
            if !supported.khr_fragment_shading_rate {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_fragment_shading_rate`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_fragment_shading_rate`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_get_memory_requirements2 {
            if !supported.khr_get_memory_requirements2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_get_memory_requirements2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_global_priority {
            if !supported.khr_global_priority {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_global_priority`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_global_priority`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_image_format_list {
            if !supported.khr_image_format_list {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_image_format_list`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_imageless_framebuffer {
            if !supported.khr_imageless_framebuffer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_imageless_framebuffer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_imageless_framebuffer`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_incremental_present {
            if !supported.khr_incremental_present {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_incremental_present`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_index_type_uint8 {
            if !supported.khr_index_type_uint8 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_index_type_uint8`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_index_type_uint8`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_line_rasterization {
            if !supported.khr_line_rasterization {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_line_rasterization`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_line_rasterization`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_load_store_op_none {
            if !supported.khr_load_store_op_none {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_load_store_op_none`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance1 {
            if !supported.khr_maintenance1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance2 {
            if !supported.khr_maintenance2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance3 {
            if !supported.khr_maintenance3 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance3`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_maintenance3`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance4 {
            if !supported.khr_maintenance4 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance4`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_maintenance4`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance5 {
            if !supported.khr_maintenance5 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance5`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_maintenance5`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_maintenance6 {
            if !supported.khr_maintenance6 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_maintenance6`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_maintenance6`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_map_memory2 {
            if !supported.khr_map_memory2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_map_memory2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_multiview {
            if !supported.khr_multiview {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_multiview`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_multiview`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_performance_query {
            if !supported.khr_performance_query {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_performance_query`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_performance_query`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_pipeline_executable_properties {
            if !supported.khr_pipeline_executable_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_pipeline_executable_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_pipeline_executable_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_pipeline_library {
            if !supported.khr_pipeline_library {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_pipeline_library`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_portability_subset {
            if !supported.khr_portability_subset {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_portability_subset`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_portability_subset`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_present_id {
            if !supported.khr_present_id {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_present_id`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_present_id`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_present_wait {
            if !supported.khr_present_wait {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_present_wait`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_push_descriptor {
            if !supported.khr_push_descriptor {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_push_descriptor`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_push_descriptor`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_ray_query {
            if !supported.khr_ray_query {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_ray_query`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_ray_tracing_maintenance1 {
            if !supported.khr_ray_tracing_maintenance1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_ray_tracing_maintenance1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_ray_tracing_pipeline {
            if !supported.khr_ray_tracing_pipeline {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_ray_tracing_pipeline`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_ray_tracing_position_fetch {
            if !supported.khr_ray_tracing_position_fetch {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_ray_tracing_position_fetch`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_relaxed_block_layout {
            if !supported.khr_relaxed_block_layout {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_relaxed_block_layout`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_sampler_mirror_clamp_to_edge {
            if !supported.khr_sampler_mirror_clamp_to_edge {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_sampler_mirror_clamp_to_edge`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_sampler_ycbcr_conversion {
            if !supported.khr_sampler_ycbcr_conversion {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_sampler_ycbcr_conversion`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_sampler_ycbcr_conversion`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_separate_depth_stencil_layouts {
            if !supported.khr_separate_depth_stencil_layouts {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_separate_depth_stencil_layouts`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_separate_depth_stencil_layouts`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_atomic_int64 {
            if !supported.khr_shader_atomic_int64 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_atomic_int64`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_atomic_int64`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_clock {
            if !supported.khr_shader_clock {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_clock`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_clock`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_draw_parameters {
            if !supported.khr_shader_draw_parameters {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_draw_parameters`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_expect_assume {
            if !supported.khr_shader_expect_assume {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_expect_assume`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_expect_assume`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_float16_int8 {
            if !supported.khr_shader_float16_int8 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_float16_int8`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_float16_int8`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_float_controls {
            if !supported.khr_shader_float_controls {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_float_controls`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_float_controls`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_float_controls2 {
            if !supported.khr_shader_float_controls2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_float_controls2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_float_controls2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_integer_dot_product {
            if !supported.khr_shader_integer_dot_product {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_integer_dot_product`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_integer_dot_product`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_maximal_reconvergence {
            if !supported.khr_shader_maximal_reconvergence {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_maximal_reconvergence`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_maximal_reconvergence`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_non_semantic_info {
            if !supported.khr_shader_non_semantic_info {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_non_semantic_info`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_quad_control {
            if !supported.khr_shader_quad_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_quad_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_quad_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_subgroup_extended_types {
            if !supported.khr_shader_subgroup_extended_types {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_subgroup_extended_types`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_subgroup_extended_types`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_subgroup_rotate {
            if !supported.khr_shader_subgroup_rotate {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_subgroup_rotate`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_subgroup_uniform_control_flow {
            if !supported.khr_shader_subgroup_uniform_control_flow {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_subgroup_uniform_control_flow`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_subgroup_uniform_control_flow`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shader_terminate_invocation {
            if !supported.khr_shader_terminate_invocation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shader_terminate_invocation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shader_terminate_invocation`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_shared_presentable_image {
            if !supported.khr_shared_presentable_image {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_shared_presentable_image`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shared_presentable_image`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_surface_capabilities2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_shared_presentable_image`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_spirv_1_4 {
            if !supported.khr_spirv_1_4 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_spirv_1_4`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_spirv_1_4`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_storage_buffer_storage_class {
            if !supported.khr_storage_buffer_storage_class {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_storage_buffer_storage_class`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_swapchain {
            if !supported.khr_swapchain {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_swapchain`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_surface) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_swapchain`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("khr_surface")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_swapchain_mutable_format {
            if !supported.khr_swapchain_mutable_format {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_swapchain_mutable_format`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_synchronization2 {
            if !supported.khr_synchronization2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_synchronization2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_synchronization2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_timeline_semaphore {
            if !supported.khr_timeline_semaphore {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_timeline_semaphore`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_timeline_semaphore`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_uniform_buffer_standard_layout {
            if !supported.khr_uniform_buffer_standard_layout {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_uniform_buffer_standard_layout`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_uniform_buffer_standard_layout`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_variable_pointers {
            if !supported.khr_variable_pointers {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_variable_pointers`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_variable_pointers`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_vertex_attribute_divisor {
            if !supported.khr_vertex_attribute_divisor {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_vertex_attribute_divisor`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_vertex_attribute_divisor`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_decode_av1 {
            if !supported.khr_video_decode_av1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_decode_av1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_decode_h264 {
            if !supported.khr_video_decode_h264 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_decode_h264`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_decode_h265 {
            if !supported.khr_video_decode_h265 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_decode_h265`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_decode_queue {
            if !supported.khr_video_decode_queue {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_decode_queue`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_encode_h264 {
            if !supported.khr_video_encode_h264 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_encode_h264`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_encode_h265 {
            if !supported.khr_video_encode_h265 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_encode_h265`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_encode_queue {
            if !supported.khr_video_encode_queue {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_encode_queue`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_maintenance1 {
            if !supported.khr_video_maintenance1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_maintenance1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_video_queue {
            if !supported.khr_video_queue {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_video_queue`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_video_queue`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_vulkan_memory_model {
            if !supported.khr_vulkan_memory_model {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_vulkan_memory_model`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_vulkan_memory_model`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_win32_keyed_mutex {
            if !supported.khr_win32_keyed_mutex {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_win32_keyed_mutex`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_workgroup_memory_explicit_layout {
            if !supported.khr_workgroup_memory_explicit_layout {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_workgroup_memory_explicit_layout`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_workgroup_memory_explicit_layout`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.khr_zero_initialize_workgroup_memory {
            if !supported.khr_zero_initialize_workgroup_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `khr_zero_initialize_workgroup_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `khr_zero_initialize_workgroup_memory`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_4444_formats {
            if !supported.ext_4444_formats {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_4444_formats`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_4444_formats`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_astc_decode_mode {
            if !supported.ext_astc_decode_mode {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_astc_decode_mode`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_astc_decode_mode`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_attachment_feedback_loop_dynamic_state {
            if !supported.ext_attachment_feedback_loop_dynamic_state {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_attachment_feedback_loop_dynamic_state`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_attachment_feedback_loop_dynamic_state`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_attachment_feedback_loop_layout {
            if !supported.ext_attachment_feedback_loop_layout {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_attachment_feedback_loop_layout`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_attachment_feedback_loop_layout`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_blend_operation_advanced {
            if !supported.ext_blend_operation_advanced {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_blend_operation_advanced`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_blend_operation_advanced`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_border_color_swizzle {
            if !supported.ext_border_color_swizzle {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_border_color_swizzle`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_buffer_device_address {
            if !supported.ext_buffer_device_address {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_buffer_device_address`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_buffer_device_address`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_calibrated_timestamps {
            if !supported.ext_calibrated_timestamps {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_calibrated_timestamps`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_calibrated_timestamps`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_color_write_enable {
            if !supported.ext_color_write_enable {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_color_write_enable`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_color_write_enable`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_conditional_rendering {
            if !supported.ext_conditional_rendering {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_conditional_rendering`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_conditional_rendering`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_conservative_rasterization {
            if !supported.ext_conservative_rasterization {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_conservative_rasterization`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_conservative_rasterization`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_custom_border_color {
            if !supported.ext_custom_border_color {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_custom_border_color`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_custom_border_color`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_debug_marker {
            if !supported.ext_debug_marker {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_debug_marker`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ext_debug_report) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_debug_marker`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("ext_debug_report")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_depth_bias_control {
            if !supported.ext_depth_bias_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_depth_bias_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_depth_bias_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_depth_clamp_zero_one {
            if !supported.ext_depth_clamp_zero_one {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_depth_clamp_zero_one`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_depth_clamp_zero_one`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_depth_clip_control {
            if !supported.ext_depth_clip_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_depth_clip_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_depth_clip_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_depth_clip_enable {
            if !supported.ext_depth_clip_enable {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_depth_clip_enable`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_depth_clip_enable`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_depth_range_unrestricted {
            if !supported.ext_depth_range_unrestricted {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_depth_range_unrestricted`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_descriptor_buffer {
            if !supported.ext_descriptor_buffer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_descriptor_buffer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_descriptor_buffer`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_descriptor_indexing {
            if !supported.ext_descriptor_indexing {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_descriptor_indexing`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_descriptor_indexing`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_device_address_binding_report {
            if !supported.ext_device_address_binding_report {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_device_address_binding_report`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_device_address_binding_report`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ext_debug_utils) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_device_address_binding_report`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("ext_debug_utils")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_device_fault {
            if !supported.ext_device_fault {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_device_fault`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_device_fault`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_device_memory_report {
            if !supported.ext_device_memory_report {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_device_memory_report`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_device_memory_report`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_discard_rectangles {
            if !supported.ext_discard_rectangles {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_discard_rectangles`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_discard_rectangles`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_display_control {
            if !supported.ext_display_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_display_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ext_display_surface_counter) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_display_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "ext_display_surface_counter",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_dynamic_rendering_unused_attachments {
            if !supported.ext_dynamic_rendering_unused_attachments {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_dynamic_rendering_unused_attachments`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_dynamic_rendering_unused_attachments`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_extended_dynamic_state {
            if !supported.ext_extended_dynamic_state {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_extended_dynamic_state`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_extended_dynamic_state`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_extended_dynamic_state2 {
            if !supported.ext_extended_dynamic_state2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_extended_dynamic_state2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_extended_dynamic_state2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_extended_dynamic_state3 {
            if !supported.ext_extended_dynamic_state3 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_extended_dynamic_state3`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_extended_dynamic_state3`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_external_memory_acquire_unmodified {
            if !supported.ext_external_memory_acquire_unmodified {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_external_memory_acquire_unmodified`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_external_memory_dma_buf {
            if !supported.ext_external_memory_dma_buf {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_external_memory_dma_buf`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_external_memory_host {
            if !supported.ext_external_memory_host {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_external_memory_host`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_filter_cubic {
            if !supported.ext_filter_cubic {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_filter_cubic`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_fragment_density_map {
            if !supported.ext_fragment_density_map {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_fragment_density_map`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_fragment_density_map`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_fragment_density_map2 {
            if !supported.ext_fragment_density_map2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_fragment_density_map2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_fragment_shader_interlock {
            if !supported.ext_fragment_shader_interlock {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_fragment_shader_interlock`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_fragment_shader_interlock`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_frame_boundary {
            if !supported.ext_frame_boundary {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_frame_boundary`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_full_screen_exclusive {
            if !supported.ext_full_screen_exclusive {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_full_screen_exclusive`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_full_screen_exclusive`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_surface) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_full_screen_exclusive`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("khr_surface")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_full_screen_exclusive`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_surface_capabilities2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_global_priority {
            if !supported.ext_global_priority {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_global_priority`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_global_priority_query {
            if !supported.ext_global_priority_query {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_global_priority_query`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_global_priority_query`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_graphics_pipeline_library {
            if !supported.ext_graphics_pipeline_library {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_graphics_pipeline_library`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_graphics_pipeline_library`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_hdr_metadata {
            if !supported.ext_hdr_metadata {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_hdr_metadata`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_host_image_copy {
            if !supported.ext_host_image_copy {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_host_image_copy`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_host_image_copy`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_host_query_reset {
            if !supported.ext_host_query_reset {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_host_query_reset`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_host_query_reset`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_2d_view_of_3d {
            if !supported.ext_image_2d_view_of_3d {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_2d_view_of_3d`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_2d_view_of_3d`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_compression_control {
            if !supported.ext_image_compression_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_compression_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_compression_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_compression_control_swapchain {
            if !supported.ext_image_compression_control_swapchain {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_compression_control_swapchain`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_drm_format_modifier {
            if !supported.ext_image_drm_format_modifier {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_drm_format_modifier`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_drm_format_modifier`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_robustness {
            if !supported.ext_image_robustness {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_robustness`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_robustness`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_sliced_view_of_3d {
            if !supported.ext_image_sliced_view_of_3d {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_sliced_view_of_3d`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_sliced_view_of_3d`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_image_view_min_lod {
            if !supported.ext_image_view_min_lod {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_image_view_min_lod`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_image_view_min_lod`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_index_type_uint8 {
            if !supported.ext_index_type_uint8 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_index_type_uint8`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_index_type_uint8`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_inline_uniform_block {
            if !supported.ext_inline_uniform_block {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_inline_uniform_block`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_inline_uniform_block`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_legacy_dithering {
            if !supported.ext_legacy_dithering {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_legacy_dithering`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_legacy_dithering`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_line_rasterization {
            if !supported.ext_line_rasterization {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_line_rasterization`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_line_rasterization`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_load_store_op_none {
            if !supported.ext_load_store_op_none {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_load_store_op_none`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_map_memory_placed {
            if !supported.ext_map_memory_placed {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_map_memory_placed`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_memory_budget {
            if !supported.ext_memory_budget {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_memory_budget`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_memory_budget`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_memory_priority {
            if !supported.ext_memory_priority {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_memory_priority`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_memory_priority`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_mesh_shader {
            if !supported.ext_mesh_shader {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_mesh_shader`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_metal_objects {
            if !supported.ext_metal_objects {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_metal_objects`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_multi_draw {
            if !supported.ext_multi_draw {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_multi_draw`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_multi_draw`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_multisampled_render_to_single_sampled {
            if !supported.ext_multisampled_render_to_single_sampled {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_multisampled_render_to_single_sampled`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_mutable_descriptor_type {
            if !supported.ext_mutable_descriptor_type {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_mutable_descriptor_type`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_nested_command_buffer {
            if !supported.ext_nested_command_buffer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_nested_command_buffer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_nested_command_buffer`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_non_seamless_cube_map {
            if !supported.ext_non_seamless_cube_map {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_non_seamless_cube_map`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_non_seamless_cube_map`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_opacity_micromap {
            if !supported.ext_opacity_micromap {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_opacity_micromap`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pageable_device_local_memory {
            if !supported.ext_pageable_device_local_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pageable_device_local_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pci_bus_info {
            if !supported.ext_pci_bus_info {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pci_bus_info`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_pci_bus_info`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_physical_device_drm {
            if !supported.ext_physical_device_drm {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_physical_device_drm`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_physical_device_drm`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_creation_cache_control {
            if !supported.ext_pipeline_creation_cache_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_creation_cache_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_pipeline_creation_cache_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_creation_feedback {
            if !supported.ext_pipeline_creation_feedback {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_creation_feedback`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_library_group_handles {
            if !supported.ext_pipeline_library_group_handles {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_library_group_handles`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_properties {
            if !supported.ext_pipeline_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_pipeline_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_protected_access {
            if !supported.ext_pipeline_protected_access {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_protected_access`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_pipeline_protected_access`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_pipeline_robustness {
            if !supported.ext_pipeline_robustness {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_pipeline_robustness`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_pipeline_robustness`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_post_depth_coverage {
            if !supported.ext_post_depth_coverage {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_post_depth_coverage`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_primitive_topology_list_restart {
            if !supported.ext_primitive_topology_list_restart {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_primitive_topology_list_restart`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_primitive_topology_list_restart`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_primitives_generated_query {
            if !supported.ext_primitives_generated_query {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_primitives_generated_query`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_private_data {
            if !supported.ext_private_data {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_private_data`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_private_data`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_provoking_vertex {
            if !supported.ext_provoking_vertex {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_provoking_vertex`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_provoking_vertex`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_queue_family_foreign {
            if !supported.ext_queue_family_foreign {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_queue_family_foreign`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_rasterization_order_attachment_access {
            if !supported.ext_rasterization_order_attachment_access {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_rasterization_order_attachment_access`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_rasterization_order_attachment_access`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_rgba10x6_formats {
            if !supported.ext_rgba10x6_formats {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_rgba10x6_formats`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_robustness2 {
            if !supported.ext_robustness2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_robustness2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_robustness2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_sample_locations {
            if !supported.ext_sample_locations {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_sample_locations`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_sample_locations`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_sampler_filter_minmax {
            if !supported.ext_sampler_filter_minmax {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_sampler_filter_minmax`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_sampler_filter_minmax`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_scalar_block_layout {
            if !supported.ext_scalar_block_layout {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_scalar_block_layout`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_scalar_block_layout`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_separate_stencil_usage {
            if !supported.ext_separate_stencil_usage {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_separate_stencil_usage`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_atomic_float {
            if !supported.ext_shader_atomic_float {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_atomic_float`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_atomic_float`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_atomic_float2 {
            if !supported.ext_shader_atomic_float2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_atomic_float2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_demote_to_helper_invocation {
            if !supported.ext_shader_demote_to_helper_invocation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_demote_to_helper_invocation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_demote_to_helper_invocation`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_image_atomic_int64 {
            if !supported.ext_shader_image_atomic_int64 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_image_atomic_int64`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_image_atomic_int64`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_module_identifier {
            if !supported.ext_shader_module_identifier {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_module_identifier`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_module_identifier`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_object {
            if !supported.ext_shader_object {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_object`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_object`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_stencil_export {
            if !supported.ext_shader_stencil_export {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_stencil_export`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_subgroup_ballot {
            if !supported.ext_shader_subgroup_ballot {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_subgroup_ballot`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_subgroup_vote {
            if !supported.ext_shader_subgroup_vote {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_subgroup_vote`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_tile_image {
            if !supported.ext_shader_tile_image {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_tile_image`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_shader_tile_image`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_3)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_shader_viewport_index_layer {
            if !supported.ext_shader_viewport_index_layer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_shader_viewport_index_layer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_subgroup_size_control {
            if !supported.ext_subgroup_size_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_subgroup_size_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_subgroup_size_control`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_subpass_merge_feedback {
            if !supported.ext_subpass_merge_feedback {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_subpass_merge_feedback`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_subpass_merge_feedback`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_swapchain_maintenance1 {
            if !supported.ext_swapchain_maintenance1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_swapchain_maintenance1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ext_surface_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_swapchain_maintenance1`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "ext_surface_maintenance1",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_swapchain_maintenance1`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_texel_buffer_alignment {
            if !supported.ext_texel_buffer_alignment {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_texel_buffer_alignment`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_texel_buffer_alignment`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_texture_compression_astc_hdr {
            if !supported.ext_texture_compression_astc_hdr {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_texture_compression_astc_hdr`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_texture_compression_astc_hdr`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_tooling_info {
            if !supported.ext_tooling_info {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_tooling_info`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_transform_feedback {
            if !supported.ext_transform_feedback {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_transform_feedback`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_transform_feedback`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_validation_cache {
            if !supported.ext_validation_cache {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_validation_cache`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_vertex_attribute_divisor {
            if !supported.ext_vertex_attribute_divisor {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_vertex_attribute_divisor`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_vertex_attribute_divisor`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_vertex_input_dynamic_state {
            if !supported.ext_vertex_input_dynamic_state {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_vertex_input_dynamic_state`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ext_vertex_input_dynamic_state`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_ycbcr_2plane_444_formats {
            if !supported.ext_ycbcr_2plane_444_formats {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_ycbcr_2plane_444_formats`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ext_ycbcr_image_arrays {
            if !supported.ext_ycbcr_image_arrays {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ext_ycbcr_image_arrays`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amdx_shader_enqueue {
            if !supported.amdx_shader_enqueue {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amdx_shader_enqueue`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amdx_shader_enqueue`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_buffer_marker {
            if !supported.amd_buffer_marker {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_buffer_marker`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_device_coherent_memory {
            if !supported.amd_device_coherent_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_device_coherent_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_device_coherent_memory`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_display_native_hdr {
            if !supported.amd_display_native_hdr {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_display_native_hdr`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_display_native_hdr`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_display_native_hdr`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_surface_capabilities2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_draw_indirect_count {
            if !supported.amd_draw_indirect_count {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_draw_indirect_count`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_gcn_shader {
            if !supported.amd_gcn_shader {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_gcn_shader`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_gpu_shader_half_float {
            if !supported.amd_gpu_shader_half_float {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_gpu_shader_half_float`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_gpu_shader_int16 {
            if !supported.amd_gpu_shader_int16 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_gpu_shader_int16`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_memory_overallocation_behavior {
            if !supported.amd_memory_overallocation_behavior {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_memory_overallocation_behavior`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_mixed_attachment_samples {
            if !supported.amd_mixed_attachment_samples {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_mixed_attachment_samples`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_pipeline_compiler_control {
            if !supported.amd_pipeline_compiler_control {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_pipeline_compiler_control`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_rasterization_order {
            if !supported.amd_rasterization_order {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_rasterization_order`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_ballot {
            if !supported.amd_shader_ballot {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_ballot`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_core_properties {
            if !supported.amd_shader_core_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_core_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_shader_core_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_core_properties2 {
            if !supported.amd_shader_core_properties2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_core_properties2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_early_and_late_fragment_tests {
            if !supported.amd_shader_early_and_late_fragment_tests {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_early_and_late_fragment_tests`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_shader_early_and_late_fragment_tests`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_explicit_vertex_parameter {
            if !supported.amd_shader_explicit_vertex_parameter {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_explicit_vertex_parameter`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_fragment_mask {
            if !supported.amd_shader_fragment_mask {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_fragment_mask`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_image_load_store_lod {
            if !supported.amd_shader_image_load_store_lod {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_image_load_store_lod`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_info {
            if !supported.amd_shader_info {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_info`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_shader_trinary_minmax {
            if !supported.amd_shader_trinary_minmax {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_shader_trinary_minmax`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amd_texture_gather_bias_lod {
            if !supported.amd_texture_gather_bias_lod {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `amd_texture_gather_bias_lod`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amd_texture_gather_bias_lod`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.android_external_format_resolve {
            if !supported.android_external_format_resolve {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `android_external_format_resolve`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.android_external_memory_android_hardware_buffer {
            if !supported.android_external_memory_android_hardware_buffer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `android_external_memory_android_hardware_buffer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.arm_rasterization_order_attachment_access {
            if !supported.arm_rasterization_order_attachment_access {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `arm_rasterization_order_attachment_access`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `arm_rasterization_order_attachment_access`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.arm_render_pass_striped {
            if !supported.arm_render_pass_striped {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `arm_render_pass_striped`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `arm_render_pass_striped`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.arm_scheduling_controls {
            if !supported.arm_scheduling_controls {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `arm_scheduling_controls`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.arm_shader_core_builtins {
            if !supported.arm_shader_core_builtins {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `arm_shader_core_builtins`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `arm_shader_core_builtins`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.arm_shader_core_properties {
            if !supported.arm_shader_core_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `arm_shader_core_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `arm_shader_core_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fuchsia_buffer_collection {
            if !supported.fuchsia_buffer_collection {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `fuchsia_buffer_collection`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fuchsia_external_memory {
            if !supported.fuchsia_external_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `fuchsia_external_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_external_memory_capabilities)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fuchsia_external_memory`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_external_memory_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fuchsia_external_semaphore {
            if !supported.fuchsia_external_semaphore {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `fuchsia_external_semaphore`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_external_semaphore_capabilities)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fuchsia_external_semaphore`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_external_semaphore_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ggp_frame_token {
            if !supported.ggp_frame_token {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `ggp_frame_token`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ggp_stream_descriptor_surface) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ggp_frame_token`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "ggp_stream_descriptor_surface",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.google_decorate_string {
            if !supported.google_decorate_string {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `google_decorate_string`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.google_display_timing {
            if !supported.google_display_timing {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `google_display_timing`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.google_hlsl_functionality1 {
            if !supported.google_hlsl_functionality1 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `google_hlsl_functionality1`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.google_user_type {
            if !supported.google_user_type {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `google_user_type`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.huawei_cluster_culling_shader {
            if !supported.huawei_cluster_culling_shader {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `huawei_cluster_culling_shader`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `huawei_cluster_culling_shader`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.huawei_invocation_mask {
            if !supported.huawei_invocation_mask {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `huawei_invocation_mask`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.huawei_subpass_shading {
            if !supported.huawei_subpass_shading {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `huawei_subpass_shading`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.img_filter_cubic {
            if !supported.img_filter_cubic {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `img_filter_cubic`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.img_format_pvrtc {
            if !supported.img_format_pvrtc {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `img_format_pvrtc`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.img_relaxed_line_rasterization {
            if !supported.img_relaxed_line_rasterization {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `img_relaxed_line_rasterization`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `img_relaxed_line_rasterization`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.intel_performance_query {
            if !supported.intel_performance_query {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `intel_performance_query`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.intel_shader_integer_functions2 {
            if !supported.intel_shader_integer_functions2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `intel_shader_integer_functions2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `intel_shader_integer_functions2`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.msft_layered_driver {
            if !supported.msft_layered_driver {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `msft_layered_driver`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `msft_layered_driver`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nvx_binary_import {
            if !supported.nvx_binary_import {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nvx_binary_import`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nvx_image_view_handle {
            if !supported.nvx_image_view_handle {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nvx_image_view_handle`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nvx_multiview_per_view_attributes {
            if !supported.nvx_multiview_per_view_attributes {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nvx_multiview_per_view_attributes`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_acquire_winrt_display {
            if !supported.nv_acquire_winrt_display {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_acquire_winrt_display`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.ext_direct_mode_display) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_acquire_winrt_display`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "ext_direct_mode_display",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_clip_space_w_scaling {
            if !supported.nv_clip_space_w_scaling {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_clip_space_w_scaling`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_compute_shader_derivatives {
            if !supported.nv_compute_shader_derivatives {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_compute_shader_derivatives`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_compute_shader_derivatives`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_cooperative_matrix {
            if !supported.nv_cooperative_matrix {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_cooperative_matrix`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_cooperative_matrix`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_copy_memory_indirect {
            if !supported.nv_copy_memory_indirect {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_copy_memory_indirect`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_copy_memory_indirect`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_corner_sampled_image {
            if !supported.nv_corner_sampled_image {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_corner_sampled_image`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_corner_sampled_image`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_coverage_reduction_mode {
            if !supported.nv_coverage_reduction_mode {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_coverage_reduction_mode`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_coverage_reduction_mode`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_cuda_kernel_launch {
            if !supported.nv_cuda_kernel_launch {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_cuda_kernel_launch`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_dedicated_allocation {
            if !supported.nv_dedicated_allocation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_dedicated_allocation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_dedicated_allocation_image_aliasing {
            if !supported.nv_dedicated_allocation_image_aliasing {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_dedicated_allocation_image_aliasing`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_dedicated_allocation_image_aliasing`"
                            .into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_descriptor_pool_overallocation {
            if !supported.nv_descriptor_pool_overallocation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_descriptor_pool_overallocation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_descriptor_pool_overallocation`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_device_diagnostic_checkpoints {
            if !supported.nv_device_diagnostic_checkpoints {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_device_diagnostic_checkpoints`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_device_diagnostic_checkpoints`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_device_diagnostics_config {
            if !supported.nv_device_diagnostics_config {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_device_diagnostics_config`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_device_diagnostics_config`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_device_generated_commands {
            if !supported.nv_device_generated_commands {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_device_generated_commands`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_device_generated_commands`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_device_generated_commands_compute {
            if !supported.nv_device_generated_commands_compute {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_device_generated_commands_compute`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_displacement_micromap {
            if !supported.nv_displacement_micromap {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_displacement_micromap`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_extended_sparse_address_space {
            if !supported.nv_extended_sparse_address_space {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_extended_sparse_address_space`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_external_memory {
            if !supported.nv_external_memory {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_external_memory`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.nv_external_memory_capabilities) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_external_memory`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "nv_external_memory_capabilities",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_external_memory_rdma {
            if !supported.nv_external_memory_rdma {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_external_memory_rdma`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_external_memory_win32 {
            if !supported.nv_external_memory_win32 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_external_memory_win32`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_fill_rectangle {
            if !supported.nv_fill_rectangle {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_fill_rectangle`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_fragment_coverage_to_color {
            if !supported.nv_fragment_coverage_to_color {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_fragment_coverage_to_color`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_fragment_shader_barycentric {
            if !supported.nv_fragment_shader_barycentric {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_fragment_shader_barycentric`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_fragment_shader_barycentric`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_fragment_shading_rate_enums {
            if !supported.nv_fragment_shading_rate_enums {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_fragment_shading_rate_enums`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_framebuffer_mixed_samples {
            if !supported.nv_framebuffer_mixed_samples {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_framebuffer_mixed_samples`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_geometry_shader_passthrough {
            if !supported.nv_geometry_shader_passthrough {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_geometry_shader_passthrough`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_glsl_shader {
            if !supported.nv_glsl_shader {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_glsl_shader`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_inherited_viewport_scissor {
            if !supported.nv_inherited_viewport_scissor {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_inherited_viewport_scissor`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_inherited_viewport_scissor`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_linear_color_attachment {
            if !supported.nv_linear_color_attachment {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_linear_color_attachment`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_linear_color_attachment`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_low_latency {
            if !supported.nv_low_latency {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_low_latency`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_low_latency2 {
            if !supported.nv_low_latency2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_low_latency2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_memory_decompression {
            if !supported.nv_memory_decompression {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_memory_decompression`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_memory_decompression`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_mesh_shader {
            if !supported.nv_mesh_shader {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_mesh_shader`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_mesh_shader`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_optical_flow {
            if !supported.nv_optical_flow {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_optical_flow`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_optical_flow`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_per_stage_descriptor_set {
            if !supported.nv_per_stage_descriptor_set {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_per_stage_descriptor_set`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_present_barrier {
            if !supported.nv_present_barrier {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_present_barrier`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_present_barrier`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_surface) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_present_barrier`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::InstanceExtension("khr_surface")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_present_barrier`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_surface_capabilities2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_raw_access_chains {
            if !supported.nv_raw_access_chains {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_raw_access_chains`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_ray_tracing {
            if !supported.nv_ray_tracing {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_ray_tracing`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_ray_tracing`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_ray_tracing_invocation_reorder {
            if !supported.nv_ray_tracing_invocation_reorder {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_ray_tracing_invocation_reorder`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_ray_tracing_motion_blur {
            if !supported.nv_ray_tracing_motion_blur {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_ray_tracing_motion_blur`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_ray_tracing_validation {
            if !supported.nv_ray_tracing_validation {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_ray_tracing_validation`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_representative_fragment_test {
            if !supported.nv_representative_fragment_test {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_representative_fragment_test`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_representative_fragment_test`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_sample_mask_override_coverage {
            if !supported.nv_sample_mask_override_coverage {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_sample_mask_override_coverage`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_scissor_exclusive {
            if !supported.nv_scissor_exclusive {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_scissor_exclusive`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_scissor_exclusive`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_shader_atomic_float16_vector {
            if !supported.nv_shader_atomic_float16_vector {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_shader_atomic_float16_vector`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_shader_image_footprint {
            if !supported.nv_shader_image_footprint {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_shader_image_footprint`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_shader_image_footprint`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_shader_sm_builtins {
            if !supported.nv_shader_sm_builtins {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_shader_sm_builtins`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_shader_sm_builtins`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_shader_subgroup_partitioned {
            if !supported.nv_shader_subgroup_partitioned {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_shader_subgroup_partitioned`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_shader_subgroup_partitioned`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_shading_rate_image {
            if !supported.nv_shading_rate_image {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_shading_rate_image`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nv_shading_rate_image`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_viewport_array2 {
            if !supported.nv_viewport_array2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_viewport_array2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_viewport_swizzle {
            if !supported.nv_viewport_swizzle {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_viewport_swizzle`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nv_win32_keyed_mutex {
            if !supported.nv_win32_keyed_mutex {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `nv_win32_keyed_mutex`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_filter_cubic_clamp {
            if !supported.qcom_filter_cubic_clamp {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_filter_cubic_clamp`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_filter_cubic_weights {
            if !supported.qcom_filter_cubic_weights {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_filter_cubic_weights`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_fragment_density_map_offset {
            if !supported.qcom_fragment_density_map_offset {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_fragment_density_map_offset`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `qcom_fragment_density_map_offset`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_image_processing {
            if !supported.qcom_image_processing {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_image_processing`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_image_processing2 {
            if !supported.qcom_image_processing2 {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_image_processing2`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_multiview_per_view_render_areas {
            if !supported.qcom_multiview_per_view_render_areas {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_multiview_per_view_render_areas`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_multiview_per_view_viewports {
            if !supported.qcom_multiview_per_view_viewports {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_multiview_per_view_viewports`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `qcom_multiview_per_view_viewports`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_render_pass_shader_resolve {
            if !supported.qcom_render_pass_shader_resolve {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_render_pass_shader_resolve`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_render_pass_store_ops {
            if !supported.qcom_render_pass_store_ops {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_render_pass_store_ops`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_render_pass_transform {
            if !supported.qcom_render_pass_transform {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_render_pass_transform`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_rotated_copy_commands {
            if !supported.qcom_rotated_copy_commands {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_rotated_copy_commands`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_tile_properties {
            if !supported.qcom_tile_properties {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_tile_properties`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `qcom_tile_properties`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qcom_ycbcr_degamma {
            if !supported.qcom_ycbcr_degamma {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qcom_ycbcr_degamma`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.qnx_external_memory_screen_buffer {
            if !supported.qnx_external_memory_screen_buffer {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `qnx_external_memory_screen_buffer`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sec_amigo_profiling {
            if !supported.sec_amigo_profiling {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `sec_amigo_profiling`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sec_amigo_profiling`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.valve_descriptor_set_host_mapping {
            if !supported.valve_descriptor_set_host_mapping {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `valve_descriptor_set_host_mapping`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= crate::Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `valve_descriptor_set_host_mapping`".into(),
                        requires_one_of: crate::RequiresOneOf(
                            &[
                                crate::RequiresAllOf(
                                    &[crate::Requires::APIVersion(crate::Version::V1_1)],
                                ),
                                crate::RequiresAllOf(
                                    &[
                                        crate::Requires::InstanceExtension(
                                            "khr_get_physical_device_properties2",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.valve_mutable_descriptor_type {
            if !supported.valve_mutable_descriptor_type {
                return Err(
                    Box::new(ValidationError {
                        problem: "contains `valve_mutable_descriptor_type`, but this extension is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        Ok(())
    }
    pub(crate) fn enable_dependencies(
        &self,
        #[allow(unused_variables)]
        api_version: Version,
        #[allow(unused_variables)]
        supported: &Self,
    ) -> Self {
        let mut enabled = *self;
        if supported.khr_portability_subset {
            enabled.khr_portability_subset = true;
        }
        if self.khr_16bit_storage {
            if !(api_version >= crate::Version::V1_1
                || self.khr_storage_buffer_storage_class)
            {
                enabled.khr_storage_buffer_storage_class = true;
            }
        }
        if self.khr_8bit_storage {
            if !(api_version >= crate::Version::V1_1
                || self.khr_storage_buffer_storage_class)
            {
                enabled.khr_storage_buffer_storage_class = true;
            }
        }
        if self.khr_acceleration_structure {
            if !(api_version >= crate::Version::V1_2 || self.ext_descriptor_indexing) {
                enabled.ext_descriptor_indexing = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_buffer_device_address) {
                enabled.khr_buffer_device_address = true;
            }
            if !(self.khr_deferred_host_operations) {
                enabled.khr_deferred_host_operations = true;
            }
        }
        if self.khr_buffer_device_address {
            if !(api_version >= crate::Version::V1_1 || self.khr_device_group) {
                enabled.khr_device_group = true;
            }
        }
        if self.khr_create_renderpass2 {
            if !(api_version >= crate::Version::V1_1 || self.khr_multiview) {
                enabled.khr_multiview = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance2) {
                enabled.khr_maintenance2 = true;
            }
        }
        if self.khr_dedicated_allocation {
            if !(api_version >= crate::Version::V1_1
                || self.khr_get_memory_requirements2)
            {
                enabled.khr_get_memory_requirements2 = true;
            }
        }
        if self.khr_depth_stencil_resolve {
            if !(api_version >= crate::Version::V1_2 || self.khr_create_renderpass2) {
                enabled.khr_create_renderpass2 = true;
            }
        }
        if self.khr_display_swapchain {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.khr_dynamic_rendering {
            if !(api_version >= crate::Version::V1_2 || self.khr_depth_stencil_resolve) {
                enabled.khr_depth_stencil_resolve = true;
            }
        }
        if self.khr_dynamic_rendering_local_read {
            if !(api_version >= crate::Version::V1_3 || self.khr_dynamic_rendering) {
                enabled.khr_dynamic_rendering = true;
            }
        }
        if self.khr_external_fence_fd {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_fence) {
                enabled.khr_external_fence = true;
            }
        }
        if self.khr_external_fence_win32 {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_fence) {
                enabled.khr_external_fence = true;
            }
        }
        if self.khr_external_memory_fd {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.khr_external_memory_win32 {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.khr_external_semaphore_fd {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_semaphore) {
                enabled.khr_external_semaphore = true;
            }
        }
        if self.khr_external_semaphore_win32 {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_semaphore) {
                enabled.khr_external_semaphore = true;
            }
        }
        if self.khr_fragment_shading_rate {
            if !(api_version >= crate::Version::V1_2 || self.khr_create_renderpass2) {
                enabled.khr_create_renderpass2 = true;
            }
        }
        if self.khr_imageless_framebuffer {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance2) {
                enabled.khr_maintenance2 = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_image_format_list) {
                enabled.khr_image_format_list = true;
            }
        }
        if self.khr_incremental_present {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.khr_maintenance5 {
            if !(api_version >= crate::Version::V1_3 || self.khr_dynamic_rendering) {
                enabled.khr_dynamic_rendering = true;
            }
        }
        if self.khr_present_id {
            if !(api_version >= crate::Version::V1_1 || self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.khr_present_wait {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
            if !(self.khr_present_id) {
                enabled.khr_present_id = true;
            }
        }
        if self.khr_ray_query {
            if !(api_version >= crate::Version::V1_2 || self.khr_spirv_1_4) {
                enabled.khr_spirv_1_4 = true;
            }
            if !(self.khr_acceleration_structure) {
                enabled.khr_acceleration_structure = true;
            }
        }
        if self.khr_ray_tracing_maintenance1 {
            if !(self.khr_acceleration_structure) {
                enabled.khr_acceleration_structure = true;
            }
        }
        if self.khr_ray_tracing_pipeline {
            if !(api_version >= crate::Version::V1_2 || self.khr_spirv_1_4) {
                enabled.khr_spirv_1_4 = true;
            }
            if !(self.khr_acceleration_structure) {
                enabled.khr_acceleration_structure = true;
            }
        }
        if self.khr_ray_tracing_position_fetch {
            if !(self.khr_acceleration_structure) {
                enabled.khr_acceleration_structure = true;
            }
        }
        if self.khr_sampler_ycbcr_conversion {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance1) {
                enabled.khr_maintenance1 = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_bind_memory2) {
                enabled.khr_bind_memory2 = true;
            }
            if !(api_version >= crate::Version::V1_1
                || self.khr_get_memory_requirements2)
            {
                enabled.khr_get_memory_requirements2 = true;
            }
        }
        if self.khr_separate_depth_stencil_layouts {
            if !(api_version >= crate::Version::V1_2 || self.khr_create_renderpass2) {
                enabled.khr_create_renderpass2 = true;
            }
        }
        if self.khr_shader_float_controls2 {
            if !(api_version >= crate::Version::V1_2 || self.khr_shader_float_controls) {
                enabled.khr_shader_float_controls = true;
            }
        }
        if self.khr_shader_quad_control {
            if !(api_version >= crate::Version::V1_2 || self.khr_vulkan_memory_model) {
                enabled.khr_vulkan_memory_model = true;
            }
            if !(self.khr_shader_maximal_reconvergence) {
                enabled.khr_shader_maximal_reconvergence = true;
            }
        }
        if self.khr_shared_presentable_image {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.khr_spirv_1_4 {
            if !(api_version >= crate::Version::V1_2 || self.khr_shader_float_controls) {
                enabled.khr_shader_float_controls = true;
            }
        }
        if self.khr_swapchain_mutable_format {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance2) {
                enabled.khr_maintenance2 = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_image_format_list) {
                enabled.khr_image_format_list = true;
            }
        }
        if self.khr_variable_pointers {
            if !(api_version >= crate::Version::V1_1
                || self.khr_storage_buffer_storage_class)
            {
                enabled.khr_storage_buffer_storage_class = true;
            }
        }
        if self.khr_video_decode_av1 {
            if !(self.khr_video_decode_queue) {
                enabled.khr_video_decode_queue = true;
            }
        }
        if self.khr_video_decode_h264 {
            if !(self.khr_video_decode_queue) {
                enabled.khr_video_decode_queue = true;
            }
        }
        if self.khr_video_decode_h265 {
            if !(self.khr_video_decode_queue) {
                enabled.khr_video_decode_queue = true;
            }
        }
        if self.khr_video_decode_queue {
            if !(self.khr_video_queue) {
                enabled.khr_video_queue = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.khr_video_encode_h264 {
            if !(self.khr_video_encode_queue) {
                enabled.khr_video_encode_queue = true;
            }
        }
        if self.khr_video_encode_h265 {
            if !(self.khr_video_encode_queue) {
                enabled.khr_video_encode_queue = true;
            }
        }
        if self.khr_video_encode_queue {
            if !(self.khr_video_queue) {
                enabled.khr_video_queue = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.khr_video_maintenance1 {
            if !(self.khr_video_queue) {
                enabled.khr_video_queue = true;
            }
        }
        if self.khr_video_queue {
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.khr_win32_keyed_mutex {
            if !(self.khr_external_memory_win32) {
                enabled.khr_external_memory_win32 = true;
            }
        }
        if self.ext_attachment_feedback_loop_dynamic_state {
            if !(self.ext_attachment_feedback_loop_layout) {
                enabled.ext_attachment_feedback_loop_layout = true;
            }
        }
        if self.ext_border_color_swizzle {
            if !(self.ext_custom_border_color) {
                enabled.ext_custom_border_color = true;
            }
        }
        if self.ext_descriptor_buffer {
            if !(api_version >= crate::Version::V1_2 || self.khr_buffer_device_address) {
                enabled.khr_buffer_device_address = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.ext_descriptor_indexing) {
                enabled.ext_descriptor_indexing = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.ext_descriptor_indexing {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance3) {
                enabled.khr_maintenance3 = true;
            }
        }
        if self.ext_display_control {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.ext_dynamic_rendering_unused_attachments {
            if !(api_version >= crate::Version::V1_3 || self.khr_dynamic_rendering) {
                enabled.khr_dynamic_rendering = true;
            }
        }
        if self.ext_external_memory_acquire_unmodified {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.ext_external_memory_dma_buf {
            if !(self.khr_external_memory_fd) {
                enabled.khr_external_memory_fd = true;
            }
        }
        if self.ext_external_memory_host {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.ext_fragment_density_map2 {
            if !(self.ext_fragment_density_map) {
                enabled.ext_fragment_density_map = true;
            }
        }
        if self.ext_full_screen_exclusive {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.ext_global_priority_query {
            if !(self.khr_global_priority || self.ext_global_priority) {
                if supported.khr_global_priority {
                    enabled.khr_global_priority = true;
                } else {
                    enabled.ext_global_priority = true;
                }
            }
        }
        if self.ext_graphics_pipeline_library {
            if !(self.khr_pipeline_library) {
                enabled.khr_pipeline_library = true;
            }
        }
        if self.ext_hdr_metadata {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.ext_host_image_copy {
            if !(api_version >= crate::Version::V1_3 || self.khr_copy_commands2) {
                enabled.khr_copy_commands2 = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_format_feature_flags2) {
                enabled.khr_format_feature_flags2 = true;
            }
        }
        if self.ext_image_2d_view_of_3d {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance1) {
                enabled.khr_maintenance1 = true;
            }
        }
        if self.ext_image_compression_control_swapchain {
            if !(self.ext_image_compression_control) {
                enabled.ext_image_compression_control = true;
            }
        }
        if self.ext_image_drm_format_modifier {
            if !(api_version >= crate::Version::V1_1 || self.khr_bind_memory2) {
                enabled.khr_bind_memory2 = true;
            }
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_image_format_list) {
                enabled.khr_image_format_list = true;
            }
        }
        if self.ext_image_sliced_view_of_3d {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance1) {
                enabled.khr_maintenance1 = true;
            }
        }
        if self.ext_inline_uniform_block {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance1) {
                enabled.khr_maintenance1 = true;
            }
        }
        if self.ext_map_memory_placed {
            if !(self.khr_map_memory2) {
                enabled.khr_map_memory2 = true;
            }
        }
        if self.ext_mesh_shader {
            if !(api_version >= crate::Version::V1_2 || self.khr_spirv_1_4) {
                enabled.khr_spirv_1_4 = true;
            }
        }
        if self.ext_multisampled_render_to_single_sampled {
            if !(api_version >= crate::Version::V1_2 || self.khr_create_renderpass2) {
                enabled.khr_create_renderpass2 = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_depth_stencil_resolve) {
                enabled.khr_depth_stencil_resolve = true;
            }
        }
        if self.ext_mutable_descriptor_type {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance3) {
                enabled.khr_maintenance3 = true;
            }
        }
        if self.ext_opacity_micromap {
            if !(self.khr_acceleration_structure) {
                enabled.khr_acceleration_structure = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.ext_pageable_device_local_memory {
            if !(self.ext_memory_priority) {
                enabled.ext_memory_priority = true;
            }
        }
        if self.ext_pipeline_library_group_handles {
            if !(self.khr_ray_tracing_pipeline) {
                enabled.khr_ray_tracing_pipeline = true;
            }
            if !(self.khr_pipeline_library) {
                enabled.khr_pipeline_library = true;
            }
        }
        if self.ext_primitives_generated_query {
            if !(self.ext_transform_feedback) {
                enabled.ext_transform_feedback = true;
            }
        }
        if self.ext_queue_family_foreign {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.ext_rgba10x6_formats {
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
        }
        if self.ext_shader_atomic_float2 {
            if !(self.ext_shader_atomic_float) {
                enabled.ext_shader_atomic_float = true;
            }
        }
        if self.ext_shader_module_identifier {
            if !(api_version >= crate::Version::V1_3
                || self.ext_pipeline_creation_cache_control)
            {
                enabled.ext_pipeline_creation_cache_control = true;
            }
        }
        if self.ext_shader_object {
            if !(api_version >= crate::Version::V1_3 || self.khr_dynamic_rendering) {
                enabled.khr_dynamic_rendering = true;
            }
        }
        if self.ext_swapchain_maintenance1 {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.ext_ycbcr_2plane_444_formats {
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
        }
        if self.ext_ycbcr_image_arrays {
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
        }
        if self.amdx_shader_enqueue {
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
            if !(self.khr_pipeline_library) {
                enabled.khr_pipeline_library = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.khr_spirv_1_4) {
                enabled.khr_spirv_1_4 = true;
            }
        }
        if self.amd_display_native_hdr {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.amd_shader_core_properties2 {
            if !(self.amd_shader_core_properties) {
                enabled.amd_shader_core_properties = true;
            }
        }
        if self.android_external_format_resolve {
            if !(self.android_external_memory_android_hardware_buffer) {
                enabled.android_external_memory_android_hardware_buffer = true;
            }
        }
        if self.android_external_memory_android_hardware_buffer {
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_dedicated_allocation) {
                enabled.khr_dedicated_allocation = true;
            }
            if !(self.ext_queue_family_foreign) {
                enabled.ext_queue_family_foreign = true;
            }
        }
        if self.arm_render_pass_striped {
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.arm_scheduling_controls {
            if !(self.arm_shader_core_builtins) {
                enabled.arm_shader_core_builtins = true;
            }
        }
        if self.fuchsia_buffer_collection {
            if !(self.fuchsia_external_memory) {
                enabled.fuchsia_external_memory = true;
            }
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
        }
        if self.fuchsia_external_memory {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.fuchsia_external_semaphore {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_semaphore) {
                enabled.khr_external_semaphore = true;
            }
        }
        if self.ggp_frame_token {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.google_display_timing {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.huawei_invocation_mask {
            if !(self.khr_ray_tracing_pipeline) {
                enabled.khr_ray_tracing_pipeline = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.huawei_subpass_shading {
            if !(api_version >= crate::Version::V1_2 || self.khr_create_renderpass2) {
                enabled.khr_create_renderpass2 = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.nvx_multiview_per_view_attributes {
            if !(api_version >= crate::Version::V1_1 || self.khr_multiview) {
                enabled.khr_multiview = true;
            }
        }
        if self.nv_copy_memory_indirect {
            if !(api_version >= crate::Version::V1_2 || self.khr_buffer_device_address) {
                enabled.khr_buffer_device_address = true;
            }
        }
        if self.nv_coverage_reduction_mode {
            if !(self.nv_framebuffer_mixed_samples) {
                enabled.nv_framebuffer_mixed_samples = true;
            }
        }
        if self.nv_dedicated_allocation_image_aliasing {
            if !(api_version >= crate::Version::V1_1 || self.khr_dedicated_allocation) {
                enabled.khr_dedicated_allocation = true;
            }
        }
        if self.nv_device_generated_commands {
            if !(api_version >= crate::Version::V1_2 || self.khr_buffer_device_address) {
                enabled.khr_buffer_device_address = true;
            }
        }
        if self.nv_device_generated_commands_compute {
            if !(self.nv_device_generated_commands) {
                enabled.nv_device_generated_commands = true;
            }
        }
        if self.nv_displacement_micromap {
            if !(self.ext_opacity_micromap) {
                enabled.ext_opacity_micromap = true;
            }
        }
        if self.nv_external_memory_rdma {
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
        }
        if self.nv_external_memory_win32 {
            if !(self.nv_external_memory) {
                enabled.nv_external_memory = true;
            }
        }
        if self.nv_fragment_shading_rate_enums {
            if !(self.khr_fragment_shading_rate) {
                enabled.khr_fragment_shading_rate = true;
            }
        }
        if self.nv_low_latency2 {
            if !(api_version >= crate::Version::V1_2 || self.khr_timeline_semaphore) {
                enabled.khr_timeline_semaphore = true;
            }
        }
        if self.nv_memory_decompression {
            if !(api_version >= crate::Version::V1_2 || self.khr_buffer_device_address) {
                enabled.khr_buffer_device_address = true;
            }
        }
        if self.nv_optical_flow {
            if !(api_version >= crate::Version::V1_3 || self.khr_format_feature_flags2) {
                enabled.khr_format_feature_flags2 = true;
            }
            if !(api_version >= crate::Version::V1_3 || self.khr_synchronization2) {
                enabled.khr_synchronization2 = true;
            }
        }
        if self.nv_per_stage_descriptor_set {
            if !(self.khr_maintenance6) {
                enabled.khr_maintenance6 = true;
            }
        }
        if self.nv_present_barrier {
            if !(self.khr_swapchain) {
                enabled.khr_swapchain = true;
            }
        }
        if self.nv_ray_tracing {
            if !(api_version >= crate::Version::V1_1
                || self.khr_get_memory_requirements2)
            {
                enabled.khr_get_memory_requirements2 = true;
            }
        }
        if self.nv_ray_tracing_invocation_reorder {
            if !(self.khr_ray_tracing_pipeline) {
                enabled.khr_ray_tracing_pipeline = true;
            }
        }
        if self.nv_ray_tracing_motion_blur {
            if !(self.khr_ray_tracing_pipeline) {
                enabled.khr_ray_tracing_pipeline = true;
            }
        }
        if self.nv_win32_keyed_mutex {
            if !(self.nv_external_memory_win32) {
                enabled.nv_external_memory_win32 = true;
            }
        }
        if self.qcom_filter_cubic_clamp {
            if !(self.ext_filter_cubic) {
                enabled.ext_filter_cubic = true;
            }
            if !(api_version >= crate::Version::V1_2 || self.ext_sampler_filter_minmax) {
                enabled.ext_sampler_filter_minmax = true;
            }
        }
        if self.qcom_filter_cubic_weights {
            if !(self.ext_filter_cubic) {
                enabled.ext_filter_cubic = true;
            }
        }
        if self.qcom_fragment_density_map_offset {
            if !(self.ext_fragment_density_map) {
                enabled.ext_fragment_density_map = true;
            }
        }
        if self.qcom_image_processing {
            if !(api_version >= crate::Version::V1_3 || self.khr_format_feature_flags2) {
                enabled.khr_format_feature_flags2 = true;
            }
        }
        if self.qcom_image_processing2 {
            if !(self.qcom_image_processing) {
                enabled.qcom_image_processing = true;
            }
        }
        if self.qcom_rotated_copy_commands {
            if !(api_version >= crate::Version::V1_3 || self.khr_copy_commands2) {
                enabled.khr_copy_commands2 = true;
            }
        }
        if self.qnx_external_memory_screen_buffer {
            if !(api_version >= crate::Version::V1_1
                || self.khr_sampler_ycbcr_conversion)
            {
                enabled.khr_sampler_ycbcr_conversion = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_external_memory) {
                enabled.khr_external_memory = true;
            }
            if !(api_version >= crate::Version::V1_1 || self.khr_dedicated_allocation) {
                enabled.khr_dedicated_allocation = true;
            }
            if !(self.ext_queue_family_foreign) {
                enabled.ext_queue_family_foreign = true;
            }
        }
        if self.valve_mutable_descriptor_type {
            if !(api_version >= crate::Version::V1_1 || self.khr_maintenance3) {
                enabled.khr_maintenance3 = true;
            }
        }
        enabled
    }
    pub(crate) fn from_vk<'a>(iter: impl IntoIterator<Item = &'a str>) -> Self {
        let names = Self::NAMES_C
            .iter()
            .map(|name| unsafe { std::str::from_utf8_unchecked(name.to_bytes()) });
        let mut val = Self::empty();
        for name in iter {
            if let Some(index) = names.clone().position(|n| n == name) {
                val.as_mut_array()[index] = true;
            }
        }
        val
    }
    #[allow(clippy::wrong_self_convention)]
    pub(crate) fn to_vk(&self) -> Vec<&'static CStr> {
        let mut val_vk = Vec::new();
        for index in 0..Self::COUNT {
            if self.as_array()[index] {
                val_vk.push(Self::NAMES_C[index]);
            }
        }
        val_vk
    }
}
impl std::fmt::Debug for DeviceExtensions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_list()
            .entries(
                self
                    .iter()
                    .flat_map(|(extension_name_c, enabled)| {
                        enabled.then_some(extension_name_c)
                    }),
            )
            .finish()
    }
}
impl Default for DeviceExtensions {
    #[inline]
    fn default() -> Self {
        Self::empty()
    }
}
impl std::ops::BitAnd for DeviceExtensions {
    type Output = DeviceExtensions;
    #[inline]
    fn bitand(self, rhs: Self) -> Self::Output {
        self.intersection(&rhs)
    }
}
impl std::ops::BitAndAssign for DeviceExtensions {
    #[inline]
    fn bitand_assign(&mut self, rhs: Self) {
        *self = self.intersection(&rhs);
    }
}
impl std::ops::BitOr for DeviceExtensions {
    type Output = DeviceExtensions;
    #[inline]
    fn bitor(self, rhs: Self) -> Self::Output {
        self.union(&rhs)
    }
}
impl std::ops::BitOrAssign for DeviceExtensions {
    #[inline]
    fn bitor_assign(&mut self, rhs: Self) {
        *self = self.union(&rhs);
    }
}
impl std::ops::BitXor for DeviceExtensions {
    type Output = DeviceExtensions;
    #[inline]
    fn bitxor(self, rhs: Self) -> Self::Output {
        self.symmetric_difference(&rhs)
    }
}
impl std::ops::BitXorAssign for DeviceExtensions {
    #[inline]
    fn bitxor_assign(&mut self, rhs: Self) {
        *self = self.symmetric_difference(&rhs);
    }
}
impl std::ops::Sub for DeviceExtensions {
    type Output = DeviceExtensions;
    #[inline]
    fn sub(self, rhs: Self) -> Self::Output {
        self.difference(&rhs)
    }
}
impl std::ops::SubAssign for DeviceExtensions {
    #[inline]
    fn sub_assign(&mut self, rhs: Self) {
        *self = self.difference(&rhs);
    }
}
impl<'a> IntoIterator for &'a DeviceExtensions {
    type Item = (&'static str, bool);
    type IntoIter = extensions::Iter<'a>;
    #[inline]
    fn into_iter(self) -> Self::IntoIter {
        self.iter()
    }
}
mod extensions {
    pub struct Iter<'a> {
        pub(crate) inner: std::iter::Zip<
            std::iter::Copied<std::slice::Iter<'a, &'static std::ffi::CStr>>,
            std::iter::Copied<std::slice::Iter<'a, bool>>,
        >,
    }
    impl<'a> Iterator for Iter<'a> {
        type Item = (&'static str, bool);
        #[inline]
        fn next(&mut self) -> Option<Self::Item> {
            self.inner
                .next()
                .map(|(name, enabled)| {
                    (unsafe { std::str::from_utf8_unchecked(name.to_bytes()) }, enabled)
                })
        }
        #[inline]
        fn size_hint(&self) -> (usize, Option<usize>) {
            self.inner.size_hint()
        }
        #[inline]
        fn nth(&mut self, n: usize) -> Option<Self::Item> {
            self.inner
                .nth(n)
                .map(|(name, enabled)| {
                    (unsafe { std::str::from_utf8_unchecked(name.to_bytes()) }, enabled)
                })
        }
    }
    impl<'a> DoubleEndedIterator for Iter<'a> {
        #[inline]
        fn next_back(&mut self) -> Option<Self::Item> {
            self.inner
                .next_back()
                .map(|(name, enabled)| {
                    (unsafe { std::str::from_utf8_unchecked(name.to_bytes()) }, enabled)
                })
        }
    }
    impl ExactSizeIterator for Iter<'_> {
        #[inline]
        fn len(&self) -> usize {
            self.inner.len()
        }
    }
    impl std::iter::FusedIterator for Iter<'_> {}
}
