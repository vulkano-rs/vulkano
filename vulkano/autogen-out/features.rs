// This file is auto-generated by vulkano autogen from vk.xml header version 1.3.281.
// It should not be edited manually. Changes should be made by editing autogen.


/// Represents all the features that are available on a physical device or enabled
/// on a logical device.
///
/// Depending on the highest version of Vulkan supported by the physical device, and
/// the available extensions, not every feature may be available.
#[derive(Copy, Clone, PartialEq, Eq, Hash)]
#[repr(C)]
pub struct DeviceFeatures {
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html#features-accelerationStructure)
    ///- Requires one of:
    ///  - Device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)
    pub acceleration_structure: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html#features-accelerationStructureCaptureReplay)
    ///- Requires one of:
    ///  - Device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)
    pub acceleration_structure_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html#features-accelerationStructureHostCommands)
    ///- Requires one of:
    ///  - Device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)
    pub acceleration_structure_host_commands: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html#features-accelerationStructureIndirectBuild)
    ///- Requires one of:
    ///  - Device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)
    pub acceleration_structure_indirect_build: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.html#features-advancedBlendCoherentOperations)
    ///- Requires one of:
    ///  - Device extension [`ext_blend_operation_advanced`](crate::device::DeviceExtensions::ext_blend_operation_advanced)
    pub advanced_blend_coherent_operations: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-alphaToOne)
    pub alpha_to_one: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAmigoProfilingFeaturesSEC.html#features-amigoProfiling)
    ///- Requires one of:
    ///  - Device extension [`sec_amigo_profiling`](crate::device::DeviceExtensions::sec_amigo_profiling)
    pub amigo_profiling: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT.html#features-attachmentFeedbackLoopDynamicState)
    ///- Requires one of:
    ///  - Device extension [`ext_attachment_feedback_loop_dynamic_state`](crate::device::DeviceExtensions::ext_attachment_feedback_loop_dynamic_state)
    pub attachment_feedback_loop_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT.html#features-attachmentFeedbackLoopLayout)
    ///- Requires one of:
    ///  - Device extension [`ext_attachment_feedback_loop_layout`](crate::device::DeviceExtensions::ext_attachment_feedback_loop_layout)
    pub attachment_feedback_loop_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html#features-attachmentFragmentShadingRate)
    ///- Requires one of:
    ///  - Device extension [`khr_fragment_shading_rate`](crate::device::DeviceExtensions::khr_fragment_shading_rate)
    pub attachment_fragment_shading_rate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.html#features-borderColorSwizzle)
    ///- Requires one of:
    ///  - Device extension [`ext_border_color_swizzle`](crate::device::DeviceExtensions::ext_border_color_swizzle)
    pub border_color_swizzle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.html#features-borderColorSwizzleFromImage)
    ///- Requires one of:
    ///  - Device extension [`ext_border_color_swizzle`](crate::device::DeviceExtensions::ext_border_color_swizzle)
    pub border_color_swizzle_from_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-bresenhamLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub bresenham_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-bufferDeviceAddress)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)
    ///  - Device extension [`ext_buffer_device_address`](crate::device::DeviceExtensions::ext_buffer_device_address)
    pub buffer_device_address: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-bufferDeviceAddressCaptureReplay)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)
    ///  - Device extension [`ext_buffer_device_address`](crate::device::DeviceExtensions::ext_buffer_device_address)
    pub buffer_device_address_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-bufferDeviceAddressMultiDevice)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)
    ///  - Device extension [`ext_buffer_device_address`](crate::device::DeviceExtensions::ext_buffer_device_address)
    pub buffer_device_address_multi_device: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI.html#features-clustercullingShader)
    ///- Requires one of:
    ///  - Device extension [`huawei_cluster_culling_shader`](crate::device::DeviceExtensions::huawei_cluster_culling_shader)
    pub clusterculling_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceColorWriteEnableFeaturesEXT.html#features-colorWriteEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_color_write_enable`](crate::device::DeviceExtensions::ext_color_write_enable)
    pub color_write_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.html#features-computeDerivativeGroupLinear)
    ///- Requires one of:
    ///  - Device extension [`nv_compute_shader_derivatives`](crate::device::DeviceExtensions::nv_compute_shader_derivatives)
    pub compute_derivative_group_linear: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.html#features-computeDerivativeGroupQuads)
    ///- Requires one of:
    ///  - Device extension [`nv_compute_shader_derivatives`](crate::device::DeviceExtensions::nv_compute_shader_derivatives)
    pub compute_derivative_group_quads: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-computeFullSubgroups)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_subgroup_size_control`](crate::device::DeviceExtensions::ext_subgroup_size_control)
    pub compute_full_subgroups: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConditionalRenderingFeaturesEXT.html#features-conditionalRendering)
    ///- Requires one of:
    ///  - Device extension [`ext_conditional_rendering`](crate::device::DeviceExtensions::ext_conditional_rendering)
    pub conditional_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-constantAlphaColorBlendFactors)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub constant_alpha_color_blend_factors: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesKHR.html#features-cooperativeMatrix)
    ///- Requires one of:
    ///  - Device extension [`khr_cooperative_matrix`](crate::device::DeviceExtensions::khr_cooperative_matrix)
    ///  - Device extension [`nv_cooperative_matrix`](crate::device::DeviceExtensions::nv_cooperative_matrix)
    pub cooperative_matrix: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCooperativeMatrixFeaturesKHR.html#features-cooperativeMatrixRobustBufferAccess)
    ///- Requires one of:
    ///  - Device extension [`khr_cooperative_matrix`](crate::device::DeviceExtensions::khr_cooperative_matrix)
    ///  - Device extension [`nv_cooperative_matrix`](crate::device::DeviceExtensions::nv_cooperative_matrix)
    pub cooperative_matrix_robust_buffer_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCornerSampledImageFeaturesNV.html#features-cornerSampledImage)
    ///- Requires one of:
    ///  - Device extension [`nv_corner_sampled_image`](crate::device::DeviceExtensions::nv_corner_sampled_image)
    pub corner_sampled_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCoverageReductionModeFeaturesNV.html#features-coverageReductionMode)
    ///- Requires one of:
    ///  - Device extension [`nv_coverage_reduction_mode`](crate::device::DeviceExtensions::nv_coverage_reduction_mode)
    pub coverage_reduction_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCubicClampFeaturesQCOM.html#features-cubicRangeClamp)
    ///- Requires one of:
    ///  - Device extension [`qcom_filter_cubic_clamp`](crate::device::DeviceExtensions::qcom_filter_cubic_clamp)
    pub cubic_range_clamp: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCudaKernelLaunchFeaturesNV.html#features-cudaKernelLaunchFeatures)
    ///- Requires one of:
    ///  - Device extension [`nv_cuda_kernel_launch`](crate::device::DeviceExtensions::nv_cuda_kernel_launch)
    pub cuda_kernel_launch_features: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCustomBorderColorFeaturesEXT.html#features-customBorderColorWithoutFormat)
    ///- Requires one of:
    ///  - Device extension [`ext_custom_border_color`](crate::device::DeviceExtensions::ext_custom_border_color)
    pub custom_border_color_without_format: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCustomBorderColorFeaturesEXT.html#features-customBorderColors)
    ///- Requires one of:
    ///  - Device extension [`ext_custom_border_color`](crate::device::DeviceExtensions::ext_custom_border_color)
    pub custom_border_colors: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceASTCDecodeFeaturesEXT.html#features-decodeModeSharedExponent)
    ///- Requires one of:
    ///  - Device extension [`ext_astc_decode_mode`](crate::device::DeviceExtensions::ext_astc_decode_mode)
    pub decode_mode_shared_exponent: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.html#features-dedicatedAllocationImageAliasing)
    ///- Requires one of:
    ///  - Device extension [`nv_dedicated_allocation_image_aliasing`](crate::device::DeviceExtensions::nv_dedicated_allocation_image_aliasing)
    pub dedicated_allocation_image_aliasing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-depthBiasClamp)
    pub depth_bias_clamp: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthBiasControlFeaturesEXT.html#features-depthBiasControl)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_bias_control`](crate::device::DeviceExtensions::ext_depth_bias_control)
    pub depth_bias_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthBiasControlFeaturesEXT.html#features-depthBiasExact)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_bias_control`](crate::device::DeviceExtensions::ext_depth_bias_control)
    pub depth_bias_exact: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-depthBounds)
    pub depth_bounds: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-depthClamp)
    pub depth_clamp: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClampZeroOneFeaturesEXT.html#features-depthClampZeroOne)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_clamp_zero_one`](crate::device::DeviceExtensions::ext_depth_clamp_zero_one)
    pub depth_clamp_zero_one: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClipControlFeaturesEXT.html#features-depthClipControl)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_clip_control`](crate::device::DeviceExtensions::ext_depth_clip_control)
    pub depth_clip_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthClipEnableFeaturesEXT.html#features-depthClipEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_clip_enable`](crate::device::DeviceExtensions::ext_depth_clip_enable)
    pub depth_clip_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAccelerationStructureFeaturesKHR.html#features-descriptorBindingAccelerationStructureUpdateAfterBind)
    ///- Requires one of:
    ///  - Device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)
    pub descriptor_binding_acceleration_structure_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-descriptorBindingInlineUniformBlockUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_inline_uniform_block`](crate::device::DeviceExtensions::ext_inline_uniform_block)
    pub descriptor_binding_inline_uniform_block_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingPartiallyBound)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_partially_bound: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingSampledImageUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_sampled_image_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingStorageBufferUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_storage_buffer_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingStorageImageUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_storage_image_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingStorageTexelBufferUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_storage_texel_buffer_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingUniformBufferUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_uniform_buffer_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingUniformTexelBufferUpdateAfterBind)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_uniform_texel_buffer_update_after_bind: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingUpdateUnusedWhilePending)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_update_unused_while_pending: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorBindingVariableDescriptorCount)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_binding_variable_descriptor_count: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferFeaturesEXT.html#features-descriptorBuffer)
    ///- Requires one of:
    ///  - Device extension [`ext_descriptor_buffer`](crate::device::DeviceExtensions::ext_descriptor_buffer)
    pub descriptor_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferFeaturesEXT.html#features-descriptorBufferCaptureReplay)
    ///- Requires one of:
    ///  - Device extension [`ext_descriptor_buffer`](crate::device::DeviceExtensions::ext_descriptor_buffer)
    pub descriptor_buffer_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferFeaturesEXT.html#features-descriptorBufferImageLayoutIgnored)
    ///- Requires one of:
    ///  - Device extension [`ext_descriptor_buffer`](crate::device::DeviceExtensions::ext_descriptor_buffer)
    pub descriptor_buffer_image_layout_ignored: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorBufferFeaturesEXT.html#features-descriptorBufferPushDescriptors)
    ///- Requires one of:
    ///  - Device extension [`ext_descriptor_buffer`](crate::device::DeviceExtensions::ext_descriptor_buffer)
    pub descriptor_buffer_push_descriptors: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-descriptorIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub descriptor_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV.html#features-descriptorPoolOverallocation)
    ///- Requires one of:
    ///  - Device extension [`nv_descriptor_pool_overallocation`](crate::device::DeviceExtensions::nv_descriptor_pool_overallocation)
    pub descriptor_pool_overallocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE.html#features-descriptorSetHostMapping)
    ///- Requires one of:
    ///  - Device extension [`valve_descriptor_set_host_mapping`](crate::device::DeviceExtensions::valve_descriptor_set_host_mapping)
    pub descriptor_set_host_mapping: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCoherentMemoryFeaturesAMD.html#features-deviceCoherentMemory)
    ///- Requires one of:
    ///  - Device extension [`amd_device_coherent_memory`](crate::device::DeviceExtensions::amd_device_coherent_memory)
    pub device_coherent_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFaultFeaturesEXT.html#features-deviceFault)
    ///- Requires one of:
    ///  - Device extension [`ext_device_fault`](crate::device::DeviceExtensions::ext_device_fault)
    pub device_fault: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFaultFeaturesEXT.html#features-deviceFaultVendorBinary)
    ///- Requires one of:
    ///  - Device extension [`ext_device_fault`](crate::device::DeviceExtensions::ext_device_fault)
    pub device_fault_vendor_binary: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.html#features-deviceGeneratedCommands)
    ///- Requires one of:
    ///  - Device extension [`nv_device_generated_commands`](crate::device::DeviceExtensions::nv_device_generated_commands)
    pub device_generated_commands: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.html#features-deviceGeneratedCompute)
    ///- Requires one of:
    ///  - Device extension [`nv_device_generated_commands_compute`](crate::device::DeviceExtensions::nv_device_generated_commands_compute)
    pub device_generated_compute: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.html#features-deviceGeneratedComputeCaptureReplay)
    ///- Requires one of:
    ///  - Device extension [`nv_device_generated_commands_compute`](crate::device::DeviceExtensions::nv_device_generated_commands_compute)
    pub device_generated_compute_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV.html#features-deviceGeneratedComputePipelines)
    ///- Requires one of:
    ///  - Device extension [`nv_device_generated_commands_compute`](crate::device::DeviceExtensions::nv_device_generated_commands_compute)
    pub device_generated_compute_pipelines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.html#features-deviceMemoryReport)
    ///- Requires one of:
    ///  - Device extension [`ext_device_memory_report`](crate::device::DeviceExtensions::ext_device_memory_report)
    pub device_memory_report: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDiagnosticsConfigFeaturesNV.html#features-diagnosticsConfig)
    ///- Requires one of:
    ///  - Device extension [`nv_device_diagnostics_config`](crate::device::DeviceExtensions::nv_device_diagnostics_config)
    pub diagnostics_config: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDisplacementMicromapFeaturesNV.html#features-displacementMicromap)
    ///- Requires one of:
    ///  - Device extension [`nv_displacement_micromap`](crate::device::DeviceExtensions::nv_displacement_micromap)
    pub displacement_micromap: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-drawIndirectCount)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`khr_draw_indirect_count`](crate::device::DeviceExtensions::khr_draw_indirect_count)
    pub draw_indirect_count: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-drawIndirectFirstInstance)
    pub draw_indirect_first_instance: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-dualSrcBlend)
    pub dual_src_blend: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerStageDescriptorSetFeaturesNV.html#features-dynamicPipelineLayout)
    ///- Requires one of:
    ///  - Device extension [`nv_per_stage_descriptor_set`](crate::device::DeviceExtensions::nv_per_stage_descriptor_set)
    pub dynamic_pipeline_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-dynamicRendering)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_dynamic_rendering`](crate::device::DeviceExtensions::khr_dynamic_rendering)
    pub dynamic_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR.html#features-dynamicRenderingLocalRead)
    ///- Requires one of:
    ///  - Device extension [`khr_dynamic_rendering_local_read`](crate::device::DeviceExtensions::khr_dynamic_rendering_local_read)
    pub dynamic_rendering_local_read: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT.html#features-dynamicRenderingUnusedAttachments)
    ///- Requires one of:
    ///  - Device extension [`ext_dynamic_rendering_unused_attachments`](crate::device::DeviceExtensions::ext_dynamic_rendering_unused_attachments)
    pub dynamic_rendering_unused_attachments: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-events)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub events: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExclusiveScissorFeaturesNV.html#features-exclusiveScissor)
    ///- Requires one of:
    ///  - Device extension [`nv_scissor_exclusive`](crate::device::DeviceExtensions::nv_scissor_exclusive)
    pub exclusive_scissor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.html#features-extendedDynamicState)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state`](crate::device::DeviceExtensions::ext_extended_dynamic_state)
    pub extended_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html#features-extendedDynamicState2)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state2`](crate::device::DeviceExtensions::ext_extended_dynamic_state2)
    pub extended_dynamic_state2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html#features-extendedDynamicState2LogicOp)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state2`](crate::device::DeviceExtensions::ext_extended_dynamic_state2)
    pub extended_dynamic_state2_logic_op: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.html#features-extendedDynamicState2PatchControlPoints)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state2`](crate::device::DeviceExtensions::ext_extended_dynamic_state2)
    pub extended_dynamic_state2_patch_control_points: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3AlphaToCoverageEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_alpha_to_coverage_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3AlphaToOneEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_alpha_to_one_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ColorBlendAdvanced)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_color_blend_advanced: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ColorBlendEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_color_blend_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ColorBlendEquation)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_color_blend_equation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ColorWriteMask)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_color_write_mask: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ConservativeRasterizationMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_conservative_rasterization_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageModulationMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_modulation_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageModulationTable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_modulation_table: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageModulationTableEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_modulation_table_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageReductionMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_reduction_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageToColorEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_to_color_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3CoverageToColorLocation)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_coverage_to_color_location: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3DepthClampEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_depth_clamp_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3DepthClipEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_depth_clip_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3DepthClipNegativeOneToOne)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_depth_clip_negative_one_to_one: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ExtraPrimitiveOverestimationSize)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_extra_primitive_overestimation_size: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3LineRasterizationMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_line_rasterization_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3LineStippleEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_line_stipple_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3LogicOpEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_logic_op_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3PolygonMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_polygon_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ProvokingVertexMode)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_provoking_vertex_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3RasterizationSamples)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_rasterization_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3RasterizationStream)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_rasterization_stream: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3RepresentativeFragmentTestEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_representative_fragment_test_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3SampleLocationsEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_sample_locations_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3SampleMask)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_sample_mask: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ShadingRateImageEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_shading_rate_image_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3TessellationDomainOrigin)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_tessellation_domain_origin: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ViewportSwizzle)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_viewport_swizzle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedDynamicState3FeaturesEXT.html#features-extendedDynamicState3ViewportWScalingEnable)
    ///- Requires one of:
    ///  - Device extension [`ext_extended_dynamic_state3`](crate::device::DeviceExtensions::ext_extended_dynamic_state3)
    pub extended_dynamic_state3_viewport_w_scaling_enable: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV.html#features-extendedSparseAddressSpace)
    ///- Requires one of:
    ///  - Device extension [`nv_extended_sparse_address_space`](crate::device::DeviceExtensions::nv_extended_sparse_address_space)
    pub extended_sparse_address_space: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFormatResolveFeaturesANDROID.html#features-externalFormatResolve)
    ///- Requires one of:
    ///  - Device extension [`android_external_format_resolve`](crate::device::DeviceExtensions::android_external_format_resolve)
    pub external_format_resolve: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.html#features-externalMemoryRDMA)
    ///- Requires one of:
    ///  - Device extension [`nv_external_memory_rdma`](crate::device::DeviceExtensions::nv_external_memory_rdma)
    pub external_memory_rdma: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-fillModeNonSolid)
    pub fill_mode_non_solid: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthBiasControlFeaturesEXT.html#features-floatRepresentation)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_bias_control`](crate::device::DeviceExtensions::ext_depth_bias_control)
    pub float_representation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice4444FormatsFeaturesEXT.html#features-formatA4B4G4R4)
    ///- Requires one of:
    ///  - Device extension [`ext_4444_formats`](crate::device::DeviceExtensions::ext_4444_formats)
    pub format_a4b4g4r4: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice4444FormatsFeaturesEXT.html#features-formatA4R4G4B4)
    ///- Requires one of:
    ///  - Device extension [`ext_4444_formats`](crate::device::DeviceExtensions::ext_4444_formats)
    pub format_a4r4g4b4: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.html#features-formatRgba10x6WithoutYCbCrSampler)
    ///- Requires one of:
    ///  - Device extension [`ext_rgba10x6_formats`](crate::device::DeviceExtensions::ext_rgba10x6_formats)
    pub format_rgba10x6_without_y_cb_cr_sampler: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html#features-fragmentDensityMap)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_density_map`](crate::device::DeviceExtensions::ext_fragment_density_map)
    pub fragment_density_map: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.html#features-fragmentDensityMapDeferred)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_density_map2`](crate::device::DeviceExtensions::ext_fragment_density_map2)
    pub fragment_density_map_deferred: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html#features-fragmentDensityMapDynamic)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_density_map`](crate::device::DeviceExtensions::ext_fragment_density_map)
    pub fragment_density_map_dynamic: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html#features-fragmentDensityMapNonSubsampledImages)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_density_map`](crate::device::DeviceExtensions::ext_fragment_density_map)
    pub fragment_density_map_non_subsampled_images: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.html#features-fragmentDensityMapOffset)
    ///- Requires one of:
    ///  - Device extension [`qcom_fragment_density_map_offset`](crate::device::DeviceExtensions::qcom_fragment_density_map_offset)
    pub fragment_density_map_offset: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR.html#features-fragmentShaderBarycentric)
    ///- Requires one of:
    ///  - Device extension [`khr_fragment_shader_barycentric`](crate::device::DeviceExtensions::khr_fragment_shader_barycentric)
    ///  - Device extension [`nv_fragment_shader_barycentric`](crate::device::DeviceExtensions::nv_fragment_shader_barycentric)
    pub fragment_shader_barycentric: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html#features-fragmentShaderPixelInterlock)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_shader_interlock`](crate::device::DeviceExtensions::ext_fragment_shader_interlock)
    pub fragment_shader_pixel_interlock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html#features-fragmentShaderSampleInterlock)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_shader_interlock`](crate::device::DeviceExtensions::ext_fragment_shader_interlock)
    pub fragment_shader_sample_interlock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.html#features-fragmentShaderShadingRateInterlock)
    ///- Requires one of:
    ///  - Device extension [`ext_fragment_shader_interlock`](crate::device::DeviceExtensions::ext_fragment_shader_interlock)
    pub fragment_shader_shading_rate_interlock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html#features-fragmentShadingRateEnums)
    ///- Requires one of:
    ///  - Device extension [`nv_fragment_shading_rate_enums`](crate::device::DeviceExtensions::nv_fragment_shading_rate_enums)
    pub fragment_shading_rate_enums: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-fragmentStoresAndAtomics)
    pub fragment_stores_and_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFrameBoundaryFeaturesEXT.html#features-frameBoundary)
    ///- Requires one of:
    ///  - Device extension [`ext_frame_boundary`](crate::device::DeviceExtensions::ext_frame_boundary)
    pub frame_boundary: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-fullDrawIndexUint32)
    pub full_draw_index_uint32: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-geometryShader)
    pub geometry_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackFeaturesEXT.html#features-geometryStreams)
    ///- Requires one of:
    ///  - Device extension [`ext_transform_feedback`](crate::device::DeviceExtensions::ext_transform_feedback)
    pub geometry_streams: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.html#features-globalPriorityQuery)
    ///- Requires one of:
    ///  - Device extension [`khr_global_priority`](crate::device::DeviceExtensions::khr_global_priority)
    ///  - Device extension [`ext_global_priority_query`](crate::device::DeviceExtensions::ext_global_priority_query)
    pub global_priority_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT.html#features-graphicsPipelineLibrary)
    ///- Requires one of:
    ///  - Device extension [`ext_graphics_pipeline_library`](crate::device::DeviceExtensions::ext_graphics_pipeline_library)
    pub graphics_pipeline_library: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceHostImageCopyFeaturesEXT.html#features-hostImageCopy)
    ///- Requires one of:
    ///  - Device extension [`ext_host_image_copy`](crate::device::DeviceExtensions::ext_host_image_copy)
    pub host_image_copy: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-hostQueryReset)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_host_query_reset`](crate::device::DeviceExtensions::ext_host_query_reset)
    pub host_query_reset: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.html#features-image2DViewOf3D)
    ///- Requires one of:
    ///  - Device extension [`ext_image_2d_view_of_3d`](crate::device::DeviceExtensions::ext_image_2d_view_of_3d)
    pub image2_d_view_of3_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageCompressionControlFeaturesEXT.html#features-imageCompressionControl)
    ///- Requires one of:
    ///  - Device extension [`ext_image_compression_control`](crate::device::DeviceExtensions::ext_image_compression_control)
    pub image_compression_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT.html#features-imageCompressionControlSwapchain)
    ///- Requires one of:
    ///  - Device extension [`ext_image_compression_control_swapchain`](crate::device::DeviceExtensions::ext_image_compression_control_swapchain)
    pub image_compression_control_swapchain: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-imageCubeArray)
    pub image_cube_array: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderImageFootprintFeaturesNV.html#features-imageFootprint)
    ///- Requires one of:
    ///  - Device extension [`nv_shader_image_footprint`](crate::device::DeviceExtensions::nv_shader_image_footprint)
    pub image_footprint: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT.html#features-imageSlicedViewOf3D)
    ///- Requires one of:
    ///  - Device extension [`ext_image_sliced_view_of_3d`](crate::device::DeviceExtensions::ext_image_sliced_view_of_3d)
    pub image_sliced_view_of3_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-imageView2DOn3DImage)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub image_view2_d_on3_d_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-imageViewFormatReinterpretation)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub image_view_format_reinterpretation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-imageViewFormatSwizzle)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub image_view_format_swizzle: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-imagelessFramebuffer)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_imageless_framebuffer`](crate::device::DeviceExtensions::khr_imageless_framebuffer)
    pub imageless_framebuffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-independentBlend)
    pub independent_blend: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIndexTypeUint8FeaturesKHR.html#features-indexTypeUint8)
    ///- Requires one of:
    ///  - Device extension [`khr_index_type_uint8`](crate::device::DeviceExtensions::khr_index_type_uint8)
    ///  - Device extension [`ext_index_type_uint8`](crate::device::DeviceExtensions::ext_index_type_uint8)
    pub index_type_uint8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCopyMemoryIndirectFeaturesNV.html#features-indirectCopy)
    ///- Requires one of:
    ///  - Device extension [`nv_copy_memory_indirect`](crate::device::DeviceExtensions::nv_copy_memory_indirect)
    pub indirect_copy: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceConditionalRenderingFeaturesEXT.html#features-inheritedConditionalRendering)
    ///- Requires one of:
    ///  - Device extension [`ext_conditional_rendering`](crate::device::DeviceExtensions::ext_conditional_rendering)
    pub inherited_conditional_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-inheritedQueries)
    pub inherited_queries: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInheritedViewportScissorFeaturesNV.html#features-inheritedViewportScissor2D)
    ///- Requires one of:
    ///  - Device extension [`nv_inherited_viewport_scissor`](crate::device::DeviceExtensions::nv_inherited_viewport_scissor)
    pub inherited_viewport_scissor2_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-inlineUniformBlock)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_inline_uniform_block`](crate::device::DeviceExtensions::ext_inline_uniform_block)
    pub inline_uniform_block: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.html#features-invocationMask)
    ///- Requires one of:
    ///  - Device extension [`huawei_invocation_mask`](crate::device::DeviceExtensions::huawei_invocation_mask)
    pub invocation_mask: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-largePoints)
    pub large_points: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceDepthBiasControlFeaturesEXT.html#features-leastRepresentableValueForceUnormRepresentation)
    ///- Requires one of:
    ///  - Device extension [`ext_depth_bias_control`](crate::device::DeviceExtensions::ext_depth_bias_control)
    pub least_representable_value_force_unorm_representation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLegacyDitheringFeaturesEXT.html#features-legacyDithering)
    ///- Requires one of:
    ///  - Device extension [`ext_legacy_dithering`](crate::device::DeviceExtensions::ext_legacy_dithering)
    pub legacy_dithering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLinearColorAttachmentFeaturesNV.html#features-linearColorAttachment)
    ///- Requires one of:
    ///  - Device extension [`nv_linear_color_attachment`](crate::device::DeviceExtensions::nv_linear_color_attachment)
    pub linear_color_attachment: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-logicOp)
    pub logic_op: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-maintenance4)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_maintenance4`](crate::device::DeviceExtensions::khr_maintenance4)
    pub maintenance4: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance5FeaturesKHR.html#features-maintenance5)
    ///- Requires one of:
    ///  - Device extension [`khr_maintenance5`](crate::device::DeviceExtensions::khr_maintenance5)
    pub maintenance5: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance6FeaturesKHR.html#features-maintenance6)
    ///- Requires one of:
    ///  - Device extension [`khr_maintenance6`](crate::device::DeviceExtensions::khr_maintenance6)
    pub maintenance6: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryDecompressionFeaturesNV.html#features-memoryDecompression)
    ///- Requires one of:
    ///  - Device extension [`nv_memory_decompression`](crate::device::DeviceExtensions::nv_memory_decompression)
    pub memory_decompression: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedFeaturesEXT.html#features-memoryMapPlaced)
    ///- Requires one of:
    ///  - Device extension [`ext_map_memory_placed`](crate::device::DeviceExtensions::ext_map_memory_placed)
    pub memory_map_placed: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedFeaturesEXT.html#features-memoryMapRangePlaced)
    ///- Requires one of:
    ///  - Device extension [`ext_map_memory_placed`](crate::device::DeviceExtensions::ext_map_memory_placed)
    pub memory_map_range_placed: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryPriorityFeaturesEXT.html#features-memoryPriority)
    ///- Requires one of:
    ///  - Device extension [`ext_memory_priority`](crate::device::DeviceExtensions::ext_memory_priority)
    pub memory_priority: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMapMemoryPlacedFeaturesEXT.html#features-memoryUnmapReserve)
    ///- Requires one of:
    ///  - Device extension [`ext_map_memory_placed`](crate::device::DeviceExtensions::ext_map_memory_placed)
    pub memory_unmap_reserve: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html#features-meshShader)
    ///- Requires one of:
    ///  - Device extension [`ext_mesh_shader`](crate::device::DeviceExtensions::ext_mesh_shader)
    ///  - Device extension [`nv_mesh_shader`](crate::device::DeviceExtensions::nv_mesh_shader)
    pub mesh_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html#features-meshShaderQueries)
    ///- Requires one of:
    ///  - Device extension [`ext_mesh_shader`](crate::device::DeviceExtensions::ext_mesh_shader)
    pub mesh_shader_queries: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapFeaturesEXT.html#features-micromap)
    ///- Requires one of:
    ///  - Device extension [`ext_opacity_micromap`](crate::device::DeviceExtensions::ext_opacity_micromap)
    pub micromap: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapFeaturesEXT.html#features-micromapCaptureReplay)
    ///- Requires one of:
    ///  - Device extension [`ext_opacity_micromap`](crate::device::DeviceExtensions::ext_opacity_micromap)
    pub micromap_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpacityMicromapFeaturesEXT.html#features-micromapHostCommands)
    ///- Requires one of:
    ///  - Device extension [`ext_opacity_micromap`](crate::device::DeviceExtensions::ext_opacity_micromap)
    pub micromap_host_commands: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageViewMinLodFeaturesEXT.html#features-minLod)
    ///- Requires one of:
    ///  - Device extension [`ext_image_view_min_lod`](crate::device::DeviceExtensions::ext_image_view_min_lod)
    pub min_lod: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiDrawFeaturesEXT.html#features-multiDraw)
    ///- Requires one of:
    ///  - Device extension [`ext_multi_draw`](crate::device::DeviceExtensions::ext_multi_draw)
    pub multi_draw: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-multiDrawIndirect)
    pub multi_draw_indirect: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-multiViewport)
    pub multi_viewport: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-multisampleArrayImage)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub multisample_array_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT.html#features-multisampledRenderToSingleSampled)
    ///- Requires one of:
    ///  - Device extension [`ext_multisampled_render_to_single_sampled`](crate::device::DeviceExtensions::ext_multisampled_render_to_single_sampled)
    pub multisampled_render_to_single_sampled: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-multiview)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_multiview`](crate::device::DeviceExtensions::khr_multiview)
    pub multiview: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI.html#features-multiviewClusterCullingShader)
    ///- Requires one of:
    ///  - Device extension [`huawei_cluster_culling_shader`](crate::device::DeviceExtensions::huawei_cluster_culling_shader)
    pub multiview_cluster_culling_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-multiviewGeometryShader)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_multiview`](crate::device::DeviceExtensions::khr_multiview)
    ///- Requires feature: [`multiview`](Self::multiview)
    pub multiview_geometry_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html#features-multiviewMeshShader)
    ///- Requires one of:
    ///  - Device extension [`ext_mesh_shader`](crate::device::DeviceExtensions::ext_mesh_shader)
    ///- Requires feature: [`multiview`](Self::multiview)
    pub multiview_mesh_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM.html#features-multiviewPerViewRenderAreas)
    ///- Requires one of:
    ///  - Device extension [`qcom_multiview_per_view_render_areas`](crate::device::DeviceExtensions::qcom_multiview_per_view_render_areas)
    pub multiview_per_view_render_areas: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM.html#features-multiviewPerViewViewports)
    ///- Requires one of:
    ///  - Device extension [`qcom_multiview_per_view_viewports`](crate::device::DeviceExtensions::qcom_multiview_per_view_viewports)
    pub multiview_per_view_viewports: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-multiviewTessellationShader)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_multiview`](crate::device::DeviceExtensions::khr_multiview)
    ///- Requires feature: [`multiview`](Self::multiview)
    pub multiview_tessellation_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-mutableComparisonSamplers)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub mutable_comparison_samplers: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT.html#features-mutableDescriptorType)
    ///- Requires one of:
    ///  - Device extension [`ext_mutable_descriptor_type`](crate::device::DeviceExtensions::ext_mutable_descriptor_type)
    ///  - Device extension [`valve_mutable_descriptor_type`](crate::device::DeviceExtensions::valve_mutable_descriptor_type)
    pub mutable_descriptor_type: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferFeaturesEXT.html#features-nestedCommandBuffer)
    ///- Requires one of:
    ///  - Device extension [`ext_nested_command_buffer`](crate::device::DeviceExtensions::ext_nested_command_buffer)
    pub nested_command_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferFeaturesEXT.html#features-nestedCommandBufferRendering)
    ///- Requires one of:
    ///  - Device extension [`ext_nested_command_buffer`](crate::device::DeviceExtensions::ext_nested_command_buffer)
    pub nested_command_buffer_rendering: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNestedCommandBufferFeaturesEXT.html#features-nestedCommandBufferSimultaneousUse)
    ///- Requires one of:
    ///  - Device extension [`ext_nested_command_buffer`](crate::device::DeviceExtensions::ext_nested_command_buffer)
    pub nested_command_buffer_simultaneous_use: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html#features-noInvocationFragmentShadingRates)
    ///- Requires one of:
    ///  - Device extension [`nv_fragment_shading_rate_enums`](crate::device::DeviceExtensions::nv_fragment_shading_rate_enums)
    pub no_invocation_fragment_shading_rates: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT.html#features-nonSeamlessCubeMap)
    ///- Requires one of:
    ///  - Device extension [`ext_non_seamless_cube_map`](crate::device::DeviceExtensions::ext_non_seamless_cube_map)
    pub non_seamless_cube_map: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html#features-nullDescriptor)
    ///- Requires one of:
    ///  - Device extension [`ext_robustness2`](crate::device::DeviceExtensions::ext_robustness2)
    pub null_descriptor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-occlusionQueryPrecise)
    pub occlusion_query_precise: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceOpticalFlowFeaturesNV.html#features-opticalFlow)
    ///- Requires one of:
    ///  - Device extension [`nv_optical_flow`](crate::device::DeviceExtensions::nv_optical_flow)
    pub optical_flow: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.html#features-pageableDeviceLocalMemory)
    ///- Requires one of:
    ///  - Device extension [`ext_pageable_device_local_memory`](crate::device::DeviceExtensions::ext_pageable_device_local_memory)
    pub pageable_device_local_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerStageDescriptorSetFeaturesNV.html#features-perStageDescriptorSet)
    ///- Requires one of:
    ///  - Device extension [`nv_per_stage_descriptor_set`](crate::device::DeviceExtensions::nv_per_stage_descriptor_set)
    pub per_stage_descriptor_set: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerformanceQueryFeaturesKHR.html#features-performanceCounterMultipleQueryPools)
    ///- Requires one of:
    ///  - Device extension [`khr_performance_query`](crate::device::DeviceExtensions::khr_performance_query)
    pub performance_counter_multiple_query_pools: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePerformanceQueryFeaturesKHR.html#features-performanceCounterQueryPools)
    ///- Requires one of:
    ///  - Device extension [`khr_performance_query`](crate::device::DeviceExtensions::khr_performance_query)
    pub performance_counter_query_pools: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-pipelineCreationCacheControl)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_pipeline_creation_cache_control`](crate::device::DeviceExtensions::ext_pipeline_creation_cache_control)
    pub pipeline_creation_cache_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.html#features-pipelineExecutableInfo)
    ///- Requires one of:
    ///  - Device extension [`khr_pipeline_executable_properties`](crate::device::DeviceExtensions::khr_pipeline_executable_properties)
    pub pipeline_executable_info: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html#features-pipelineFragmentShadingRate)
    ///- Requires one of:
    ///  - Device extension [`khr_fragment_shading_rate`](crate::device::DeviceExtensions::khr_fragment_shading_rate)
    pub pipeline_fragment_shading_rate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT.html#features-pipelineLibraryGroupHandles)
    ///- Requires one of:
    ///  - Device extension [`ext_pipeline_library_group_handles`](crate::device::DeviceExtensions::ext_pipeline_library_group_handles)
    pub pipeline_library_group_handles: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelinePropertiesFeaturesEXT.html#features-pipelinePropertiesIdentifier)
    ///- Requires one of:
    ///  - Device extension [`ext_pipeline_properties`](crate::device::DeviceExtensions::ext_pipeline_properties)
    pub pipeline_properties_identifier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineProtectedAccessFeaturesEXT.html#features-pipelineProtectedAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_pipeline_protected_access`](crate::device::DeviceExtensions::ext_pipeline_protected_access)
    pub pipeline_protected_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePipelineRobustnessFeaturesEXT.html#features-pipelineRobustness)
    ///- Requires one of:
    ///  - Device extension [`ext_pipeline_robustness`](crate::device::DeviceExtensions::ext_pipeline_robustness)
    pub pipeline_robustness: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-pipelineStatisticsQuery)
    pub pipeline_statistics_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-pointPolygons)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub point_polygons: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentBarrierFeaturesNV.html#features-presentBarrier)
    ///- Requires one of:
    ///  - Device extension [`nv_present_barrier`](crate::device::DeviceExtensions::nv_present_barrier)
    pub present_barrier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentIdFeaturesKHR.html#features-presentId)
    ///- Requires one of:
    ///  - Device extension [`khr_present_id`](crate::device::DeviceExtensions::khr_present_id)
    pub present_id: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePresentWaitFeaturesKHR.html#features-presentWait)
    ///- Requires one of:
    ///  - Device extension [`khr_present_wait`](crate::device::DeviceExtensions::khr_present_wait)
    pub present_wait: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateFeaturesKHR.html#features-primitiveFragmentShadingRate)
    ///- Requires one of:
    ///  - Device extension [`khr_fragment_shading_rate`](crate::device::DeviceExtensions::khr_fragment_shading_rate)
    pub primitive_fragment_shading_rate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html#features-primitiveFragmentShadingRateMeshShader)
    ///- Requires one of:
    ///  - Device extension [`ext_mesh_shader`](crate::device::DeviceExtensions::ext_mesh_shader)
    ///- Requires feature: [`primitive_fragment_shading_rate`](Self::primitive_fragment_shading_rate)
    pub primitive_fragment_shading_rate_mesh_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.html#features-primitiveTopologyListRestart)
    ///- Requires one of:
    ///  - Device extension [`ext_primitive_topology_list_restart`](crate::device::DeviceExtensions::ext_primitive_topology_list_restart)
    pub primitive_topology_list_restart: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.html#features-primitiveTopologyPatchListRestart)
    ///- Requires one of:
    ///  - Device extension [`ext_primitive_topology_list_restart`](crate::device::DeviceExtensions::ext_primitive_topology_list_restart)
    pub primitive_topology_patch_list_restart: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.html#features-primitivesGeneratedQuery)
    ///- Requires one of:
    ///  - Device extension [`ext_primitives_generated_query`](crate::device::DeviceExtensions::ext_primitives_generated_query)
    pub primitives_generated_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.html#features-primitivesGeneratedQueryWithNonZeroStreams)
    ///- Requires one of:
    ///  - Device extension [`ext_primitives_generated_query`](crate::device::DeviceExtensions::ext_primitives_generated_query)
    pub primitives_generated_query_with_non_zero_streams: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT.html#features-primitivesGeneratedQueryWithRasterizerDiscard)
    ///- Requires one of:
    ///  - Device extension [`ext_primitives_generated_query`](crate::device::DeviceExtensions::ext_primitives_generated_query)
    pub primitives_generated_query_with_rasterizer_discard: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-privateData)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_private_data`](crate::device::DeviceExtensions::ext_private_data)
    pub private_data: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-protectedMemory)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    pub protected_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexFeaturesEXT.html#features-provokingVertexLast)
    ///- Requires one of:
    ///  - Device extension [`ext_provoking_vertex`](crate::device::DeviceExtensions::ext_provoking_vertex)
    pub provoking_vertex_last: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.html#features-rasterizationOrderColorAttachmentAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_rasterization_order_attachment_access`](crate::device::DeviceExtensions::ext_rasterization_order_attachment_access)
    ///  - Device extension [`arm_rasterization_order_attachment_access`](crate::device::DeviceExtensions::arm_rasterization_order_attachment_access)
    pub rasterization_order_color_attachment_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.html#features-rasterizationOrderDepthAttachmentAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_rasterization_order_attachment_access`](crate::device::DeviceExtensions::ext_rasterization_order_attachment_access)
    ///  - Device extension [`arm_rasterization_order_attachment_access`](crate::device::DeviceExtensions::arm_rasterization_order_attachment_access)
    pub rasterization_order_depth_attachment_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT.html#features-rasterizationOrderStencilAttachmentAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_rasterization_order_attachment_access`](crate::device::DeviceExtensions::ext_rasterization_order_attachment_access)
    ///  - Device extension [`arm_rasterization_order_attachment_access`](crate::device::DeviceExtensions::arm_rasterization_order_attachment_access)
    pub rasterization_order_stencil_attachment_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayQueryFeaturesKHR.html#features-rayQuery)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_query`](crate::device::DeviceExtensions::khr_ray_query)
    pub ray_query: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV.html#features-rayTracingInvocationReorder)
    ///- Requires one of:
    ///  - Device extension [`nv_ray_tracing_invocation_reorder`](crate::device::DeviceExtensions::nv_ray_tracing_invocation_reorder)
    pub ray_tracing_invocation_reorder: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.html#features-rayTracingMaintenance1)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_maintenance1`](crate::device::DeviceExtensions::khr_ray_tracing_maintenance1)
    pub ray_tracing_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.html#features-rayTracingMotionBlur)
    ///- Requires one of:
    ///  - Device extension [`nv_ray_tracing_motion_blur`](crate::device::DeviceExtensions::nv_ray_tracing_motion_blur)
    pub ray_tracing_motion_blur: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.html#features-rayTracingMotionBlurPipelineTraceRaysIndirect)
    ///- Requires one of:
    ///  - Device extension [`nv_ray_tracing_motion_blur`](crate::device::DeviceExtensions::nv_ray_tracing_motion_blur)
    pub ray_tracing_motion_blur_pipeline_trace_rays_indirect: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html#features-rayTracingPipeline)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)
    pub ray_tracing_pipeline: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html#features-rayTracingPipelineShaderGroupHandleCaptureReplay)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)
    pub ray_tracing_pipeline_shader_group_handle_capture_replay: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html#features-rayTracingPipelineShaderGroupHandleCaptureReplayMixed)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)
    ///- Requires feature: [`ray_tracing_pipeline_shader_group_handle_capture_replay`](Self::ray_tracing_pipeline_shader_group_handle_capture_replay)
    pub ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html#features-rayTracingPipelineTraceRaysIndirect)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)
    pub ray_tracing_pipeline_trace_rays_indirect: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR.html#features-rayTracingPipelineTraceRaysIndirect2)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_maintenance1`](crate::device::DeviceExtensions::khr_ray_tracing_maintenance1)
    pub ray_tracing_pipeline_trace_rays_indirect2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR.html#features-rayTracingPositionFetch)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_position_fetch`](crate::device::DeviceExtensions::khr_ray_tracing_position_fetch)
    pub ray_tracing_position_fetch: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingValidationFeaturesNV.html#features-rayTracingValidation)
    ///- Requires one of:
    ///  - Device extension [`nv_ray_tracing_validation`](crate::device::DeviceExtensions::nv_ray_tracing_validation)
    pub ray_tracing_validation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRayTracingPipelineFeaturesKHR.html#features-rayTraversalPrimitiveCulling)
    ///- Requires one of:
    ///  - Device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)
    pub ray_traversal_primitive_culling: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-rectangularLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub rectangular_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG.html#features-relaxedLineRasterization)
    ///- Requires one of:
    ///  - Device extension [`img_relaxed_line_rasterization`](crate::device::DeviceExtensions::img_relaxed_line_rasterization)
    pub relaxed_line_rasterization: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRenderPassStripedFeaturesARM.html#features-renderPassStriped)
    ///- Requires one of:
    ///  - Device extension [`arm_render_pass_striped`](crate::device::DeviceExtensions::arm_render_pass_striped)
    pub render_pass_striped: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceAddressBindingReportFeaturesEXT.html#features-reportAddressBinding)
    ///- Requires one of:
    ///  - Device extension [`ext_device_address_binding_report`](crate::device::DeviceExtensions::ext_device_address_binding_report)
    pub report_address_binding: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.html#features-representativeFragmentTest)
    ///- Requires one of:
    ///  - Device extension [`nv_representative_fragment_test`](crate::device::DeviceExtensions::nv_representative_fragment_test)
    pub representative_fragment_test: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-robustBufferAccess)
    pub robust_buffer_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html#features-robustBufferAccess2)
    ///- Requires one of:
    ///  - Device extension [`ext_robustness2`](crate::device::DeviceExtensions::ext_robustness2)
    ///- Requires feature: [`robust_buffer_access`](Self::robust_buffer_access)
    pub robust_buffer_access2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-robustImageAccess)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_image_robustness`](crate::device::DeviceExtensions::ext_image_robustness)
    pub robust_image_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRobustness2FeaturesEXT.html#features-robustImageAccess2)
    ///- Requires one of:
    ///  - Device extension [`ext_robustness2`](crate::device::DeviceExtensions::ext_robustness2)
    pub robust_image_access2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-runtimeDescriptorArray)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub runtime_descriptor_array: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sampleRateShading)
    pub sample_rate_shading: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImage2DViewOf3DFeaturesEXT.html#features-sampler2DViewOf3D)
    ///- Requires one of:
    ///  - Device extension [`ext_image_2d_view_of_3d`](crate::device::DeviceExtensions::ext_image_2d_view_of_3d)
    pub sampler2_d_view_of3_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-samplerAnisotropy)
    pub sampler_anisotropy: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-samplerFilterMinmax)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`ext_sampler_filter_minmax`](crate::device::DeviceExtensions::ext_sampler_filter_minmax)
    pub sampler_filter_minmax: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-samplerMipLodBias)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub sampler_mip_lod_bias: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-samplerMirrorClampToEdge)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`khr_sampler_mirror_clamp_to_edge`](crate::device::DeviceExtensions::khr_sampler_mirror_clamp_to_edge)
    pub sampler_mirror_clamp_to_edge: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-samplerYcbcrConversion)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)
    pub sampler_ycbcr_conversion: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-scalarBlockLayout)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_scalar_block_layout`](crate::device::DeviceExtensions::ext_scalar_block_layout)
    pub scalar_block_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSchedulingControlsFeaturesARM.html#features-schedulingControls)
    ///- Requires one of:
    ///  - Device extension [`arm_scheduling_controls`](crate::device::DeviceExtensions::arm_scheduling_controls)
    pub scheduling_controls: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX.html#features-screenBufferImport)
    ///- Requires one of:
    ///  - Device extension [`qnx_external_memory_screen_buffer`](crate::device::DeviceExtensions::qnx_external_memory_screen_buffer)
    pub screen_buffer_import: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceCubicWeightsFeaturesQCOM.html#features-selectableCubicWeights)
    ///- Requires one of:
    ///  - Device extension [`qcom_filter_cubic_weights`](crate::device::DeviceExtensions::qcom_filter_cubic_weights)
    pub selectable_cubic_weights: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-separateDepthStencilLayouts)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_separate_depth_stencil_layouts`](crate::device::DeviceExtensions::khr_separate_depth_stencil_layouts)
    pub separate_depth_stencil_layouts: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-separateStencilMaskRef)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub separate_stencil_mask_ref: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderBufferFloat16AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_buffer_float16_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderBufferFloat16AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_buffer_float16_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderBufferFloat16Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_buffer_float16_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderBufferFloat32AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_buffer_float32_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderBufferFloat32AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_buffer_float32_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderBufferFloat32Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_buffer_float32_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderBufferFloat64AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_buffer_float64_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderBufferFloat64AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_buffer_float64_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderBufferFloat64Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_buffer_float64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderBufferInt64Atomics)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_shader_atomic_int64`](crate::device::DeviceExtensions::khr_shader_atomic_int64)
    pub shader_buffer_int64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderClipDistance)
    pub shader_clip_distance: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM.html#features-shaderCoreBuiltins)
    ///- Requires one of:
    ///  - Device extension [`arm_shader_core_builtins`](crate::device::DeviceExtensions::arm_shader_core_builtins)
    pub shader_core_builtins: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderCullDistance)
    pub shader_cull_distance: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-shaderDemoteToHelperInvocation)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_shader_demote_to_helper_invocation`](crate::device::DeviceExtensions::ext_shader_demote_to_helper_invocation)
    pub shader_demote_to_helper_invocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderClockFeaturesKHR.html#features-shaderDeviceClock)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_clock`](crate::device::DeviceExtensions::khr_shader_clock)
    pub shader_device_clock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-shaderDrawParameters)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///- Automatically enabled by device extension: [`khr_shader_draw_parameters`](crate::device::DeviceExtensions::khr_shader_draw_parameters)
    pub shader_draw_parameters: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD.html#features-shaderEarlyAndLateFragmentTests)
    ///- Requires one of:
    ///  - Device extension [`amd_shader_early_and_late_fragment_tests`](crate::device::DeviceExtensions::amd_shader_early_and_late_fragment_tests)
    pub shader_early_and_late_fragment_tests: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderEnqueueFeaturesAMDX.html#features-shaderEnqueue)
    ///- Requires one of:
    ///  - Device extension [`amdx_shader_enqueue`](crate::device::DeviceExtensions::amdx_shader_enqueue)
    pub shader_enqueue: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderExpectAssumeFeaturesKHR.html#features-shaderExpectAssume)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_expect_assume`](crate::device::DeviceExtensions::khr_shader_expect_assume)
    pub shader_expect_assume: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderFloat16)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_shader_float16_int8`](crate::device::DeviceExtensions::khr_shader_float16_int8)
    pub shader_float16: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV.html#features-shaderFloat16VectorAtomics)
    ///- Requires one of:
    ///  - Device extension [`nv_shader_atomic_float16_vector`](crate::device::DeviceExtensions::nv_shader_atomic_float16_vector)
    pub shader_float16_vector_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderFloat64)
    pub shader_float64: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderFloatControls2FeaturesKHR.html#features-shaderFloatControls2)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_float_controls2`](crate::device::DeviceExtensions::khr_shader_float_controls2)
    pub shader_float_controls2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderImageFloat32AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_image_float32_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderImageFloat32AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_image_float32_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderImageFloat32Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_image_float32_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderImageGatherExtended)
    pub shader_image_gather_extended: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.html#features-shaderImageInt64Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_image_atomic_int64`](crate::device::DeviceExtensions::ext_shader_image_atomic_int64)
    pub shader_image_int64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderInputAttachmentArrayDynamicIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_input_attachment_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderInputAttachmentArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_input_attachment_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderInt16)
    pub shader_int16: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderInt64)
    pub shader_int64: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderInt8)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_shader_float16_int8`](crate::device::DeviceExtensions::khr_shader_float16_int8)
    pub shader_int8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-shaderIntegerDotProduct)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_shader_integer_dot_product`](crate::device::DeviceExtensions::khr_shader_integer_dot_product)
    pub shader_integer_dot_product: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.html#features-shaderIntegerFunctions2)
    ///- Requires one of:
    ///  - Device extension [`intel_shader_integer_functions2`](crate::device::DeviceExtensions::intel_shader_integer_functions2)
    pub shader_integer_functions2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR.html#features-shaderMaximalReconvergence)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_maximal_reconvergence`](crate::device::DeviceExtensions::khr_shader_maximal_reconvergence)
    pub shader_maximal_reconvergence: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT.html#features-shaderModuleIdentifier)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_module_identifier`](crate::device::DeviceExtensions::ext_shader_module_identifier)
    pub shader_module_identifier: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderObjectFeaturesEXT.html#features-shaderObject)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_object`](crate::device::DeviceExtensions::ext_shader_object)
    pub shader_object: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderOutputLayer)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`ext_shader_viewport_index_layer`](crate::device::DeviceExtensions::ext_shader_viewport_index_layer)
    pub shader_output_layer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderOutputViewportIndex)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///- Automatically enabled by device extension: [`ext_shader_viewport_index_layer`](crate::device::DeviceExtensions::ext_shader_viewport_index_layer)
    pub shader_output_viewport_index: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderQuadControlFeaturesKHR.html#features-shaderQuadControl)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_quad_control`](crate::device::DeviceExtensions::khr_shader_quad_control)
    pub shader_quad_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceRawAccessChainsFeaturesNV.html#features-shaderRawAccessChains)
    ///- Requires one of:
    ///  - Device extension [`nv_raw_access_chains`](crate::device::DeviceExtensions::nv_raw_access_chains)
    pub shader_raw_access_chains: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderResourceMinLod)
    pub shader_resource_min_lod: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderResourceResidency)
    pub shader_resource_residency: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-shaderSampleRateInterpolationFunctions)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub shader_sample_rate_interpolation_functions: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderSampledImageArrayDynamicIndexing)
    pub shader_sampled_image_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderSampledImageArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_sampled_image_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderSharedFloat16AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_shared_float16_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderSharedFloat16AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_shared_float16_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderSharedFloat16Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_shared_float16_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderSharedFloat32AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_shared_float32_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderSharedFloat32AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_shared_float32_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderSharedFloat32Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_shared_float32_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderSharedFloat64AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_shared_float64_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-shaderSharedFloat64AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    pub shader_shared_float64_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-shaderSharedFloat64Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    pub shader_shared_float64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderSharedInt64Atomics)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_shader_atomic_int64`](crate::device::DeviceExtensions::khr_shader_atomic_int64)
    pub shader_shared_int64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.html#features-shaderSMBuiltins)
    ///- Requires one of:
    ///  - Device extension [`nv_shader_sm_builtins`](crate::device::DeviceExtensions::nv_shader_sm_builtins)
    pub shader_sm_builtins: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageBufferArrayDynamicIndexing)
    pub shader_storage_buffer_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderStorageBufferArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_storage_buffer_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageImageArrayDynamicIndexing)
    pub shader_storage_image_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderStorageImageArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_storage_image_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageImageExtendedFormats)
    pub shader_storage_image_extended_formats: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageImageMultisample)
    pub shader_storage_image_multisample: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageImageReadWithoutFormat)
    pub shader_storage_image_read_without_format: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderStorageImageWriteWithoutFormat)
    pub shader_storage_image_write_without_format: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderStorageTexelBufferArrayDynamicIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_storage_texel_buffer_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderStorageTexelBufferArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_storage_texel_buffer_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderClockFeaturesKHR.html#features-shaderSubgroupClock)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_clock`](crate::device::DeviceExtensions::khr_shader_clock)
    pub shader_subgroup_clock: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderSubgroupExtendedTypes)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_shader_subgroup_extended_types`](crate::device::DeviceExtensions::khr_shader_subgroup_extended_types)
    pub shader_subgroup_extended_types: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR.html#features-shaderSubgroupRotate)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_subgroup_rotate`](crate::device::DeviceExtensions::khr_shader_subgroup_rotate)
    pub shader_subgroup_rotate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR.html#features-shaderSubgroupRotateClustered)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_subgroup_rotate`](crate::device::DeviceExtensions::khr_shader_subgroup_rotate)
    pub shader_subgroup_rotate_clustered: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.html#features-shaderSubgroupUniformControlFlow)
    ///- Requires one of:
    ///  - Device extension [`khr_shader_subgroup_uniform_control_flow`](crate::device::DeviceExtensions::khr_shader_subgroup_uniform_control_flow)
    pub shader_subgroup_uniform_control_flow: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-shaderTerminateInvocation)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_shader_terminate_invocation`](crate::device::DeviceExtensions::khr_shader_terminate_invocation)
    pub shader_terminate_invocation: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderTessellationAndGeometryPointSize)
    pub shader_tessellation_and_geometry_point_size: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImageFeaturesEXT.html#features-shaderTileImageColorReadAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_tile_image`](crate::device::DeviceExtensions::ext_shader_tile_image)
    pub shader_tile_image_color_read_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImageFeaturesEXT.html#features-shaderTileImageDepthReadAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_tile_image`](crate::device::DeviceExtensions::ext_shader_tile_image)
    pub shader_tile_image_depth_read_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderTileImageFeaturesEXT.html#features-shaderTileImageStencilReadAccess)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_tile_image`](crate::device::DeviceExtensions::ext_shader_tile_image)
    pub shader_tile_image_stencil_read_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-shaderUniformBufferArrayDynamicIndexing)
    pub shader_uniform_buffer_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderUniformBufferArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_uniform_buffer_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderUniformTexelBufferArrayDynamicIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_uniform_texel_buffer_array_dynamic_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-shaderUniformTexelBufferArrayNonUniformIndexing)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)
    pub shader_uniform_texel_buffer_array_non_uniform_indexing: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-shaderZeroInitializeWorkgroupMemory)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_zero_initialize_workgroup_memory`](crate::device::DeviceExtensions::khr_zero_initialize_workgroup_memory)
    pub shader_zero_initialize_workgroup_memory: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImageFeaturesNV.html#features-shadingRateCoarseSampleOrder)
    ///- Requires one of:
    ///  - Device extension [`nv_shading_rate_image`](crate::device::DeviceExtensions::nv_shading_rate_image)
    pub shading_rate_coarse_sample_order: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShadingRateImageFeaturesNV.html#features-shadingRateImage)
    ///- Requires one of:
    ///  - Device extension [`nv_shading_rate_image`](crate::device::DeviceExtensions::nv_shading_rate_image)
    pub shading_rate_image: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-smoothLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub smooth_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseBinding)
    pub sparse_binding: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-sparseImageFloat32AtomicAdd)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    ///- Requires feature: [`shader_image_float32_atomic_add`](Self::shader_image_float32_atomic_add)
    pub sparse_image_float32_atomic_add: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.html#features-sparseImageFloat32AtomicMinMax)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float2`](crate::device::DeviceExtensions::ext_shader_atomic_float2)
    ///- Requires feature: [`shader_image_float32_atomic_min_max`](Self::shader_image_float32_atomic_min_max)
    pub sparse_image_float32_atomic_min_max: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.html#features-sparseImageFloat32Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)
    ///- Requires feature: [`shader_image_float32_atomics`](Self::shader_image_float32_atomics)
    pub sparse_image_float32_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.html#features-sparseImageInt64Atomics)
    ///- Requires one of:
    ///  - Device extension [`ext_shader_image_atomic_int64`](crate::device::DeviceExtensions::ext_shader_image_atomic_int64)
    ///- Requires feature: [`shader_image_int64_atomics`](Self::shader_image_int64_atomics)
    pub sparse_image_int64_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidency16Samples)
    pub sparse_residency16_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidency2Samples)
    pub sparse_residency2_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidency4Samples)
    pub sparse_residency4_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidency8Samples)
    pub sparse_residency8_samples: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidencyAliased)
    pub sparse_residency_aliased: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidencyBuffer)
    pub sparse_residency_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidencyImage2D)
    pub sparse_residency_image2_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-sparseResidencyImage3D)
    pub sparse_residency_image3_d: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-stippledBresenhamLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub stippled_bresenham_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-stippledRectangularLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub stippled_rectangular_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLineRasterizationFeaturesKHR.html#features-stippledSmoothLines)
    ///- Requires one of:
    ///  - Device extension [`khr_line_rasterization`](crate::device::DeviceExtensions::khr_line_rasterization)
    ///  - Device extension [`ext_line_rasterization`](crate::device::DeviceExtensions::ext_line_rasterization)
    pub stippled_smooth_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-storageBuffer16BitAccess)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_16bit_storage`](crate::device::DeviceExtensions::khr_16bit_storage)
    pub storage_buffer16_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-storageBuffer8BitAccess)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_8bit_storage`](crate::device::DeviceExtensions::khr_8bit_storage)
    pub storage_buffer8_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-storageInputOutput16)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_16bit_storage`](crate::device::DeviceExtensions::khr_16bit_storage)
    pub storage_input_output16: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-storagePushConstant16)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_16bit_storage`](crate::device::DeviceExtensions::khr_16bit_storage)
    pub storage_push_constant16: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-storagePushConstant8)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_8bit_storage`](crate::device::DeviceExtensions::khr_8bit_storage)
    pub storage_push_constant8: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-subgroupBroadcastDynamicId)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    pub subgroup_broadcast_dynamic_id: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-subgroupSizeControl)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_subgroup_size_control`](crate::device::DeviceExtensions::ext_subgroup_size_control)
    pub subgroup_size_control: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT.html#features-subpassMergeFeedback)
    ///- Requires one of:
    ///  - Device extension [`ext_subpass_merge_feedback`](crate::device::DeviceExtensions::ext_subpass_merge_feedback)
    pub subpass_merge_feedback: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.html#features-subpassShading)
    ///- Requires one of:
    ///  - Device extension [`huawei_subpass_shading`](crate::device::DeviceExtensions::huawei_subpass_shading)
    pub subpass_shading: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.html#features-supersampleFragmentShadingRates)
    ///- Requires one of:
    ///  - Device extension [`nv_fragment_shading_rate_enums`](crate::device::DeviceExtensions::nv_fragment_shading_rate_enums)
    pub supersample_fragment_shading_rates: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT.html#features-swapchainMaintenance1)
    ///- Requires one of:
    ///  - Device extension [`ext_swapchain_maintenance1`](crate::device::DeviceExtensions::ext_swapchain_maintenance1)
    pub swapchain_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-synchronization2)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`khr_synchronization2`](crate::device::DeviceExtensions::khr_synchronization2)
    pub synchronization2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMeshShaderFeaturesEXT.html#features-taskShader)
    ///- Requires one of:
    ///  - Device extension [`ext_mesh_shader`](crate::device::DeviceExtensions::ext_mesh_shader)
    ///  - Device extension [`nv_mesh_shader`](crate::device::DeviceExtensions::nv_mesh_shader)
    pub task_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-tessellationIsolines)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub tessellation_isolines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-tessellationPointMode)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub tessellation_point_mode: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-tessellationShader)
    pub tessellation_shader: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.html#features-texelBufferAlignment)
    ///- Requires one of:
    ///  - Device extension [`ext_texel_buffer_alignment`](crate::device::DeviceExtensions::ext_texel_buffer_alignment)
    pub texel_buffer_alignment: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingFeaturesQCOM.html#features-textureBlockMatch)
    ///- Requires one of:
    ///  - Device extension [`qcom_image_processing`](crate::device::DeviceExtensions::qcom_image_processing)
    pub texture_block_match: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessing2FeaturesQCOM.html#features-textureBlockMatch2)
    ///- Requires one of:
    ///  - Device extension [`qcom_image_processing2`](crate::device::DeviceExtensions::qcom_image_processing2)
    pub texture_block_match2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingFeaturesQCOM.html#features-textureBoxFilter)
    ///- Requires one of:
    ///  - Device extension [`qcom_image_processing`](crate::device::DeviceExtensions::qcom_image_processing)
    pub texture_box_filter: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan13Features.html#features-textureCompressionASTC_HDR)
    ///- Requires one of:
    ///  - Vulkan API version 1.3
    ///  - Device extension [`ext_texture_compression_astc_hdr`](crate::device::DeviceExtensions::ext_texture_compression_astc_hdr)
    pub texture_compression_astc_hdr: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-textureCompressionASTC_LDR)
    pub texture_compression_astc_ldr: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-textureCompressionBC)
    pub texture_compression_bc: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-textureCompressionETC2)
    pub texture_compression_etc2: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageProcessingFeaturesQCOM.html#features-textureSampleWeighted)
    ///- Requires one of:
    ///  - Device extension [`qcom_image_processing`](crate::device::DeviceExtensions::qcom_image_processing)
    pub texture_sample_weighted: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTilePropertiesFeaturesQCOM.html#features-tileProperties)
    ///- Requires one of:
    ///  - Device extension [`qcom_tile_properties`](crate::device::DeviceExtensions::qcom_tile_properties)
    pub tile_properties: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-timelineSemaphore)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_timeline_semaphore`](crate::device::DeviceExtensions::khr_timeline_semaphore)
    pub timeline_semaphore: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceTransformFeedbackFeaturesEXT.html#features-transformFeedback)
    ///- Requires one of:
    ///  - Device extension [`ext_transform_feedback`](crate::device::DeviceExtensions::ext_transform_feedback)
    pub transform_feedback: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProvokingVertexFeaturesEXT.html#features-transformFeedbackPreservesProvokingVertex)
    ///- Requires one of:
    ///  - Device extension [`ext_provoking_vertex`](crate::device::DeviceExtensions::ext_provoking_vertex)
    pub transform_feedback_preserves_provoking_vertex: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-triangleFans)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub triangle_fans: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-uniformAndStorageBuffer16BitAccess)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_16bit_storage`](crate::device::DeviceExtensions::khr_16bit_storage)
    pub uniform_and_storage_buffer16_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-uniformAndStorageBuffer8BitAccess)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_8bit_storage`](crate::device::DeviceExtensions::khr_8bit_storage)
    pub uniform_and_storage_buffer8_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-uniformBufferStandardLayout)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_uniform_buffer_standard_layout`](crate::device::DeviceExtensions::khr_uniform_buffer_standard_layout)
    pub uniform_buffer_standard_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-variableMultisampleRate)
    pub variable_multisample_rate: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-variablePointers)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_variable_pointers`](crate::device::DeviceExtensions::khr_variable_pointers)
    ///- Requires feature: [`variable_pointers_storage_buffer`](Self::variable_pointers_storage_buffer)
    pub variable_pointers: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan11Features.html#features-variablePointersStorageBuffer)
    ///- Requires one of:
    ///  - Vulkan API version 1.1
    ///  - Device extension [`khr_variable_pointers`](crate::device::DeviceExtensions::khr_variable_pointers)
    pub variable_pointers_storage_buffer: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePortabilitySubsetFeaturesKHR.html#features-vertexAttributeAccessBeyondStride)
    ///- Requires one of:
    ///  - Device extension [`khr_portability_subset`](crate::device::DeviceExtensions::khr_portability_subset)
    pub vertex_attribute_access_beyond_stride: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR.html#features-vertexAttributeInstanceRateDivisor)
    ///- Requires one of:
    ///  - Device extension [`khr_vertex_attribute_divisor`](crate::device::DeviceExtensions::khr_vertex_attribute_divisor)
    ///  - Device extension [`ext_vertex_attribute_divisor`](crate::device::DeviceExtensions::ext_vertex_attribute_divisor)
    pub vertex_attribute_instance_rate_divisor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR.html#features-vertexAttributeInstanceRateZeroDivisor)
    ///- Requires one of:
    ///  - Device extension [`khr_vertex_attribute_divisor`](crate::device::DeviceExtensions::khr_vertex_attribute_divisor)
    ///  - Device extension [`ext_vertex_attribute_divisor`](crate::device::DeviceExtensions::ext_vertex_attribute_divisor)
    pub vertex_attribute_instance_rate_zero_divisor: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.html#features-vertexInputDynamicState)
    ///- Requires one of:
    ///  - Device extension [`ext_vertex_input_dynamic_state`](crate::device::DeviceExtensions::ext_vertex_input_dynamic_state)
    pub vertex_input_dynamic_state: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-vertexPipelineStoresAndAtomics)
    pub vertex_pipeline_stores_and_atomics: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVideoMaintenance1FeaturesKHR.html#features-videoMaintenance1)
    ///- Requires one of:
    ///  - Device extension [`khr_video_maintenance1`](crate::device::DeviceExtensions::khr_video_maintenance1)
    pub video_maintenance1: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-vulkanMemoryModel)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_vulkan_memory_model`](crate::device::DeviceExtensions::khr_vulkan_memory_model)
    pub vulkan_memory_model: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-vulkanMemoryModelAvailabilityVisibilityChains)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_vulkan_memory_model`](crate::device::DeviceExtensions::khr_vulkan_memory_model)
    pub vulkan_memory_model_availability_visibility_chains: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVulkan12Features.html#features-vulkanMemoryModelDeviceScope)
    ///- Requires one of:
    ///  - Vulkan API version 1.2
    ///  - Device extension [`khr_vulkan_memory_model`](crate::device::DeviceExtensions::khr_vulkan_memory_model)
    pub vulkan_memory_model_device_scope: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html#features-wideLines)
    pub wide_lines: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html#features-workgroupMemoryExplicitLayout)
    ///- Requires one of:
    ///  - Device extension [`khr_workgroup_memory_explicit_layout`](crate::device::DeviceExtensions::khr_workgroup_memory_explicit_layout)
    pub workgroup_memory_explicit_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html#features-workgroupMemoryExplicitLayout16BitAccess)
    ///- Requires one of:
    ///  - Device extension [`khr_workgroup_memory_explicit_layout`](crate::device::DeviceExtensions::khr_workgroup_memory_explicit_layout)
    pub workgroup_memory_explicit_layout16_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html#features-workgroupMemoryExplicitLayout8BitAccess)
    ///- Requires one of:
    ///  - Device extension [`khr_workgroup_memory_explicit_layout`](crate::device::DeviceExtensions::khr_workgroup_memory_explicit_layout)
    pub workgroup_memory_explicit_layout8_bit_access: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.html#features-workgroupMemoryExplicitLayoutScalarBlockLayout)
    ///- Requires one of:
    ///  - Device extension [`khr_workgroup_memory_explicit_layout`](crate::device::DeviceExtensions::khr_workgroup_memory_explicit_layout)
    pub workgroup_memory_explicit_layout_scalar_block_layout: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.html#features-ycbcr2plane444Formats)
    ///- Requires one of:
    ///  - Device extension [`ext_ycbcr_2plane_444_formats`](crate::device::DeviceExtensions::ext_ycbcr_2plane_444_formats)
    pub ycbcr2plane444_formats: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcrDegammaFeaturesQCOM.html#features-ycbcrDegamma)
    ///- Requires one of:
    ///  - Device extension [`qcom_ycbcr_degamma`](crate::device::DeviceExtensions::qcom_ycbcr_degamma)
    pub ycbcr_degamma: bool,
    ///- [Vulkan documentation](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.html#features-ycbcrImageArrays)
    ///- Requires one of:
    ///  - Device extension [`ext_ycbcr_image_arrays`](crate::device::DeviceExtensions::ext_ycbcr_image_arrays)
    pub ycbcr_image_arrays: bool,
    pub _ne: crate::NonExhaustive<'static>,
}
impl DeviceFeatures {
    const COUNT: usize = 419usize;
    const NAMES_C: [&str; Self::COUNT] = [
        "accelerationStructure",
        "accelerationStructureCaptureReplay",
        "accelerationStructureHostCommands",
        "accelerationStructureIndirectBuild",
        "advancedBlendCoherentOperations",
        "alphaToOne",
        "amigoProfiling",
        "attachmentFeedbackLoopDynamicState",
        "attachmentFeedbackLoopLayout",
        "attachmentFragmentShadingRate",
        "borderColorSwizzle",
        "borderColorSwizzleFromImage",
        "bresenhamLines",
        "bufferDeviceAddress",
        "bufferDeviceAddressCaptureReplay",
        "bufferDeviceAddressMultiDevice",
        "clustercullingShader",
        "colorWriteEnable",
        "computeDerivativeGroupLinear",
        "computeDerivativeGroupQuads",
        "computeFullSubgroups",
        "conditionalRendering",
        "constantAlphaColorBlendFactors",
        "cooperativeMatrix",
        "cooperativeMatrixRobustBufferAccess",
        "cornerSampledImage",
        "coverageReductionMode",
        "cubicRangeClamp",
        "cudaKernelLaunchFeatures",
        "customBorderColorWithoutFormat",
        "customBorderColors",
        "decodeModeSharedExponent",
        "dedicatedAllocationImageAliasing",
        "depthBiasClamp",
        "depthBiasControl",
        "depthBiasExact",
        "depthBounds",
        "depthClamp",
        "depthClampZeroOne",
        "depthClipControl",
        "depthClipEnable",
        "descriptorBindingAccelerationStructureUpdateAfterBind",
        "descriptorBindingInlineUniformBlockUpdateAfterBind",
        "descriptorBindingPartiallyBound",
        "descriptorBindingSampledImageUpdateAfterBind",
        "descriptorBindingStorageBufferUpdateAfterBind",
        "descriptorBindingStorageImageUpdateAfterBind",
        "descriptorBindingStorageTexelBufferUpdateAfterBind",
        "descriptorBindingUniformBufferUpdateAfterBind",
        "descriptorBindingUniformTexelBufferUpdateAfterBind",
        "descriptorBindingUpdateUnusedWhilePending",
        "descriptorBindingVariableDescriptorCount",
        "descriptorBuffer",
        "descriptorBufferCaptureReplay",
        "descriptorBufferImageLayoutIgnored",
        "descriptorBufferPushDescriptors",
        "descriptorIndexing",
        "descriptorPoolOverallocation",
        "descriptorSetHostMapping",
        "deviceCoherentMemory",
        "deviceFault",
        "deviceFaultVendorBinary",
        "deviceGeneratedCommands",
        "deviceGeneratedCompute",
        "deviceGeneratedComputeCaptureReplay",
        "deviceGeneratedComputePipelines",
        "deviceMemoryReport",
        "diagnosticsConfig",
        "displacementMicromap",
        "drawIndirectCount",
        "drawIndirectFirstInstance",
        "dualSrcBlend",
        "dynamicPipelineLayout",
        "dynamicRendering",
        "dynamicRenderingLocalRead",
        "dynamicRenderingUnusedAttachments",
        "events",
        "exclusiveScissor",
        "extendedDynamicState",
        "extendedDynamicState2",
        "extendedDynamicState2LogicOp",
        "extendedDynamicState2PatchControlPoints",
        "extendedDynamicState3AlphaToCoverageEnable",
        "extendedDynamicState3AlphaToOneEnable",
        "extendedDynamicState3ColorBlendAdvanced",
        "extendedDynamicState3ColorBlendEnable",
        "extendedDynamicState3ColorBlendEquation",
        "extendedDynamicState3ColorWriteMask",
        "extendedDynamicState3ConservativeRasterizationMode",
        "extendedDynamicState3CoverageModulationMode",
        "extendedDynamicState3CoverageModulationTable",
        "extendedDynamicState3CoverageModulationTableEnable",
        "extendedDynamicState3CoverageReductionMode",
        "extendedDynamicState3CoverageToColorEnable",
        "extendedDynamicState3CoverageToColorLocation",
        "extendedDynamicState3DepthClampEnable",
        "extendedDynamicState3DepthClipEnable",
        "extendedDynamicState3DepthClipNegativeOneToOne",
        "extendedDynamicState3ExtraPrimitiveOverestimationSize",
        "extendedDynamicState3LineRasterizationMode",
        "extendedDynamicState3LineStippleEnable",
        "extendedDynamicState3LogicOpEnable",
        "extendedDynamicState3PolygonMode",
        "extendedDynamicState3ProvokingVertexMode",
        "extendedDynamicState3RasterizationSamples",
        "extendedDynamicState3RasterizationStream",
        "extendedDynamicState3RepresentativeFragmentTestEnable",
        "extendedDynamicState3SampleLocationsEnable",
        "extendedDynamicState3SampleMask",
        "extendedDynamicState3ShadingRateImageEnable",
        "extendedDynamicState3TessellationDomainOrigin",
        "extendedDynamicState3ViewportSwizzle",
        "extendedDynamicState3ViewportWScalingEnable",
        "extendedSparseAddressSpace",
        "externalFormatResolve",
        "externalMemoryRDMA",
        "fillModeNonSolid",
        "floatRepresentation",
        "formatA4B4G4R4",
        "formatA4R4G4B4",
        "formatRgba10x6WithoutYCbCrSampler",
        "fragmentDensityMap",
        "fragmentDensityMapDeferred",
        "fragmentDensityMapDynamic",
        "fragmentDensityMapNonSubsampledImages",
        "fragmentDensityMapOffset",
        "fragmentShaderBarycentric",
        "fragmentShaderPixelInterlock",
        "fragmentShaderSampleInterlock",
        "fragmentShaderShadingRateInterlock",
        "fragmentShadingRateEnums",
        "fragmentStoresAndAtomics",
        "frameBoundary",
        "fullDrawIndexUint32",
        "geometryShader",
        "geometryStreams",
        "globalPriorityQuery",
        "graphicsPipelineLibrary",
        "hostImageCopy",
        "hostQueryReset",
        "image2DViewOf3D",
        "imageCompressionControl",
        "imageCompressionControlSwapchain",
        "imageCubeArray",
        "imageFootprint",
        "imageSlicedViewOf3D",
        "imageView2DOn3DImage",
        "imageViewFormatReinterpretation",
        "imageViewFormatSwizzle",
        "imagelessFramebuffer",
        "independentBlend",
        "indexTypeUint8",
        "indirectCopy",
        "inheritedConditionalRendering",
        "inheritedQueries",
        "inheritedViewportScissor2D",
        "inlineUniformBlock",
        "invocationMask",
        "largePoints",
        "leastRepresentableValueForceUnormRepresentation",
        "legacyDithering",
        "linearColorAttachment",
        "logicOp",
        "maintenance4",
        "maintenance5",
        "maintenance6",
        "memoryDecompression",
        "memoryMapPlaced",
        "memoryMapRangePlaced",
        "memoryPriority",
        "memoryUnmapReserve",
        "meshShader",
        "meshShaderQueries",
        "micromap",
        "micromapCaptureReplay",
        "micromapHostCommands",
        "minLod",
        "multiDraw",
        "multiDrawIndirect",
        "multiViewport",
        "multisampleArrayImage",
        "multisampledRenderToSingleSampled",
        "multiview",
        "multiviewClusterCullingShader",
        "multiviewGeometryShader",
        "multiviewMeshShader",
        "multiviewPerViewRenderAreas",
        "multiviewPerViewViewports",
        "multiviewTessellationShader",
        "mutableComparisonSamplers",
        "mutableDescriptorType",
        "nestedCommandBuffer",
        "nestedCommandBufferRendering",
        "nestedCommandBufferSimultaneousUse",
        "noInvocationFragmentShadingRates",
        "nonSeamlessCubeMap",
        "nullDescriptor",
        "occlusionQueryPrecise",
        "opticalFlow",
        "pageableDeviceLocalMemory",
        "perStageDescriptorSet",
        "performanceCounterMultipleQueryPools",
        "performanceCounterQueryPools",
        "pipelineCreationCacheControl",
        "pipelineExecutableInfo",
        "pipelineFragmentShadingRate",
        "pipelineLibraryGroupHandles",
        "pipelinePropertiesIdentifier",
        "pipelineProtectedAccess",
        "pipelineRobustness",
        "pipelineStatisticsQuery",
        "pointPolygons",
        "presentBarrier",
        "presentId",
        "presentWait",
        "primitiveFragmentShadingRate",
        "primitiveFragmentShadingRateMeshShader",
        "primitiveTopologyListRestart",
        "primitiveTopologyPatchListRestart",
        "primitivesGeneratedQuery",
        "primitivesGeneratedQueryWithNonZeroStreams",
        "primitivesGeneratedQueryWithRasterizerDiscard",
        "privateData",
        "protectedMemory",
        "provokingVertexLast",
        "rasterizationOrderColorAttachmentAccess",
        "rasterizationOrderDepthAttachmentAccess",
        "rasterizationOrderStencilAttachmentAccess",
        "rayQuery",
        "rayTracingInvocationReorder",
        "rayTracingMaintenance1",
        "rayTracingMotionBlur",
        "rayTracingMotionBlurPipelineTraceRaysIndirect",
        "rayTracingPipeline",
        "rayTracingPipelineShaderGroupHandleCaptureReplay",
        "rayTracingPipelineShaderGroupHandleCaptureReplayMixed",
        "rayTracingPipelineTraceRaysIndirect",
        "rayTracingPipelineTraceRaysIndirect2",
        "rayTracingPositionFetch",
        "rayTracingValidation",
        "rayTraversalPrimitiveCulling",
        "rectangularLines",
        "relaxedLineRasterization",
        "renderPassStriped",
        "reportAddressBinding",
        "representativeFragmentTest",
        "robustBufferAccess",
        "robustBufferAccess2",
        "robustImageAccess",
        "robustImageAccess2",
        "runtimeDescriptorArray",
        "sampleRateShading",
        "sampler2DViewOf3D",
        "samplerAnisotropy",
        "samplerFilterMinmax",
        "samplerMipLodBias",
        "samplerMirrorClampToEdge",
        "samplerYcbcrConversion",
        "scalarBlockLayout",
        "schedulingControls",
        "screenBufferImport",
        "selectableCubicWeights",
        "separateDepthStencilLayouts",
        "separateStencilMaskRef",
        "shaderBufferFloat16AtomicAdd",
        "shaderBufferFloat16AtomicMinMax",
        "shaderBufferFloat16Atomics",
        "shaderBufferFloat32AtomicAdd",
        "shaderBufferFloat32AtomicMinMax",
        "shaderBufferFloat32Atomics",
        "shaderBufferFloat64AtomicAdd",
        "shaderBufferFloat64AtomicMinMax",
        "shaderBufferFloat64Atomics",
        "shaderBufferInt64Atomics",
        "shaderClipDistance",
        "shaderCoreBuiltins",
        "shaderCullDistance",
        "shaderDemoteToHelperInvocation",
        "shaderDeviceClock",
        "shaderDrawParameters",
        "shaderEarlyAndLateFragmentTests",
        "shaderEnqueue",
        "shaderExpectAssume",
        "shaderFloat16",
        "shaderFloat16VectorAtomics",
        "shaderFloat64",
        "shaderFloatControls2",
        "shaderImageFloat32AtomicAdd",
        "shaderImageFloat32AtomicMinMax",
        "shaderImageFloat32Atomics",
        "shaderImageGatherExtended",
        "shaderImageInt64Atomics",
        "shaderInputAttachmentArrayDynamicIndexing",
        "shaderInputAttachmentArrayNonUniformIndexing",
        "shaderInt16",
        "shaderInt64",
        "shaderInt8",
        "shaderIntegerDotProduct",
        "shaderIntegerFunctions2",
        "shaderMaximalReconvergence",
        "shaderModuleIdentifier",
        "shaderObject",
        "shaderOutputLayer",
        "shaderOutputViewportIndex",
        "shaderQuadControl",
        "shaderRawAccessChains",
        "shaderResourceMinLod",
        "shaderResourceResidency",
        "shaderSampleRateInterpolationFunctions",
        "shaderSampledImageArrayDynamicIndexing",
        "shaderSampledImageArrayNonUniformIndexing",
        "shaderSharedFloat16AtomicAdd",
        "shaderSharedFloat16AtomicMinMax",
        "shaderSharedFloat16Atomics",
        "shaderSharedFloat32AtomicAdd",
        "shaderSharedFloat32AtomicMinMax",
        "shaderSharedFloat32Atomics",
        "shaderSharedFloat64AtomicAdd",
        "shaderSharedFloat64AtomicMinMax",
        "shaderSharedFloat64Atomics",
        "shaderSharedInt64Atomics",
        "shaderSMBuiltins",
        "shaderStorageBufferArrayDynamicIndexing",
        "shaderStorageBufferArrayNonUniformIndexing",
        "shaderStorageImageArrayDynamicIndexing",
        "shaderStorageImageArrayNonUniformIndexing",
        "shaderStorageImageExtendedFormats",
        "shaderStorageImageMultisample",
        "shaderStorageImageReadWithoutFormat",
        "shaderStorageImageWriteWithoutFormat",
        "shaderStorageTexelBufferArrayDynamicIndexing",
        "shaderStorageTexelBufferArrayNonUniformIndexing",
        "shaderSubgroupClock",
        "shaderSubgroupExtendedTypes",
        "shaderSubgroupRotate",
        "shaderSubgroupRotateClustered",
        "shaderSubgroupUniformControlFlow",
        "shaderTerminateInvocation",
        "shaderTessellationAndGeometryPointSize",
        "shaderTileImageColorReadAccess",
        "shaderTileImageDepthReadAccess",
        "shaderTileImageStencilReadAccess",
        "shaderUniformBufferArrayDynamicIndexing",
        "shaderUniformBufferArrayNonUniformIndexing",
        "shaderUniformTexelBufferArrayDynamicIndexing",
        "shaderUniformTexelBufferArrayNonUniformIndexing",
        "shaderZeroInitializeWorkgroupMemory",
        "shadingRateCoarseSampleOrder",
        "shadingRateImage",
        "smoothLines",
        "sparseBinding",
        "sparseImageFloat32AtomicAdd",
        "sparseImageFloat32AtomicMinMax",
        "sparseImageFloat32Atomics",
        "sparseImageInt64Atomics",
        "sparseResidency16Samples",
        "sparseResidency2Samples",
        "sparseResidency4Samples",
        "sparseResidency8Samples",
        "sparseResidencyAliased",
        "sparseResidencyBuffer",
        "sparseResidencyImage2D",
        "sparseResidencyImage3D",
        "stippledBresenhamLines",
        "stippledRectangularLines",
        "stippledSmoothLines",
        "storageBuffer16BitAccess",
        "storageBuffer8BitAccess",
        "storageInputOutput16",
        "storagePushConstant16",
        "storagePushConstant8",
        "subgroupBroadcastDynamicId",
        "subgroupSizeControl",
        "subpassMergeFeedback",
        "subpassShading",
        "supersampleFragmentShadingRates",
        "swapchainMaintenance1",
        "synchronization2",
        "taskShader",
        "tessellationIsolines",
        "tessellationPointMode",
        "tessellationShader",
        "texelBufferAlignment",
        "textureBlockMatch",
        "textureBlockMatch2",
        "textureBoxFilter",
        "textureCompressionASTC_HDR",
        "textureCompressionASTC_LDR",
        "textureCompressionBC",
        "textureCompressionETC2",
        "textureSampleWeighted",
        "tileProperties",
        "timelineSemaphore",
        "transformFeedback",
        "transformFeedbackPreservesProvokingVertex",
        "triangleFans",
        "uniformAndStorageBuffer16BitAccess",
        "uniformAndStorageBuffer8BitAccess",
        "uniformBufferStandardLayout",
        "variableMultisampleRate",
        "variablePointers",
        "variablePointersStorageBuffer",
        "vertexAttributeAccessBeyondStride",
        "vertexAttributeInstanceRateDivisor",
        "vertexAttributeInstanceRateZeroDivisor",
        "vertexInputDynamicState",
        "vertexPipelineStoresAndAtomics",
        "videoMaintenance1",
        "vulkanMemoryModel",
        "vulkanMemoryModelAvailabilityVisibilityChains",
        "vulkanMemoryModelDeviceScope",
        "wideLines",
        "workgroupMemoryExplicitLayout",
        "workgroupMemoryExplicitLayout16BitAccess",
        "workgroupMemoryExplicitLayout8BitAccess",
        "workgroupMemoryExplicitLayoutScalarBlockLayout",
        "ycbcr2plane444Formats",
        "ycbcrDegamma",
        "ycbcrImageArrays",
    ];
    /// Returns a `DeviceFeatures` with none of the members set.
    #[inline]
    pub const fn empty() -> Self {
        Self::from_array([false; Self::COUNT])
    }
    /// Returns a `DeviceFeatures` with all of the members set.
    #[cfg(test)]
    pub(crate) const fn all() -> DeviceFeatures {
        Self::from_array([true; Self::COUNT])
    }
    /// Returns whether any members are set in both `self` and `other`.
    #[inline]
    pub const fn intersects(&self, other: &Self) -> bool {
        crate::array_intersects(self.as_array(), other.as_array())
    }
    /// Returns whether all members in `other` are set in `self`.
    #[inline]
    pub const fn contains(&self, other: &Self) -> bool {
        crate::array_contains(self.as_array(), other.as_array())
    }
    /// Returns the union of `self` and `other`.
    #[inline]
    pub const fn union(&self, other: &Self) -> Self {
        Self::from_array(crate::array_union(self.as_array(), other.as_array()))
    }
    /// Returns the intersection of `self` and `other`.
    #[inline]
    pub const fn intersection(&self, other: &Self) -> Self {
        Self::from_array(crate::array_intersection(self.as_array(), other.as_array()))
    }
    /// Returns `self` without the members set in `other`.
    #[inline]
    pub const fn difference(&self, other: &Self) -> Self {
        Self::from_array(crate::array_difference(self.as_array(), other.as_array()))
    }
    /// Returns the members set in `self` or `other`, but not both.
    #[inline]
    pub const fn symmetric_difference(&self, other: &Self) -> Self {
        Self::from_array(
            crate::array_symmetric_difference(self.as_array(), other.as_array()),
        )
    }
    #[inline]
    const fn from_array(array: [bool; Self::COUNT]) -> Self {
        unsafe { ::std::mem::transmute::<[bool; Self::COUNT], DeviceFeatures>(array) }
    }
    #[inline]
    const fn as_array(&self) -> &[bool; Self::COUNT] {
        unsafe { ::std::mem::transmute::<&DeviceFeatures, &[bool; Self::COUNT]>(self) }
    }
    #[inline]
    fn iter(&self) -> features::Iter<'_> {
        features::Iter {
            inner: Self::NAMES_C.iter().copied().zip(self.as_array().iter().copied()),
        }
    }
    pub(crate) fn validate(
        &self,
        supported: &Self,
        api_version: Version,
        device_extensions: &DeviceExtensions,
    ) -> Result<(), Box<ValidationError>> {
        if self.acceleration_structure {
            if !supported.acceleration_structure {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_acceleration_structure")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.acceleration_structure_capture_replay {
            if !supported.acceleration_structure_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_capture_replay`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_acceleration_structure")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.acceleration_structure_host_commands {
            if !supported.acceleration_structure_host_commands {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_host_commands`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_host_commands`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_acceleration_structure")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.acceleration_structure_indirect_build {
            if !supported.acceleration_structure_indirect_build {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_indirect_build`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `acceleration_structure_indirect_build`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_acceleration_structure")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.advanced_blend_coherent_operations {
            if !supported.advanced_blend_coherent_operations {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `advanced_blend_coherent_operations`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_blend_operation_advanced) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `advanced_blend_coherent_operations`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_blend_operation_advanced")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.alpha_to_one {
            if !supported.alpha_to_one {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `alpha_to_one`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.amigo_profiling {
            if !supported.amigo_profiling {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amigo_profiling`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.sec_amigo_profiling) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `amigo_profiling`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("sec_amigo_profiling")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.attachment_feedback_loop_dynamic_state {
            if !supported.attachment_feedback_loop_dynamic_state {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_feedback_loop_dynamic_state`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_attachment_feedback_loop_dynamic_state) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_feedback_loop_dynamic_state`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_attachment_feedback_loop_dynamic_state",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.attachment_feedback_loop_layout {
            if !supported.attachment_feedback_loop_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_feedback_loop_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_attachment_feedback_loop_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_feedback_loop_layout`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_attachment_feedback_loop_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.attachment_fragment_shading_rate {
            if !supported.attachment_fragment_shading_rate {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_fragment_shading_rate`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_fragment_shading_rate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `attachment_fragment_shading_rate`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_fragment_shading_rate")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.border_color_swizzle {
            if !supported.border_color_swizzle {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `border_color_swizzle`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_border_color_swizzle) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `border_color_swizzle`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_border_color_swizzle")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.border_color_swizzle_from_image {
            if !supported.border_color_swizzle_from_image {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `border_color_swizzle_from_image`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_border_color_swizzle) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `border_color_swizzle_from_image`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_border_color_swizzle")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.bresenham_lines {
            if !supported.bresenham_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `bresenham_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `bresenham_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.buffer_device_address {
            if !supported.buffer_device_address {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_buffer_device_address
                || device_extensions.ext_buffer_device_address)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_buffer_device_address")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_buffer_device_address")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.buffer_device_address_capture_replay {
            if !supported.buffer_device_address_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_buffer_device_address
                || device_extensions.ext_buffer_device_address)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address_capture_replay`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_buffer_device_address")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_buffer_device_address")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.buffer_device_address_multi_device {
            if !supported.buffer_device_address_multi_device {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address_multi_device`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_buffer_device_address
                || device_extensions.ext_buffer_device_address)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `buffer_device_address_multi_device`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_buffer_device_address")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_buffer_device_address")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.clusterculling_shader {
            if !supported.clusterculling_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `clusterculling_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.huawei_cluster_culling_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `clusterculling_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("huawei_cluster_culling_shader"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.color_write_enable {
            if !supported.color_write_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `color_write_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_color_write_enable) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `color_write_enable`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_color_write_enable")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.compute_derivative_group_linear {
            if !supported.compute_derivative_group_linear {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_derivative_group_linear`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_compute_shader_derivatives) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_derivative_group_linear`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_compute_shader_derivatives"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.compute_derivative_group_quads {
            if !supported.compute_derivative_group_quads {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_derivative_group_quads`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_compute_shader_derivatives) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_derivative_group_quads`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_compute_shader_derivatives"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.compute_full_subgroups {
            if !supported.compute_full_subgroups {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_full_subgroups`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_subgroup_size_control)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `compute_full_subgroups`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_subgroup_size_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.conditional_rendering {
            if !supported.conditional_rendering {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `conditional_rendering`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_conditional_rendering) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `conditional_rendering`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_conditional_rendering")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.constant_alpha_color_blend_factors {
            if !supported.constant_alpha_color_blend_factors {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `constant_alpha_color_blend_factors`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `constant_alpha_color_blend_factors`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.cooperative_matrix {
            if !supported.cooperative_matrix {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cooperative_matrix`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_cooperative_matrix
                || device_extensions.nv_cooperative_matrix)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cooperative_matrix`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_cooperative_matrix")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_cooperative_matrix")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.cooperative_matrix_robust_buffer_access {
            if !supported.cooperative_matrix_robust_buffer_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cooperative_matrix_robust_buffer_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_cooperative_matrix
                || device_extensions.nv_cooperative_matrix)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cooperative_matrix_robust_buffer_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_cooperative_matrix")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_cooperative_matrix")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.corner_sampled_image {
            if !supported.corner_sampled_image {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `corner_sampled_image`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_corner_sampled_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `corner_sampled_image`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_corner_sampled_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.coverage_reduction_mode {
            if !supported.coverage_reduction_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `coverage_reduction_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_coverage_reduction_mode) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `coverage_reduction_mode`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_coverage_reduction_mode")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.cubic_range_clamp {
            if !supported.cubic_range_clamp {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cubic_range_clamp`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_filter_cubic_clamp) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cubic_range_clamp`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_filter_cubic_clamp")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.cuda_kernel_launch_features {
            if !supported.cuda_kernel_launch_features {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cuda_kernel_launch_features`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_cuda_kernel_launch) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `cuda_kernel_launch_features`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_cuda_kernel_launch")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.custom_border_color_without_format {
            if !supported.custom_border_color_without_format {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `custom_border_color_without_format`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_custom_border_color) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `custom_border_color_without_format`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_custom_border_color")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.custom_border_colors {
            if !supported.custom_border_colors {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `custom_border_colors`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_custom_border_color) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `custom_border_colors`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_custom_border_color")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.decode_mode_shared_exponent {
            if !supported.decode_mode_shared_exponent {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `decode_mode_shared_exponent`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_astc_decode_mode) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `decode_mode_shared_exponent`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_astc_decode_mode")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dedicated_allocation_image_aliasing {
            if !supported.dedicated_allocation_image_aliasing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dedicated_allocation_image_aliasing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_dedicated_allocation_image_aliasing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dedicated_allocation_image_aliasing`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_dedicated_allocation_image_aliasing",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_bias_clamp {
            if !supported.depth_bias_clamp {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bias_clamp`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_bias_control {
            if !supported.depth_bias_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bias_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_bias_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bias_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_bias_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_bias_exact {
            if !supported.depth_bias_exact {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bias_exact`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_bias_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bias_exact`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_bias_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_bounds {
            if !supported.depth_bounds {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_bounds`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_clamp {
            if !supported.depth_clamp {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clamp`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_clamp_zero_one {
            if !supported.depth_clamp_zero_one {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clamp_zero_one`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_clamp_zero_one) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clamp_zero_one`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_clamp_zero_one")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_clip_control {
            if !supported.depth_clip_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clip_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_clip_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clip_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_clip_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.depth_clip_enable {
            if !supported.depth_clip_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clip_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_clip_enable) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `depth_clip_enable`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_clip_enable")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_acceleration_structure_update_after_bind {
            if !supported.descriptor_binding_acceleration_structure_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_acceleration_structure_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_acceleration_structure_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_acceleration_structure")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_inline_uniform_block_update_after_bind {
            if !supported.descriptor_binding_inline_uniform_block_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_inline_uniform_block_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_inline_uniform_block)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_inline_uniform_block_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_inline_uniform_block")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_partially_bound {
            if !supported.descriptor_binding_partially_bound {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_partially_bound`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_partially_bound`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_sampled_image_update_after_bind {
            if !supported.descriptor_binding_sampled_image_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_sampled_image_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_sampled_image_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_storage_buffer_update_after_bind {
            if !supported.descriptor_binding_storage_buffer_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_buffer_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_buffer_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_storage_image_update_after_bind {
            if !supported.descriptor_binding_storage_image_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_image_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_image_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_storage_texel_buffer_update_after_bind {
            if !supported.descriptor_binding_storage_texel_buffer_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_texel_buffer_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_storage_texel_buffer_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_uniform_buffer_update_after_bind {
            if !supported.descriptor_binding_uniform_buffer_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_uniform_buffer_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_uniform_buffer_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_uniform_texel_buffer_update_after_bind {
            if !supported.descriptor_binding_uniform_texel_buffer_update_after_bind {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_uniform_texel_buffer_update_after_bind`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_uniform_texel_buffer_update_after_bind`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_update_unused_while_pending {
            if !supported.descriptor_binding_update_unused_while_pending {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_update_unused_while_pending`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_update_unused_while_pending`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_binding_variable_descriptor_count {
            if !supported.descriptor_binding_variable_descriptor_count {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_variable_descriptor_count`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_binding_variable_descriptor_count`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_buffer {
            if !supported.descriptor_buffer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_descriptor_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_buffer_capture_replay {
            if !supported.descriptor_buffer_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_descriptor_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_capture_replay`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_buffer_image_layout_ignored {
            if !supported.descriptor_buffer_image_layout_ignored {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_image_layout_ignored`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_descriptor_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_image_layout_ignored`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_buffer_push_descriptors {
            if !supported.descriptor_buffer_push_descriptors {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_push_descriptors`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_descriptor_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_buffer_push_descriptors`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_indexing {
            if !supported.descriptor_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_indexing`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_pool_overallocation {
            if !supported.descriptor_pool_overallocation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_pool_overallocation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_descriptor_pool_overallocation) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_pool_overallocation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_descriptor_pool_overallocation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.descriptor_set_host_mapping {
            if !supported.descriptor_set_host_mapping {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_set_host_mapping`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.valve_descriptor_set_host_mapping) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `descriptor_set_host_mapping`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "valve_descriptor_set_host_mapping",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_coherent_memory {
            if !supported.device_coherent_memory {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_coherent_memory`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.amd_device_coherent_memory) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_coherent_memory`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("amd_device_coherent_memory")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_fault {
            if !supported.device_fault {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_fault`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_device_fault) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_fault`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_device_fault")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_fault_vendor_binary {
            if !supported.device_fault_vendor_binary {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_fault_vendor_binary`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_device_fault) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_fault_vendor_binary`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_device_fault")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_generated_commands {
            if !supported.device_generated_commands {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_commands`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_device_generated_commands) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_commands`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_device_generated_commands")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_generated_compute {
            if !supported.device_generated_compute {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_device_generated_commands_compute) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_device_generated_commands_compute",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_generated_compute_capture_replay {
            if !supported.device_generated_compute_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_device_generated_commands_compute) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute_capture_replay`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_device_generated_commands_compute",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_generated_compute_pipelines {
            if !supported.device_generated_compute_pipelines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute_pipelines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_device_generated_commands_compute) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_generated_compute_pipelines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_device_generated_commands_compute",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.device_memory_report {
            if !supported.device_memory_report {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_memory_report`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_device_memory_report) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `device_memory_report`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_device_memory_report")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.diagnostics_config {
            if !supported.diagnostics_config {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `diagnostics_config`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_device_diagnostics_config) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `diagnostics_config`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_device_diagnostics_config")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.displacement_micromap {
            if !supported.displacement_micromap {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `displacement_micromap`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_displacement_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `displacement_micromap`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_displacement_micromap")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.draw_indirect_count {
            if !supported.draw_indirect_count {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `draw_indirect_count`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `draw_indirect_count`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.draw_indirect_first_instance {
            if !supported.draw_indirect_first_instance {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `draw_indirect_first_instance`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dual_src_blend {
            if !supported.dual_src_blend {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dual_src_blend`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dynamic_pipeline_layout {
            if !supported.dynamic_pipeline_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_pipeline_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_per_stage_descriptor_set) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_pipeline_layout`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_per_stage_descriptor_set")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dynamic_rendering {
            if !supported.dynamic_rendering {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3 || device_extensions.khr_dynamic_rendering)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_dynamic_rendering")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dynamic_rendering_local_read {
            if !supported.dynamic_rendering_local_read {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering_local_read`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_dynamic_rendering_local_read) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering_local_read`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_dynamic_rendering_local_read",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.dynamic_rendering_unused_attachments {
            if !supported.dynamic_rendering_unused_attachments {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering_unused_attachments`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_dynamic_rendering_unused_attachments) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `dynamic_rendering_unused_attachments`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_dynamic_rendering_unused_attachments",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.events {
            if !supported.events {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `events`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `events`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.exclusive_scissor {
            if !supported.exclusive_scissor {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `exclusive_scissor`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_scissor_exclusive) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `exclusive_scissor`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_scissor_exclusive")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state {
            if !supported.extended_dynamic_state {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state2 {
            if !supported.extended_dynamic_state2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state2_logic_op {
            if !supported.extended_dynamic_state2_logic_op {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2_logic_op`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2_logic_op`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state2_patch_control_points {
            if !supported.extended_dynamic_state2_patch_control_points {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2_patch_control_points`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state2_patch_control_points`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_alpha_to_coverage_enable {
            if !supported.extended_dynamic_state3_alpha_to_coverage_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_alpha_to_coverage_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_alpha_to_coverage_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_alpha_to_one_enable {
            if !supported.extended_dynamic_state3_alpha_to_one_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_alpha_to_one_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_alpha_to_one_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_color_blend_advanced {
            if !supported.extended_dynamic_state3_color_blend_advanced {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_advanced`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_advanced`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_color_blend_enable {
            if !supported.extended_dynamic_state3_color_blend_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_color_blend_equation {
            if !supported.extended_dynamic_state3_color_blend_equation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_equation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_blend_equation`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_color_write_mask {
            if !supported.extended_dynamic_state3_color_write_mask {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_write_mask`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_color_write_mask`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_conservative_rasterization_mode {
            if !supported.extended_dynamic_state3_conservative_rasterization_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_conservative_rasterization_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_conservative_rasterization_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_modulation_mode {
            if !supported.extended_dynamic_state3_coverage_modulation_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_modulation_table {
            if !supported.extended_dynamic_state3_coverage_modulation_table {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_table`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_table`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_modulation_table_enable {
            if !supported.extended_dynamic_state3_coverage_modulation_table_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_table_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_modulation_table_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_reduction_mode {
            if !supported.extended_dynamic_state3_coverage_reduction_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_reduction_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_reduction_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_to_color_enable {
            if !supported.extended_dynamic_state3_coverage_to_color_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_to_color_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_to_color_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_coverage_to_color_location {
            if !supported.extended_dynamic_state3_coverage_to_color_location {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_to_color_location`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_coverage_to_color_location`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_depth_clamp_enable {
            if !supported.extended_dynamic_state3_depth_clamp_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clamp_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clamp_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_depth_clip_enable {
            if !supported.extended_dynamic_state3_depth_clip_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clip_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clip_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_depth_clip_negative_one_to_one {
            if !supported.extended_dynamic_state3_depth_clip_negative_one_to_one {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clip_negative_one_to_one`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_depth_clip_negative_one_to_one`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_extra_primitive_overestimation_size {
            if !supported.extended_dynamic_state3_extra_primitive_overestimation_size {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_extra_primitive_overestimation_size`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_extra_primitive_overestimation_size`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_line_rasterization_mode {
            if !supported.extended_dynamic_state3_line_rasterization_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_line_rasterization_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_line_rasterization_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_line_stipple_enable {
            if !supported.extended_dynamic_state3_line_stipple_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_line_stipple_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_line_stipple_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_logic_op_enable {
            if !supported.extended_dynamic_state3_logic_op_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_logic_op_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_logic_op_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_polygon_mode {
            if !supported.extended_dynamic_state3_polygon_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_polygon_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_polygon_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_provoking_vertex_mode {
            if !supported.extended_dynamic_state3_provoking_vertex_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_provoking_vertex_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_provoking_vertex_mode`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_rasterization_samples {
            if !supported.extended_dynamic_state3_rasterization_samples {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_rasterization_samples`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_rasterization_samples`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_rasterization_stream {
            if !supported.extended_dynamic_state3_rasterization_stream {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_rasterization_stream`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_rasterization_stream`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_representative_fragment_test_enable {
            if !supported.extended_dynamic_state3_representative_fragment_test_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_representative_fragment_test_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_representative_fragment_test_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_sample_locations_enable {
            if !supported.extended_dynamic_state3_sample_locations_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_sample_locations_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_sample_locations_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_sample_mask {
            if !supported.extended_dynamic_state3_sample_mask {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_sample_mask`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_sample_mask`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_shading_rate_image_enable {
            if !supported.extended_dynamic_state3_shading_rate_image_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_shading_rate_image_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_shading_rate_image_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_tessellation_domain_origin {
            if !supported.extended_dynamic_state3_tessellation_domain_origin {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_tessellation_domain_origin`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_tessellation_domain_origin`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_viewport_swizzle {
            if !supported.extended_dynamic_state3_viewport_swizzle {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_viewport_swizzle`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_viewport_swizzle`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_dynamic_state3_viewport_w_scaling_enable {
            if !supported.extended_dynamic_state3_viewport_w_scaling_enable {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_viewport_w_scaling_enable`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_extended_dynamic_state3) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_dynamic_state3_viewport_w_scaling_enable`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_extended_dynamic_state3")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.extended_sparse_address_space {
            if !supported.extended_sparse_address_space {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_sparse_address_space`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_extended_sparse_address_space) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `extended_sparse_address_space`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_extended_sparse_address_space",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.external_format_resolve {
            if !supported.external_format_resolve {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `external_format_resolve`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.android_external_format_resolve) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `external_format_resolve`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("android_external_format_resolve"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.external_memory_rdma {
            if !supported.external_memory_rdma {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `external_memory_rdma`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_external_memory_rdma) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `external_memory_rdma`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_external_memory_rdma")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fill_mode_non_solid {
            if !supported.fill_mode_non_solid {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fill_mode_non_solid`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.float_representation {
            if !supported.float_representation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `float_representation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_bias_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `float_representation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_bias_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.format_a4b4g4r4 {
            if !supported.format_a4b4g4r4 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_a4b4g4r4`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_4444_formats) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_a4b4g4r4`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_4444_formats")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.format_a4r4g4b4 {
            if !supported.format_a4r4g4b4 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_a4r4g4b4`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_4444_formats) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_a4r4g4b4`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_4444_formats")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.format_rgba10x6_without_y_cb_cr_sampler {
            if !supported.format_rgba10x6_without_y_cb_cr_sampler {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_rgba10x6_without_y_cb_cr_sampler`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_rgba10x6_formats) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `format_rgba10x6_without_y_cb_cr_sampler`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_rgba10x6_formats")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_density_map {
            if !supported.fragment_density_map {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_density_map) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_fragment_density_map")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_density_map_deferred {
            if !supported.fragment_density_map_deferred {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_deferred`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_density_map2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_deferred`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_fragment_density_map2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_density_map_dynamic {
            if !supported.fragment_density_map_dynamic {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_dynamic`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_density_map) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_dynamic`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_fragment_density_map")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_density_map_non_subsampled_images {
            if !supported.fragment_density_map_non_subsampled_images {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_non_subsampled_images`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_density_map) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_non_subsampled_images`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_fragment_density_map")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_density_map_offset {
            if !supported.fragment_density_map_offset {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_offset`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_fragment_density_map_offset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_density_map_offset`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "qcom_fragment_density_map_offset",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_shader_barycentric {
            if !supported.fragment_shader_barycentric {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_barycentric`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_fragment_shader_barycentric
                || device_extensions.nv_fragment_shader_barycentric)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_barycentric`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("khr_fragment_shader_barycentric"),
                                    ],
                                ),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_fragment_shader_barycentric"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_shader_pixel_interlock {
            if !supported.fragment_shader_pixel_interlock {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_pixel_interlock`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_shader_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_pixel_interlock`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_fragment_shader_interlock"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_shader_sample_interlock {
            if !supported.fragment_shader_sample_interlock {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_sample_interlock`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_shader_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_sample_interlock`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_fragment_shader_interlock"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_shader_shading_rate_interlock {
            if !supported.fragment_shader_shading_rate_interlock {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_shading_rate_interlock`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_fragment_shader_interlock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shader_shading_rate_interlock`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_fragment_shader_interlock"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_shading_rate_enums {
            if !supported.fragment_shading_rate_enums {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shading_rate_enums`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_fragment_shading_rate_enums) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_shading_rate_enums`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_fragment_shading_rate_enums"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.fragment_stores_and_atomics {
            if !supported.fragment_stores_and_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `fragment_stores_and_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.frame_boundary {
            if !supported.frame_boundary {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `frame_boundary`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_frame_boundary) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `frame_boundary`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_frame_boundary")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.full_draw_index_uint32 {
            if !supported.full_draw_index_uint32 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `full_draw_index_uint32`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.geometry_shader {
            if !supported.geometry_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `geometry_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.geometry_streams {
            if !supported.geometry_streams {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `geometry_streams`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_transform_feedback) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `geometry_streams`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_transform_feedback")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.global_priority_query {
            if !supported.global_priority_query {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `global_priority_query`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_global_priority
                || device_extensions.ext_global_priority_query)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `global_priority_query`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_global_priority")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_global_priority_query")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.graphics_pipeline_library {
            if !supported.graphics_pipeline_library {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `graphics_pipeline_library`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_graphics_pipeline_library) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `graphics_pipeline_library`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_graphics_pipeline_library"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.host_image_copy {
            if !supported.host_image_copy {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `host_image_copy`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_host_image_copy) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `host_image_copy`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_host_image_copy")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.host_query_reset {
            if !supported.host_query_reset {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `host_query_reset`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2 || device_extensions.ext_host_query_reset)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `host_query_reset`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_host_query_reset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image2_d_view_of3_d {
            if !supported.image2_d_view_of3_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image2_d_view_of3_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_2d_view_of_3d) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image2_d_view_of3_d`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_image_2d_view_of_3d")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_compression_control {
            if !supported.image_compression_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_compression_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_compression_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_compression_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_image_compression_control"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_compression_control_swapchain {
            if !supported.image_compression_control_swapchain {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_compression_control_swapchain`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_compression_control_swapchain) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_compression_control_swapchain`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_image_compression_control_swapchain",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_cube_array {
            if !supported.image_cube_array {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_cube_array`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_footprint {
            if !supported.image_footprint {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_footprint`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_shader_image_footprint) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_footprint`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_shader_image_footprint")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_sliced_view_of3_d {
            if !supported.image_sliced_view_of3_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_sliced_view_of3_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_sliced_view_of_3d) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_sliced_view_of3_d`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_image_sliced_view_of_3d")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_view2_d_on3_d_image {
            if !supported.image_view2_d_on3_d_image {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view2_d_on3_d_image`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view2_d_on3_d_image`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_view_format_reinterpretation {
            if !supported.image_view_format_reinterpretation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view_format_reinterpretation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view_format_reinterpretation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.image_view_format_swizzle {
            if !supported.image_view_format_swizzle {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view_format_swizzle`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `image_view_format_swizzle`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.imageless_framebuffer {
            if !supported.imageless_framebuffer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `imageless_framebuffer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_imageless_framebuffer)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `imageless_framebuffer`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_imageless_framebuffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.independent_blend {
            if !supported.independent_blend {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `independent_blend`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.index_type_uint8 {
            if !supported.index_type_uint8 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `index_type_uint8`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_index_type_uint8
                || device_extensions.ext_index_type_uint8)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `index_type_uint8`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_index_type_uint8")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_index_type_uint8")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.indirect_copy {
            if !supported.indirect_copy {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `indirect_copy`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_copy_memory_indirect) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `indirect_copy`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_copy_memory_indirect")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.inherited_conditional_rendering {
            if !supported.inherited_conditional_rendering {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inherited_conditional_rendering`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_conditional_rendering) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inherited_conditional_rendering`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_conditional_rendering")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.inherited_queries {
            if !supported.inherited_queries {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inherited_queries`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.inherited_viewport_scissor2_d {
            if !supported.inherited_viewport_scissor2_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inherited_viewport_scissor2_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_inherited_viewport_scissor) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inherited_viewport_scissor2_d`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_inherited_viewport_scissor"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.inline_uniform_block {
            if !supported.inline_uniform_block {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inline_uniform_block`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_inline_uniform_block)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `inline_uniform_block`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_inline_uniform_block")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.invocation_mask {
            if !supported.invocation_mask {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `invocation_mask`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.huawei_invocation_mask) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `invocation_mask`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("huawei_invocation_mask")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.large_points {
            if !supported.large_points {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `large_points`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.least_representable_value_force_unorm_representation {
            if !supported.least_representable_value_force_unorm_representation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `least_representable_value_force_unorm_representation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_depth_bias_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `least_representable_value_force_unorm_representation`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_depth_bias_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.legacy_dithering {
            if !supported.legacy_dithering {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `legacy_dithering`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_legacy_dithering) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `legacy_dithering`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_legacy_dithering")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.linear_color_attachment {
            if !supported.linear_color_attachment {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `linear_color_attachment`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_linear_color_attachment) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `linear_color_attachment`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_linear_color_attachment")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.logic_op {
            if !supported.logic_op {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `logic_op`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.maintenance4 {
            if !supported.maintenance4 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance4`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3 || device_extensions.khr_maintenance4) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance4`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_maintenance4")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.maintenance5 {
            if !supported.maintenance5 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance5`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_maintenance5) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance5`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_maintenance5")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.maintenance6 {
            if !supported.maintenance6 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance6`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_maintenance6) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `maintenance6`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_maintenance6")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.memory_decompression {
            if !supported.memory_decompression {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_decompression`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_memory_decompression) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_decompression`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_memory_decompression")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.memory_map_placed {
            if !supported.memory_map_placed {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_map_placed`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_map_memory_placed) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_map_placed`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_map_memory_placed")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.memory_map_range_placed {
            if !supported.memory_map_range_placed {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_map_range_placed`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_map_memory_placed) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_map_range_placed`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_map_memory_placed")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.memory_priority {
            if !supported.memory_priority {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_priority`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_memory_priority) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_priority`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_memory_priority")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.memory_unmap_reserve {
            if !supported.memory_unmap_reserve {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_unmap_reserve`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_map_memory_placed) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `memory_unmap_reserve`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_map_memory_placed")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.mesh_shader {
            if !supported.mesh_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mesh_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mesh_shader || device_extensions.nv_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mesh_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_mesh_shader")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.mesh_shader_queries {
            if !supported.mesh_shader_queries {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mesh_shader_queries`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mesh_shader_queries`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.micromap {
            if !supported.micromap {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_opacity_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_opacity_micromap")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.micromap_capture_replay {
            if !supported.micromap_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_opacity_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap_capture_replay`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_opacity_micromap")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.micromap_host_commands {
            if !supported.micromap_host_commands {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap_host_commands`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_opacity_micromap) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `micromap_host_commands`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_opacity_micromap")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.min_lod {
            if !supported.min_lod {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `min_lod`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_view_min_lod) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `min_lod`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_image_view_min_lod")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multi_draw {
            if !supported.multi_draw {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multi_draw`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_multi_draw) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multi_draw`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_multi_draw")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multi_draw_indirect {
            if !supported.multi_draw_indirect {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multi_draw_indirect`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multi_viewport {
            if !supported.multi_viewport {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multi_viewport`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multisample_array_image {
            if !supported.multisample_array_image {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multisample_array_image`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multisample_array_image`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multisampled_render_to_single_sampled {
            if !supported.multisampled_render_to_single_sampled {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multisampled_render_to_single_sampled`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_multisampled_render_to_single_sampled) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multisampled_render_to_single_sampled`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_multisampled_render_to_single_sampled",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview {
            if !supported.multiview {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_multiview) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(&[Requires::DeviceExtension("khr_multiview")]),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_cluster_culling_shader {
            if !supported.multiview_cluster_culling_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_cluster_culling_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.huawei_cluster_culling_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_cluster_culling_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("huawei_cluster_culling_shader"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_geometry_shader {
            if !supported.multiview_geometry_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_geometry_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_multiview) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_geometry_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(&[Requires::DeviceExtension("khr_multiview")]),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_mesh_shader {
            if !supported.multiview_mesh_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_mesh_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_mesh_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_per_view_render_areas {
            if !supported.multiview_per_view_render_areas {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_per_view_render_areas`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_multiview_per_view_render_areas) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_per_view_render_areas`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "qcom_multiview_per_view_render_areas",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_per_view_viewports {
            if !supported.multiview_per_view_viewports {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_per_view_viewports`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_multiview_per_view_viewports) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_per_view_viewports`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "qcom_multiview_per_view_viewports",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.multiview_tessellation_shader {
            if !supported.multiview_tessellation_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_tessellation_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_multiview) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `multiview_tessellation_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(&[Requires::DeviceExtension("khr_multiview")]),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.mutable_comparison_samplers {
            if !supported.mutable_comparison_samplers {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mutable_comparison_samplers`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mutable_comparison_samplers`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.mutable_descriptor_type {
            if !supported.mutable_descriptor_type {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mutable_descriptor_type`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mutable_descriptor_type
                || device_extensions.valve_mutable_descriptor_type)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `mutable_descriptor_type`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mutable_descriptor_type")],
                                ),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("valve_mutable_descriptor_type"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nested_command_buffer {
            if !supported.nested_command_buffer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_nested_command_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_nested_command_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nested_command_buffer_rendering {
            if !supported.nested_command_buffer_rendering {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer_rendering`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_nested_command_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer_rendering`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_nested_command_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.nested_command_buffer_simultaneous_use {
            if !supported.nested_command_buffer_simultaneous_use {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer_simultaneous_use`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_nested_command_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `nested_command_buffer_simultaneous_use`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_nested_command_buffer")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.no_invocation_fragment_shading_rates {
            if !supported.no_invocation_fragment_shading_rates {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `no_invocation_fragment_shading_rates`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_fragment_shading_rate_enums) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `no_invocation_fragment_shading_rates`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_fragment_shading_rate_enums"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.non_seamless_cube_map {
            if !supported.non_seamless_cube_map {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `non_seamless_cube_map`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_non_seamless_cube_map) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `non_seamless_cube_map`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_non_seamless_cube_map")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.null_descriptor {
            if !supported.null_descriptor {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `null_descriptor`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_robustness2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `null_descriptor`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_robustness2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.occlusion_query_precise {
            if !supported.occlusion_query_precise {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `occlusion_query_precise`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.optical_flow {
            if !supported.optical_flow {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `optical_flow`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_optical_flow) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `optical_flow`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_optical_flow")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pageable_device_local_memory {
            if !supported.pageable_device_local_memory {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pageable_device_local_memory`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_pageable_device_local_memory) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pageable_device_local_memory`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_pageable_device_local_memory",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.per_stage_descriptor_set {
            if !supported.per_stage_descriptor_set {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `per_stage_descriptor_set`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_per_stage_descriptor_set) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `per_stage_descriptor_set`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_per_stage_descriptor_set")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.performance_counter_multiple_query_pools {
            if !supported.performance_counter_multiple_query_pools {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `performance_counter_multiple_query_pools`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_performance_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `performance_counter_multiple_query_pools`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_performance_query")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.performance_counter_query_pools {
            if !supported.performance_counter_query_pools {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `performance_counter_query_pools`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_performance_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `performance_counter_query_pools`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_performance_query")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_creation_cache_control {
            if !supported.pipeline_creation_cache_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_creation_cache_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_pipeline_creation_cache_control)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_creation_cache_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_pipeline_creation_cache_control",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_executable_info {
            if !supported.pipeline_executable_info {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_executable_info`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_pipeline_executable_properties) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_executable_info`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_pipeline_executable_properties",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_fragment_shading_rate {
            if !supported.pipeline_fragment_shading_rate {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_fragment_shading_rate`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_fragment_shading_rate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_fragment_shading_rate`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_fragment_shading_rate")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_library_group_handles {
            if !supported.pipeline_library_group_handles {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_library_group_handles`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_pipeline_library_group_handles) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_library_group_handles`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_pipeline_library_group_handles",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_properties_identifier {
            if !supported.pipeline_properties_identifier {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_properties_identifier`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_pipeline_properties) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_properties_identifier`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_pipeline_properties")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_protected_access {
            if !supported.pipeline_protected_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_protected_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_pipeline_protected_access) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_protected_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_pipeline_protected_access"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_robustness {
            if !supported.pipeline_robustness {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_robustness`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_pipeline_robustness) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_robustness`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_pipeline_robustness")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.pipeline_statistics_query {
            if !supported.pipeline_statistics_query {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `pipeline_statistics_query`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.point_polygons {
            if !supported.point_polygons {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `point_polygons`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `point_polygons`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.present_barrier {
            if !supported.present_barrier {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_barrier`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_present_barrier) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_barrier`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_present_barrier")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.present_id {
            if !supported.present_id {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_id`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_present_id) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_id`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_present_id")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.present_wait {
            if !supported.present_wait {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_wait`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_present_wait) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `present_wait`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_present_wait")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitive_fragment_shading_rate {
            if !supported.primitive_fragment_shading_rate {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_fragment_shading_rate`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_fragment_shading_rate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_fragment_shading_rate`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_fragment_shading_rate")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitive_fragment_shading_rate_mesh_shader {
            if !supported.primitive_fragment_shading_rate_mesh_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_fragment_shading_rate_mesh_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_fragment_shading_rate_mesh_shader`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitive_topology_list_restart {
            if !supported.primitive_topology_list_restart {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_topology_list_restart`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_primitive_topology_list_restart) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_topology_list_restart`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_primitive_topology_list_restart",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitive_topology_patch_list_restart {
            if !supported.primitive_topology_patch_list_restart {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_topology_patch_list_restart`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_primitive_topology_list_restart) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitive_topology_patch_list_restart`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_primitive_topology_list_restart",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitives_generated_query {
            if !supported.primitives_generated_query {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_primitives_generated_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_primitives_generated_query"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitives_generated_query_with_non_zero_streams {
            if !supported.primitives_generated_query_with_non_zero_streams {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query_with_non_zero_streams`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_primitives_generated_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query_with_non_zero_streams`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_primitives_generated_query"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.primitives_generated_query_with_rasterizer_discard {
            if !supported.primitives_generated_query_with_rasterizer_discard {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query_with_rasterizer_discard`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_primitives_generated_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `primitives_generated_query_with_rasterizer_discard`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_primitives_generated_query"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.private_data {
            if !supported.private_data {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `private_data`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3 || device_extensions.ext_private_data) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `private_data`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_private_data")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.protected_memory {
            if !supported.protected_memory {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `protected_memory`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `protected_memory`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_1)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.provoking_vertex_last {
            if !supported.provoking_vertex_last {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `provoking_vertex_last`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_provoking_vertex) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `provoking_vertex_last`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_provoking_vertex")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.rasterization_order_color_attachment_access {
            if !supported.rasterization_order_color_attachment_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_color_attachment_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_rasterization_order_attachment_access
                || device_extensions.arm_rasterization_order_attachment_access)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_color_attachment_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "arm_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.rasterization_order_depth_attachment_access {
            if !supported.rasterization_order_depth_attachment_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_depth_attachment_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_rasterization_order_attachment_access
                || device_extensions.arm_rasterization_order_attachment_access)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_depth_attachment_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "arm_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.rasterization_order_stencil_attachment_access {
            if !supported.rasterization_order_stencil_attachment_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_stencil_attachment_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_rasterization_order_attachment_access
                || device_extensions.arm_rasterization_order_attachment_access)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rasterization_order_stencil_attachment_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "arm_rasterization_order_attachment_access",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_query {
            if !supported.ray_query {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_query`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_query) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_query`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::DeviceExtension("khr_ray_query")]),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_invocation_reorder {
            if !supported.ray_tracing_invocation_reorder {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_invocation_reorder`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_ray_tracing_invocation_reorder) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_invocation_reorder`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "nv_ray_tracing_invocation_reorder",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_maintenance1 {
            if !supported.ray_tracing_maintenance1 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_maintenance1`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_maintenance1`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_maintenance1")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_motion_blur {
            if !supported.ray_tracing_motion_blur {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_motion_blur`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_ray_tracing_motion_blur) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_motion_blur`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_ray_tracing_motion_blur")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_motion_blur_pipeline_trace_rays_indirect {
            if !supported.ray_tracing_motion_blur_pipeline_trace_rays_indirect {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_motion_blur_pipeline_trace_rays_indirect`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_ray_tracing_motion_blur) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_motion_blur_pipeline_trace_rays_indirect`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_ray_tracing_motion_blur")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_pipeline {
            if !supported.ray_tracing_pipeline {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_pipeline_shader_group_handle_capture_replay {
            if !supported.ray_tracing_pipeline_shader_group_handle_capture_replay {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_shader_group_handle_capture_replay`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_shader_group_handle_capture_replay`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed {
            if !supported.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_shader_group_handle_capture_replay_mixed`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_shader_group_handle_capture_replay_mixed`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_pipeline_trace_rays_indirect {
            if !supported.ray_tracing_pipeline_trace_rays_indirect {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_trace_rays_indirect`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_trace_rays_indirect`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_pipeline_trace_rays_indirect2 {
            if !supported.ray_tracing_pipeline_trace_rays_indirect2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_trace_rays_indirect2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_pipeline_trace_rays_indirect2`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_maintenance1")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_position_fetch {
            if !supported.ray_tracing_position_fetch {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_position_fetch`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_position_fetch) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_position_fetch`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("khr_ray_tracing_position_fetch"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_tracing_validation {
            if !supported.ray_tracing_validation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_validation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_ray_tracing_validation) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_tracing_validation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_ray_tracing_validation")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ray_traversal_primitive_culling {
            if !supported.ray_traversal_primitive_culling {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_traversal_primitive_culling`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ray_traversal_primitive_culling`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_ray_tracing_pipeline")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.rectangular_lines {
            if !supported.rectangular_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rectangular_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `rectangular_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.relaxed_line_rasterization {
            if !supported.relaxed_line_rasterization {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `relaxed_line_rasterization`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.img_relaxed_line_rasterization) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `relaxed_line_rasterization`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("img_relaxed_line_rasterization"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.render_pass_striped {
            if !supported.render_pass_striped {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `render_pass_striped`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.arm_render_pass_striped) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `render_pass_striped`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("arm_render_pass_striped")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.report_address_binding {
            if !supported.report_address_binding {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `report_address_binding`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_device_address_binding_report) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `report_address_binding`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_device_address_binding_report",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.representative_fragment_test {
            if !supported.representative_fragment_test {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `representative_fragment_test`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_representative_fragment_test) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `representative_fragment_test`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_representative_fragment_test"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.robust_buffer_access {
            if !supported.robust_buffer_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_buffer_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.robust_buffer_access2 {
            if !supported.robust_buffer_access2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_buffer_access2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_robustness2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_buffer_access2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_robustness2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.robust_image_access {
            if !supported.robust_image_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_image_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3 || device_extensions.ext_image_robustness)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_image_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_image_robustness")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.robust_image_access2 {
            if !supported.robust_image_access2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_image_access2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_robustness2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `robust_image_access2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_robustness2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.runtime_descriptor_array {
            if !supported.runtime_descriptor_array {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `runtime_descriptor_array`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `runtime_descriptor_array`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sample_rate_shading {
            if !supported.sample_rate_shading {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sample_rate_shading`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler2_d_view_of3_d {
            if !supported.sampler2_d_view_of3_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler2_d_view_of3_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_image_2d_view_of_3d) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler2_d_view_of3_d`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_image_2d_view_of_3d")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler_anisotropy {
            if !supported.sampler_anisotropy {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_anisotropy`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler_filter_minmax {
            if !supported.sampler_filter_minmax {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_filter_minmax`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_filter_minmax`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler_mip_lod_bias {
            if !supported.sampler_mip_lod_bias {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_mip_lod_bias`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_mip_lod_bias`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler_mirror_clamp_to_edge {
            if !supported.sampler_mirror_clamp_to_edge {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_mirror_clamp_to_edge`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_mirror_clamp_to_edge`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sampler_ycbcr_conversion {
            if !supported.sampler_ycbcr_conversion {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_ycbcr_conversion`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1
                || device_extensions.khr_sampler_ycbcr_conversion)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sampler_ycbcr_conversion`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_sampler_ycbcr_conversion")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.scalar_block_layout {
            if !supported.scalar_block_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `scalar_block_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_scalar_block_layout)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `scalar_block_layout`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_scalar_block_layout")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.scheduling_controls {
            if !supported.scheduling_controls {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `scheduling_controls`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.arm_scheduling_controls) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `scheduling_controls`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("arm_scheduling_controls")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.screen_buffer_import {
            if !supported.screen_buffer_import {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `screen_buffer_import`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qnx_external_memory_screen_buffer) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `screen_buffer_import`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "qnx_external_memory_screen_buffer",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.selectable_cubic_weights {
            if !supported.selectable_cubic_weights {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `selectable_cubic_weights`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_filter_cubic_weights) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `selectable_cubic_weights`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_filter_cubic_weights")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.separate_depth_stencil_layouts {
            if !supported.separate_depth_stencil_layouts {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `separate_depth_stencil_layouts`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_separate_depth_stencil_layouts)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `separate_depth_stencil_layouts`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_separate_depth_stencil_layouts",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.separate_stencil_mask_ref {
            if !supported.separate_stencil_mask_ref {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `separate_stencil_mask_ref`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `separate_stencil_mask_ref`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float16_atomic_add {
            if !supported.shader_buffer_float16_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float16_atomic_min_max {
            if !supported.shader_buffer_float16_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float16_atomics {
            if !supported.shader_buffer_float16_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float16_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float32_atomic_add {
            if !supported.shader_buffer_float32_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float32_atomic_min_max {
            if !supported.shader_buffer_float32_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float32_atomics {
            if !supported.shader_buffer_float32_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float32_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float64_atomic_add {
            if !supported.shader_buffer_float64_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float64_atomic_min_max {
            if !supported.shader_buffer_float64_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_float64_atomics {
            if !supported.shader_buffer_float64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_float64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_buffer_int64_atomics {
            if !supported.shader_buffer_int64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_int64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_shader_atomic_int64)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_buffer_int64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_atomic_int64")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_clip_distance {
            if !supported.shader_clip_distance {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_clip_distance`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_core_builtins {
            if !supported.shader_core_builtins {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_core_builtins`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.arm_shader_core_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_core_builtins`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("arm_shader_core_builtins")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_cull_distance {
            if !supported.shader_cull_distance {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_cull_distance`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_demote_to_helper_invocation {
            if !supported.shader_demote_to_helper_invocation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_demote_to_helper_invocation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_shader_demote_to_helper_invocation)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_demote_to_helper_invocation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_shader_demote_to_helper_invocation",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_device_clock {
            if !supported.shader_device_clock {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_device_clock`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_clock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_device_clock`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_clock")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_draw_parameters {
            if !supported.shader_draw_parameters {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_draw_parameters`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_draw_parameters`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_1)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_early_and_late_fragment_tests {
            if !supported.shader_early_and_late_fragment_tests {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_early_and_late_fragment_tests`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.amd_shader_early_and_late_fragment_tests) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_early_and_late_fragment_tests`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "amd_shader_early_and_late_fragment_tests",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_enqueue {
            if !supported.shader_enqueue {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_enqueue`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.amdx_shader_enqueue) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_enqueue`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("amdx_shader_enqueue")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_expect_assume {
            if !supported.shader_expect_assume {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_expect_assume`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_expect_assume) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_expect_assume`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_expect_assume")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_float16 {
            if !supported.shader_float16 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float16`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_shader_float16_int8)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float16`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_float16_int8")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_float16_vector_atomics {
            if !supported.shader_float16_vector_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float16_vector_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_shader_atomic_float16_vector) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float16_vector_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_shader_atomic_float16_vector"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_float64 {
            if !supported.shader_float64 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float64`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_float_controls2 {
            if !supported.shader_float_controls2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float_controls2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_float_controls2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_float_controls2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_float_controls2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_image_float32_atomic_add {
            if !supported.shader_image_float32_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_image_float32_atomic_min_max {
            if !supported.shader_image_float32_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomic_min_max`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_image_float32_atomics {
            if !supported.shader_image_float32_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_float32_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_image_gather_extended {
            if !supported.shader_image_gather_extended {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_gather_extended`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_image_int64_atomics {
            if !supported.shader_image_int64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_int64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_image_atomic_int64) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_image_int64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_shader_image_atomic_int64"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_input_attachment_array_dynamic_indexing {
            if !supported.shader_input_attachment_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_input_attachment_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_input_attachment_array_dynamic_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_input_attachment_array_non_uniform_indexing {
            if !supported.shader_input_attachment_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_input_attachment_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_input_attachment_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_int16 {
            if !supported.shader_int16 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_int16`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_int64 {
            if !supported.shader_int64 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_int64`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_int8 {
            if !supported.shader_int8 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_int8`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_shader_float16_int8)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_int8`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_float16_int8")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_integer_dot_product {
            if !supported.shader_integer_dot_product {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_integer_dot_product`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.khr_shader_integer_dot_product)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_integer_dot_product`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("khr_shader_integer_dot_product"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_integer_functions2 {
            if !supported.shader_integer_functions2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_integer_functions2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.intel_shader_integer_functions2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_integer_functions2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("intel_shader_integer_functions2"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_maximal_reconvergence {
            if !supported.shader_maximal_reconvergence {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_maximal_reconvergence`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_maximal_reconvergence) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_maximal_reconvergence`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_shader_maximal_reconvergence",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_module_identifier {
            if !supported.shader_module_identifier {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_module_identifier`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_module_identifier) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_module_identifier`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_module_identifier")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_object {
            if !supported.shader_object {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_object`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_object) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_object`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_object")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_output_layer {
            if !supported.shader_output_layer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_output_layer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_output_layer`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_output_viewport_index {
            if !supported.shader_output_viewport_index {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_output_viewport_index`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_output_viewport_index`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_quad_control {
            if !supported.shader_quad_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_quad_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_quad_control) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_quad_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_quad_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_raw_access_chains {
            if !supported.shader_raw_access_chains {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_raw_access_chains`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_raw_access_chains) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_raw_access_chains`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_raw_access_chains")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_resource_min_lod {
            if !supported.shader_resource_min_lod {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_resource_min_lod`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_resource_residency {
            if !supported.shader_resource_residency {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_resource_residency`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_sample_rate_interpolation_functions {
            if !supported.shader_sample_rate_interpolation_functions {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sample_rate_interpolation_functions`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sample_rate_interpolation_functions`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_sampled_image_array_dynamic_indexing {
            if !supported.shader_sampled_image_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sampled_image_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_sampled_image_array_non_uniform_indexing {
            if !supported.shader_sampled_image_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sampled_image_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sampled_image_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float16_atomic_add {
            if !supported.shader_shared_float16_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float16_atomic_min_max {
            if !supported.shader_shared_float16_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float16_atomics {
            if !supported.shader_shared_float16_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float16_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float32_atomic_add {
            if !supported.shader_shared_float32_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float32_atomic_min_max {
            if !supported.shader_shared_float32_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float32_atomics {
            if !supported.shader_shared_float32_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float32_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float64_atomic_add {
            if !supported.shader_shared_float64_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float64_atomic_min_max {
            if !supported.shader_shared_float64_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomic_min_max`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_float64_atomics {
            if !supported.shader_shared_float64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_float64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_shared_int64_atomics {
            if !supported.shader_shared_int64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_int64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_shader_atomic_int64)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_shared_int64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_atomic_int64")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_sm_builtins {
            if !supported.shader_sm_builtins {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sm_builtins`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_shader_sm_builtins) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_sm_builtins`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_shader_sm_builtins")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_buffer_array_dynamic_indexing {
            if !supported.shader_storage_buffer_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_buffer_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_buffer_array_non_uniform_indexing {
            if !supported.shader_storage_buffer_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_buffer_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_buffer_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_array_dynamic_indexing {
            if !supported.shader_storage_image_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_array_non_uniform_indexing {
            if !supported.shader_storage_image_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_extended_formats {
            if !supported.shader_storage_image_extended_formats {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_extended_formats`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_multisample {
            if !supported.shader_storage_image_multisample {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_multisample`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_read_without_format {
            if !supported.shader_storage_image_read_without_format {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_read_without_format`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_image_write_without_format {
            if !supported.shader_storage_image_write_without_format {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_image_write_without_format`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_texel_buffer_array_dynamic_indexing {
            if !supported.shader_storage_texel_buffer_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_texel_buffer_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_texel_buffer_array_dynamic_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_storage_texel_buffer_array_non_uniform_indexing {
            if !supported.shader_storage_texel_buffer_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_texel_buffer_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_storage_texel_buffer_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_subgroup_clock {
            if !supported.shader_subgroup_clock {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_clock`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_clock) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_clock`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_clock")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_subgroup_extended_types {
            if !supported.shader_subgroup_extended_types {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_extended_types`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_shader_subgroup_extended_types)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_extended_types`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_shader_subgroup_extended_types",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_subgroup_rotate {
            if !supported.shader_subgroup_rotate {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_rotate`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_subgroup_rotate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_rotate`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_subgroup_rotate")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_subgroup_rotate_clustered {
            if !supported.shader_subgroup_rotate_clustered {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_rotate_clustered`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_subgroup_rotate) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_rotate_clustered`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_shader_subgroup_rotate")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_subgroup_uniform_control_flow {
            if !supported.shader_subgroup_uniform_control_flow {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_uniform_control_flow`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_shader_subgroup_uniform_control_flow) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_subgroup_uniform_control_flow`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_shader_subgroup_uniform_control_flow",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_terminate_invocation {
            if !supported.shader_terminate_invocation {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_terminate_invocation`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.khr_shader_terminate_invocation)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_terminate_invocation`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("khr_shader_terminate_invocation"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_tessellation_and_geometry_point_size {
            if !supported.shader_tessellation_and_geometry_point_size {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tessellation_and_geometry_point_size`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_tile_image_color_read_access {
            if !supported.shader_tile_image_color_read_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_color_read_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_tile_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_color_read_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_tile_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_tile_image_depth_read_access {
            if !supported.shader_tile_image_depth_read_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_depth_read_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_tile_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_depth_read_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_tile_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_tile_image_stencil_read_access {
            if !supported.shader_tile_image_stencil_read_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_stencil_read_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_tile_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_tile_image_stencil_read_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_tile_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_uniform_buffer_array_dynamic_indexing {
            if !supported.shader_uniform_buffer_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_buffer_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_uniform_buffer_array_non_uniform_indexing {
            if !supported.shader_uniform_buffer_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_buffer_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_buffer_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_uniform_texel_buffer_array_dynamic_indexing {
            if !supported.shader_uniform_texel_buffer_array_dynamic_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_texel_buffer_array_dynamic_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_texel_buffer_array_dynamic_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_uniform_texel_buffer_array_non_uniform_indexing {
            if !supported.shader_uniform_texel_buffer_array_non_uniform_indexing {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_texel_buffer_array_non_uniform_indexing`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_uniform_texel_buffer_array_non_uniform_indexing`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_descriptor_indexing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shader_zero_initialize_workgroup_memory {
            if !supported.shader_zero_initialize_workgroup_memory {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_zero_initialize_workgroup_memory`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.khr_zero_initialize_workgroup_memory)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shader_zero_initialize_workgroup_memory`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_zero_initialize_workgroup_memory",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shading_rate_coarse_sample_order {
            if !supported.shading_rate_coarse_sample_order {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shading_rate_coarse_sample_order`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_shading_rate_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shading_rate_coarse_sample_order`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_shading_rate_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.shading_rate_image {
            if !supported.shading_rate_image {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shading_rate_image`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_shading_rate_image) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `shading_rate_image`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_shading_rate_image")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.smooth_lines {
            if !supported.smooth_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `smooth_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `smooth_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_binding {
            if !supported.sparse_binding {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_binding`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_image_float32_atomic_add {
            if !supported.sparse_image_float32_atomic_add {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomic_add`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomic_add`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_image_float32_atomic_min_max {
            if !supported.sparse_image_float32_atomic_min_max {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomic_min_max`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomic_min_max`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_image_float32_atomics {
            if !supported.sparse_image_float32_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_float32_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_shader_atomic_float")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_image_int64_atomics {
            if !supported.sparse_image_int64_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_int64_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_shader_image_atomic_int64) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_image_int64_atomics`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_shader_image_atomic_int64"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency16_samples {
            if !supported.sparse_residency16_samples {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency16_samples`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency2_samples {
            if !supported.sparse_residency2_samples {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency2_samples`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency4_samples {
            if !supported.sparse_residency4_samples {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency4_samples`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency8_samples {
            if !supported.sparse_residency8_samples {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency8_samples`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency_aliased {
            if !supported.sparse_residency_aliased {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency_aliased`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency_buffer {
            if !supported.sparse_residency_buffer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency_buffer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency_image2_d {
            if !supported.sparse_residency_image2_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency_image2_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.sparse_residency_image3_d {
            if !supported.sparse_residency_image3_d {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `sparse_residency_image3_d`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.stippled_bresenham_lines {
            if !supported.stippled_bresenham_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_bresenham_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_bresenham_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.stippled_rectangular_lines {
            if !supported.stippled_rectangular_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_rectangular_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_rectangular_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.stippled_smooth_lines {
            if !supported.stippled_smooth_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_smooth_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `stippled_smooth_lines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_line_rasterization")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_line_rasterization")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.storage_buffer16_bit_access {
            if !supported.storage_buffer16_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_buffer16_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_16bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_buffer16_bit_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_16bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.storage_buffer8_bit_access {
            if !supported.storage_buffer8_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_buffer8_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_8bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_buffer8_bit_access`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_8bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.storage_input_output16 {
            if !supported.storage_input_output16 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_input_output16`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_16bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_input_output16`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_16bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.storage_push_constant16 {
            if !supported.storage_push_constant16 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_push_constant16`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_16bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_push_constant16`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_16bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.storage_push_constant8 {
            if !supported.storage_push_constant8 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_push_constant8`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_8bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `storage_push_constant8`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_8bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.subgroup_broadcast_dynamic_id {
            if !supported.subgroup_broadcast_dynamic_id {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subgroup_broadcast_dynamic_id`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subgroup_broadcast_dynamic_id`".into(),
                        requires_one_of: RequiresOneOf(
                            &[RequiresAllOf(&[Requires::APIVersion(Version::V1_2)])],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.subgroup_size_control {
            if !supported.subgroup_size_control {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subgroup_size_control`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_subgroup_size_control)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subgroup_size_control`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_subgroup_size_control")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.subpass_merge_feedback {
            if !supported.subpass_merge_feedback {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subpass_merge_feedback`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_subpass_merge_feedback) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subpass_merge_feedback`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_subpass_merge_feedback")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.subpass_shading {
            if !supported.subpass_shading {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subpass_shading`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.huawei_subpass_shading) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `subpass_shading`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("huawei_subpass_shading")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.supersample_fragment_shading_rates {
            if !supported.supersample_fragment_shading_rates {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `supersample_fragment_shading_rates`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.nv_fragment_shading_rate_enums) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `supersample_fragment_shading_rates`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("nv_fragment_shading_rate_enums"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.swapchain_maintenance1 {
            if !supported.swapchain_maintenance1 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `swapchain_maintenance1`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_swapchain_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `swapchain_maintenance1`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_swapchain_maintenance1")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.synchronization2 {
            if !supported.synchronization2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `synchronization2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3 || device_extensions.khr_synchronization2)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `synchronization2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_synchronization2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.task_shader {
            if !supported.task_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `task_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_mesh_shader || device_extensions.nv_mesh_shader) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `task_shader`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_mesh_shader")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("nv_mesh_shader")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.tessellation_isolines {
            if !supported.tessellation_isolines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tessellation_isolines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tessellation_isolines`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.tessellation_point_mode {
            if !supported.tessellation_point_mode {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tessellation_point_mode`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tessellation_point_mode`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.tessellation_shader {
            if !supported.tessellation_shader {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tessellation_shader`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texel_buffer_alignment {
            if !supported.texel_buffer_alignment {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texel_buffer_alignment`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_texel_buffer_alignment) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texel_buffer_alignment`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_texel_buffer_alignment")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_block_match {
            if !supported.texture_block_match {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_block_match`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_image_processing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_block_match`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_image_processing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_block_match2 {
            if !supported.texture_block_match2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_block_match2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_image_processing2) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_block_match2`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_image_processing2")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_box_filter {
            if !supported.texture_box_filter {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_box_filter`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_image_processing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_box_filter`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_image_processing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_compression_astc_hdr {
            if !supported.texture_compression_astc_hdr {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_compression_astc_hdr`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_3
                || device_extensions.ext_texture_compression_astc_hdr)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_compression_astc_hdr`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_3)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "ext_texture_compression_astc_hdr",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_compression_astc_ldr {
            if !supported.texture_compression_astc_ldr {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_compression_astc_ldr`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_compression_bc {
            if !supported.texture_compression_bc {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_compression_bc`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_compression_etc2 {
            if !supported.texture_compression_etc2 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_compression_etc2`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.texture_sample_weighted {
            if !supported.texture_sample_weighted {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_sample_weighted`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_image_processing) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `texture_sample_weighted`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_image_processing")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.tile_properties {
            if !supported.tile_properties {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tile_properties`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_tile_properties) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `tile_properties`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_tile_properties")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.timeline_semaphore {
            if !supported.timeline_semaphore {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `timeline_semaphore`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_timeline_semaphore)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `timeline_semaphore`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_timeline_semaphore")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.transform_feedback {
            if !supported.transform_feedback {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `transform_feedback`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_transform_feedback) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `transform_feedback`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_transform_feedback")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.transform_feedback_preserves_provoking_vertex {
            if !supported.transform_feedback_preserves_provoking_vertex {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `transform_feedback_preserves_provoking_vertex`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_provoking_vertex) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `transform_feedback_preserves_provoking_vertex`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_provoking_vertex")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.triangle_fans {
            if !supported.triangle_fans {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `triangle_fans`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `triangle_fans`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.uniform_and_storage_buffer16_bit_access {
            if !supported.uniform_and_storage_buffer16_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_and_storage_buffer16_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_16bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_and_storage_buffer16_bit_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_16bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.uniform_and_storage_buffer8_bit_access {
            if !supported.uniform_and_storage_buffer8_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_and_storage_buffer8_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_8bit_storage) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_and_storage_buffer8_bit_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_8bit_storage")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.uniform_buffer_standard_layout {
            if !supported.uniform_buffer_standard_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_buffer_standard_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_uniform_buffer_standard_layout)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `uniform_buffer_standard_layout`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_uniform_buffer_standard_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.variable_multisample_rate {
            if !supported.variable_multisample_rate {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `variable_multisample_rate`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.variable_pointers {
            if !supported.variable_pointers {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `variable_pointers`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_variable_pointers)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `variable_pointers`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_variable_pointers")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.variable_pointers_storage_buffer {
            if !supported.variable_pointers_storage_buffer {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `variable_pointers_storage_buffer`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_variable_pointers)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `variable_pointers_storage_buffer`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_1)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_variable_pointers")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vertex_attribute_access_beyond_stride {
            if !supported.vertex_attribute_access_beyond_stride {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_access_beyond_stride`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_portability_subset) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_access_beyond_stride`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_portability_subset")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vertex_attribute_instance_rate_divisor {
            if !supported.vertex_attribute_instance_rate_divisor {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_instance_rate_divisor`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_vertex_attribute_divisor
                || device_extensions.ext_vertex_attribute_divisor)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_instance_rate_divisor`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_vertex_attribute_divisor")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_vertex_attribute_divisor")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vertex_attribute_instance_rate_zero_divisor {
            if !supported.vertex_attribute_instance_rate_zero_divisor {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_instance_rate_zero_divisor`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_vertex_attribute_divisor
                || device_extensions.ext_vertex_attribute_divisor)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_attribute_instance_rate_zero_divisor`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_vertex_attribute_divisor")],
                                ),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_vertex_attribute_divisor")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vertex_input_dynamic_state {
            if !supported.vertex_input_dynamic_state {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_input_dynamic_state`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_vertex_input_dynamic_state) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_input_dynamic_state`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension("ext_vertex_input_dynamic_state"),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vertex_pipeline_stores_and_atomics {
            if !supported.vertex_pipeline_stores_and_atomics {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vertex_pipeline_stores_and_atomics`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.video_maintenance1 {
            if !supported.video_maintenance1 {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `video_maintenance1`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_video_maintenance1) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `video_maintenance1`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_video_maintenance1")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vulkan_memory_model {
            if !supported.vulkan_memory_model {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_vulkan_memory_model")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vulkan_memory_model_availability_visibility_chains {
            if !supported.vulkan_memory_model_availability_visibility_chains {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model_availability_visibility_chains`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model_availability_visibility_chains`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_vulkan_memory_model")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.vulkan_memory_model_device_scope {
            if !supported.vulkan_memory_model_device_scope {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model_device_scope`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(api_version >= Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
            {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `vulkan_memory_model_device_scope`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(&[Requires::APIVersion(Version::V1_2)]),
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("khr_vulkan_memory_model")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.wide_lines {
            if !supported.wide_lines {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `wide_lines`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.workgroup_memory_explicit_layout {
            if !supported.workgroup_memory_explicit_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.workgroup_memory_explicit_layout16_bit_access {
            if !supported.workgroup_memory_explicit_layout16_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout16_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout16_bit_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.workgroup_memory_explicit_layout8_bit_access {
            if !supported.workgroup_memory_explicit_layout8_bit_access {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout8_bit_access`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout8_bit_access`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.workgroup_memory_explicit_layout_scalar_block_layout {
            if !supported.workgroup_memory_explicit_layout_scalar_block_layout {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout_scalar_block_layout`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.khr_workgroup_memory_explicit_layout) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `workgroup_memory_explicit_layout_scalar_block_layout`"
                            .into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[
                                        Requires::DeviceExtension(
                                            "khr_workgroup_memory_explicit_layout",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ycbcr2plane444_formats {
            if !supported.ycbcr2plane444_formats {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr2plane444_formats`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_ycbcr_2plane_444_formats) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr2plane444_formats`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_ycbcr_2plane_444_formats")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ycbcr_degamma {
            if !supported.ycbcr_degamma {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr_degamma`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.qcom_ycbcr_degamma) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr_degamma`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("qcom_ycbcr_degamma")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        if self.ycbcr_image_arrays {
            if !supported.ycbcr_image_arrays {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr_image_arrays`, but this feature is not supported by the physical device"
                            .into(),
                        ..Default::default()
                    }),
                );
            }
            if !(device_extensions.ext_ycbcr_image_arrays) {
                return Err(
                    Box::new(crate::ValidationError {
                        problem: "contains `ycbcr_image_arrays`".into(),
                        requires_one_of: RequiresOneOf(
                            &[
                                RequiresAllOf(
                                    &[Requires::DeviceExtension("ext_ycbcr_image_arrays")],
                                ),
                            ],
                        ),
                        ..Default::default()
                    }),
                );
            }
        }
        Ok(())
    }
    pub(crate) fn enable_dependencies(
        &self,
        api_version: Version,
        device_extensions: &DeviceExtensions,
    ) -> Self {
        let mut enabled = *self;
        if api_version >= Version::V1_1 && device_extensions.khr_shader_draw_parameters {
            enabled.shader_draw_parameters = true;
        }
        if api_version >= Version::V1_2 && device_extensions.khr_draw_indirect_count {
            enabled.draw_indirect_count = true;
        }
        if api_version >= Version::V1_2
            && device_extensions.khr_sampler_mirror_clamp_to_edge
        {
            enabled.sampler_mirror_clamp_to_edge = true;
        }
        if api_version >= Version::V1_2 && device_extensions.ext_descriptor_indexing {
            enabled.descriptor_indexing = true;
        }
        if api_version >= Version::V1_2 && device_extensions.ext_sampler_filter_minmax {
            enabled.sampler_filter_minmax = true;
        }
        if api_version >= Version::V1_2
            && device_extensions.ext_shader_viewport_index_layer
        {
            enabled.shader_output_viewport_index = true;
            enabled.shader_output_layer = true;
        }
        if self.multiview_geometry_shader {
            enabled.multiview = true;
        }
        if self.multiview_mesh_shader {
            enabled.multiview = true;
        }
        if self.multiview_tessellation_shader {
            enabled.multiview = true;
        }
        if self.primitive_fragment_shading_rate_mesh_shader {
            enabled.primitive_fragment_shading_rate = true;
        }
        if self.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed {
            enabled.ray_tracing_pipeline_shader_group_handle_capture_replay = true;
        }
        if self.robust_buffer_access2 {
            enabled.robust_buffer_access = true;
        }
        if self.sparse_image_float32_atomic_add {
            enabled.shader_image_float32_atomic_add = true;
        }
        if self.sparse_image_float32_atomic_min_max {
            enabled.shader_image_float32_atomic_min_max = true;
        }
        if self.sparse_image_float32_atomics {
            enabled.shader_image_float32_atomics = true;
        }
        if self.sparse_image_int64_atomics {
            enabled.shader_image_int64_atomics = true;
        }
        if self.variable_pointers {
            enabled.variable_pointers_storage_buffer = true;
        }
        enabled
    }
    pub(crate) fn to_mut_vk() -> vk::PhysicalDeviceFeatures {
        vk::PhysicalDeviceFeatures::default()
    }
    pub(crate) fn from_vk(val_vk: &vk::PhysicalDeviceFeatures) -> Self {
        let &vk::PhysicalDeviceFeatures {
            robust_buffer_access,
            full_draw_index_uint32,
            image_cube_array,
            independent_blend,
            geometry_shader,
            tessellation_shader,
            sample_rate_shading,
            dual_src_blend,
            logic_op,
            multi_draw_indirect,
            draw_indirect_first_instance,
            depth_clamp,
            depth_bias_clamp,
            fill_mode_non_solid,
            depth_bounds,
            wide_lines,
            large_points,
            alpha_to_one,
            multi_viewport,
            sampler_anisotropy,
            texture_compression_etc2,
            texture_compression_astc_ldr,
            texture_compression_bc,
            occlusion_query_precise,
            pipeline_statistics_query,
            vertex_pipeline_stores_and_atomics,
            fragment_stores_and_atomics,
            shader_tessellation_and_geometry_point_size,
            shader_image_gather_extended,
            shader_storage_image_extended_formats,
            shader_storage_image_multisample,
            shader_storage_image_read_without_format,
            shader_storage_image_write_without_format,
            shader_uniform_buffer_array_dynamic_indexing,
            shader_sampled_image_array_dynamic_indexing,
            shader_storage_buffer_array_dynamic_indexing,
            shader_storage_image_array_dynamic_indexing,
            shader_clip_distance,
            shader_cull_distance,
            shader_float64,
            shader_int64,
            shader_int16,
            shader_resource_residency,
            shader_resource_min_lod,
            sparse_binding,
            sparse_residency_buffer,
            sparse_residency_image2_d,
            sparse_residency_image3_d,
            sparse_residency2_samples,
            sparse_residency4_samples,
            sparse_residency8_samples,
            sparse_residency16_samples,
            sparse_residency_aliased,
            variable_multisample_rate,
            inherited_queries,
            ..
        } = val_vk;
        Self {
            acceleration_structure: false,
            acceleration_structure_capture_replay: false,
            acceleration_structure_host_commands: false,
            acceleration_structure_indirect_build: false,
            advanced_blend_coherent_operations: false,
            alpha_to_one: alpha_to_one != 0,
            amigo_profiling: false,
            attachment_feedback_loop_dynamic_state: false,
            attachment_feedback_loop_layout: false,
            attachment_fragment_shading_rate: false,
            border_color_swizzle: false,
            border_color_swizzle_from_image: false,
            bresenham_lines: false,
            buffer_device_address: false,
            buffer_device_address_capture_replay: false,
            buffer_device_address_multi_device: false,
            clusterculling_shader: false,
            color_write_enable: false,
            compute_derivative_group_linear: false,
            compute_derivative_group_quads: false,
            compute_full_subgroups: false,
            conditional_rendering: false,
            constant_alpha_color_blend_factors: false,
            cooperative_matrix: false,
            cooperative_matrix_robust_buffer_access: false,
            corner_sampled_image: false,
            coverage_reduction_mode: false,
            cubic_range_clamp: false,
            cuda_kernel_launch_features: false,
            custom_border_color_without_format: false,
            custom_border_colors: false,
            decode_mode_shared_exponent: false,
            dedicated_allocation_image_aliasing: false,
            depth_bias_clamp: depth_bias_clamp != 0,
            depth_bias_control: false,
            depth_bias_exact: false,
            depth_bounds: depth_bounds != 0,
            depth_clamp: depth_clamp != 0,
            depth_clamp_zero_one: false,
            depth_clip_control: false,
            depth_clip_enable: false,
            descriptor_binding_acceleration_structure_update_after_bind: false,
            descriptor_binding_inline_uniform_block_update_after_bind: false,
            descriptor_binding_partially_bound: false,
            descriptor_binding_sampled_image_update_after_bind: false,
            descriptor_binding_storage_buffer_update_after_bind: false,
            descriptor_binding_storage_image_update_after_bind: false,
            descriptor_binding_storage_texel_buffer_update_after_bind: false,
            descriptor_binding_uniform_buffer_update_after_bind: false,
            descriptor_binding_uniform_texel_buffer_update_after_bind: false,
            descriptor_binding_update_unused_while_pending: false,
            descriptor_binding_variable_descriptor_count: false,
            descriptor_buffer: false,
            descriptor_buffer_capture_replay: false,
            descriptor_buffer_image_layout_ignored: false,
            descriptor_buffer_push_descriptors: false,
            descriptor_indexing: false,
            descriptor_pool_overallocation: false,
            descriptor_set_host_mapping: false,
            device_coherent_memory: false,
            device_fault: false,
            device_fault_vendor_binary: false,
            device_generated_commands: false,
            device_generated_compute: false,
            device_generated_compute_capture_replay: false,
            device_generated_compute_pipelines: false,
            device_memory_report: false,
            diagnostics_config: false,
            displacement_micromap: false,
            draw_indirect_count: false,
            draw_indirect_first_instance: draw_indirect_first_instance != 0,
            dual_src_blend: dual_src_blend != 0,
            dynamic_pipeline_layout: false,
            dynamic_rendering: false,
            dynamic_rendering_local_read: false,
            dynamic_rendering_unused_attachments: false,
            events: false,
            exclusive_scissor: false,
            extended_dynamic_state: false,
            extended_dynamic_state2: false,
            extended_dynamic_state2_logic_op: false,
            extended_dynamic_state2_patch_control_points: false,
            extended_dynamic_state3_alpha_to_coverage_enable: false,
            extended_dynamic_state3_alpha_to_one_enable: false,
            extended_dynamic_state3_color_blend_advanced: false,
            extended_dynamic_state3_color_blend_enable: false,
            extended_dynamic_state3_color_blend_equation: false,
            extended_dynamic_state3_color_write_mask: false,
            extended_dynamic_state3_conservative_rasterization_mode: false,
            extended_dynamic_state3_coverage_modulation_mode: false,
            extended_dynamic_state3_coverage_modulation_table: false,
            extended_dynamic_state3_coverage_modulation_table_enable: false,
            extended_dynamic_state3_coverage_reduction_mode: false,
            extended_dynamic_state3_coverage_to_color_enable: false,
            extended_dynamic_state3_coverage_to_color_location: false,
            extended_dynamic_state3_depth_clamp_enable: false,
            extended_dynamic_state3_depth_clip_enable: false,
            extended_dynamic_state3_depth_clip_negative_one_to_one: false,
            extended_dynamic_state3_extra_primitive_overestimation_size: false,
            extended_dynamic_state3_line_rasterization_mode: false,
            extended_dynamic_state3_line_stipple_enable: false,
            extended_dynamic_state3_logic_op_enable: false,
            extended_dynamic_state3_polygon_mode: false,
            extended_dynamic_state3_provoking_vertex_mode: false,
            extended_dynamic_state3_rasterization_samples: false,
            extended_dynamic_state3_rasterization_stream: false,
            extended_dynamic_state3_representative_fragment_test_enable: false,
            extended_dynamic_state3_sample_locations_enable: false,
            extended_dynamic_state3_sample_mask: false,
            extended_dynamic_state3_shading_rate_image_enable: false,
            extended_dynamic_state3_tessellation_domain_origin: false,
            extended_dynamic_state3_viewport_swizzle: false,
            extended_dynamic_state3_viewport_w_scaling_enable: false,
            extended_sparse_address_space: false,
            external_format_resolve: false,
            external_memory_rdma: false,
            fill_mode_non_solid: fill_mode_non_solid != 0,
            float_representation: false,
            format_a4b4g4r4: false,
            format_a4r4g4b4: false,
            format_rgba10x6_without_y_cb_cr_sampler: false,
            fragment_density_map: false,
            fragment_density_map_deferred: false,
            fragment_density_map_dynamic: false,
            fragment_density_map_non_subsampled_images: false,
            fragment_density_map_offset: false,
            fragment_shader_barycentric: false,
            fragment_shader_pixel_interlock: false,
            fragment_shader_sample_interlock: false,
            fragment_shader_shading_rate_interlock: false,
            fragment_shading_rate_enums: false,
            fragment_stores_and_atomics: fragment_stores_and_atomics != 0,
            frame_boundary: false,
            full_draw_index_uint32: full_draw_index_uint32 != 0,
            geometry_shader: geometry_shader != 0,
            geometry_streams: false,
            global_priority_query: false,
            graphics_pipeline_library: false,
            host_image_copy: false,
            host_query_reset: false,
            image2_d_view_of3_d: false,
            image_compression_control: false,
            image_compression_control_swapchain: false,
            image_cube_array: image_cube_array != 0,
            image_footprint: false,
            image_sliced_view_of3_d: false,
            image_view2_d_on3_d_image: false,
            image_view_format_reinterpretation: false,
            image_view_format_swizzle: false,
            imageless_framebuffer: false,
            independent_blend: independent_blend != 0,
            index_type_uint8: false,
            indirect_copy: false,
            inherited_conditional_rendering: false,
            inherited_queries: inherited_queries != 0,
            inherited_viewport_scissor2_d: false,
            inline_uniform_block: false,
            invocation_mask: false,
            large_points: large_points != 0,
            least_representable_value_force_unorm_representation: false,
            legacy_dithering: false,
            linear_color_attachment: false,
            logic_op: logic_op != 0,
            maintenance4: false,
            maintenance5: false,
            maintenance6: false,
            memory_decompression: false,
            memory_map_placed: false,
            memory_map_range_placed: false,
            memory_priority: false,
            memory_unmap_reserve: false,
            mesh_shader: false,
            mesh_shader_queries: false,
            micromap: false,
            micromap_capture_replay: false,
            micromap_host_commands: false,
            min_lod: false,
            multi_draw: false,
            multi_draw_indirect: multi_draw_indirect != 0,
            multi_viewport: multi_viewport != 0,
            multisample_array_image: false,
            multisampled_render_to_single_sampled: false,
            multiview: false,
            multiview_cluster_culling_shader: false,
            multiview_geometry_shader: false,
            multiview_mesh_shader: false,
            multiview_per_view_render_areas: false,
            multiview_per_view_viewports: false,
            multiview_tessellation_shader: false,
            mutable_comparison_samplers: false,
            mutable_descriptor_type: false,
            nested_command_buffer: false,
            nested_command_buffer_rendering: false,
            nested_command_buffer_simultaneous_use: false,
            no_invocation_fragment_shading_rates: false,
            non_seamless_cube_map: false,
            null_descriptor: false,
            occlusion_query_precise: occlusion_query_precise != 0,
            optical_flow: false,
            pageable_device_local_memory: false,
            per_stage_descriptor_set: false,
            performance_counter_multiple_query_pools: false,
            performance_counter_query_pools: false,
            pipeline_creation_cache_control: false,
            pipeline_executable_info: false,
            pipeline_fragment_shading_rate: false,
            pipeline_library_group_handles: false,
            pipeline_properties_identifier: false,
            pipeline_protected_access: false,
            pipeline_robustness: false,
            pipeline_statistics_query: pipeline_statistics_query != 0,
            point_polygons: false,
            present_barrier: false,
            present_id: false,
            present_wait: false,
            primitive_fragment_shading_rate: false,
            primitive_fragment_shading_rate_mesh_shader: false,
            primitive_topology_list_restart: false,
            primitive_topology_patch_list_restart: false,
            primitives_generated_query: false,
            primitives_generated_query_with_non_zero_streams: false,
            primitives_generated_query_with_rasterizer_discard: false,
            private_data: false,
            protected_memory: false,
            provoking_vertex_last: false,
            rasterization_order_color_attachment_access: false,
            rasterization_order_depth_attachment_access: false,
            rasterization_order_stencil_attachment_access: false,
            ray_query: false,
            ray_tracing_invocation_reorder: false,
            ray_tracing_maintenance1: false,
            ray_tracing_motion_blur: false,
            ray_tracing_motion_blur_pipeline_trace_rays_indirect: false,
            ray_tracing_pipeline: false,
            ray_tracing_pipeline_shader_group_handle_capture_replay: false,
            ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: false,
            ray_tracing_pipeline_trace_rays_indirect: false,
            ray_tracing_pipeline_trace_rays_indirect2: false,
            ray_tracing_position_fetch: false,
            ray_tracing_validation: false,
            ray_traversal_primitive_culling: false,
            rectangular_lines: false,
            relaxed_line_rasterization: false,
            render_pass_striped: false,
            report_address_binding: false,
            representative_fragment_test: false,
            robust_buffer_access: robust_buffer_access != 0,
            robust_buffer_access2: false,
            robust_image_access: false,
            robust_image_access2: false,
            runtime_descriptor_array: false,
            sample_rate_shading: sample_rate_shading != 0,
            sampler2_d_view_of3_d: false,
            sampler_anisotropy: sampler_anisotropy != 0,
            sampler_filter_minmax: false,
            sampler_mip_lod_bias: false,
            sampler_mirror_clamp_to_edge: false,
            sampler_ycbcr_conversion: false,
            scalar_block_layout: false,
            scheduling_controls: false,
            screen_buffer_import: false,
            selectable_cubic_weights: false,
            separate_depth_stencil_layouts: false,
            separate_stencil_mask_ref: false,
            shader_buffer_float16_atomic_add: false,
            shader_buffer_float16_atomic_min_max: false,
            shader_buffer_float16_atomics: false,
            shader_buffer_float32_atomic_add: false,
            shader_buffer_float32_atomic_min_max: false,
            shader_buffer_float32_atomics: false,
            shader_buffer_float64_atomic_add: false,
            shader_buffer_float64_atomic_min_max: false,
            shader_buffer_float64_atomics: false,
            shader_buffer_int64_atomics: false,
            shader_clip_distance: shader_clip_distance != 0,
            shader_core_builtins: false,
            shader_cull_distance: shader_cull_distance != 0,
            shader_demote_to_helper_invocation: false,
            shader_device_clock: false,
            shader_draw_parameters: false,
            shader_early_and_late_fragment_tests: false,
            shader_enqueue: false,
            shader_expect_assume: false,
            shader_float16: false,
            shader_float16_vector_atomics: false,
            shader_float64: shader_float64 != 0,
            shader_float_controls2: false,
            shader_image_float32_atomic_add: false,
            shader_image_float32_atomic_min_max: false,
            shader_image_float32_atomics: false,
            shader_image_gather_extended: shader_image_gather_extended != 0,
            shader_image_int64_atomics: false,
            shader_input_attachment_array_dynamic_indexing: false,
            shader_input_attachment_array_non_uniform_indexing: false,
            shader_int16: shader_int16 != 0,
            shader_int64: shader_int64 != 0,
            shader_int8: false,
            shader_integer_dot_product: false,
            shader_integer_functions2: false,
            shader_maximal_reconvergence: false,
            shader_module_identifier: false,
            shader_object: false,
            shader_output_layer: false,
            shader_output_viewport_index: false,
            shader_quad_control: false,
            shader_raw_access_chains: false,
            shader_resource_min_lod: shader_resource_min_lod != 0,
            shader_resource_residency: shader_resource_residency != 0,
            shader_sample_rate_interpolation_functions: false,
            shader_sampled_image_array_dynamic_indexing: shader_sampled_image_array_dynamic_indexing
                != 0,
            shader_sampled_image_array_non_uniform_indexing: false,
            shader_shared_float16_atomic_add: false,
            shader_shared_float16_atomic_min_max: false,
            shader_shared_float16_atomics: false,
            shader_shared_float32_atomic_add: false,
            shader_shared_float32_atomic_min_max: false,
            shader_shared_float32_atomics: false,
            shader_shared_float64_atomic_add: false,
            shader_shared_float64_atomic_min_max: false,
            shader_shared_float64_atomics: false,
            shader_shared_int64_atomics: false,
            shader_sm_builtins: false,
            shader_storage_buffer_array_dynamic_indexing: shader_storage_buffer_array_dynamic_indexing
                != 0,
            shader_storage_buffer_array_non_uniform_indexing: false,
            shader_storage_image_array_dynamic_indexing: shader_storage_image_array_dynamic_indexing
                != 0,
            shader_storage_image_array_non_uniform_indexing: false,
            shader_storage_image_extended_formats: shader_storage_image_extended_formats
                != 0,
            shader_storage_image_multisample: shader_storage_image_multisample != 0,
            shader_storage_image_read_without_format: shader_storage_image_read_without_format
                != 0,
            shader_storage_image_write_without_format: shader_storage_image_write_without_format
                != 0,
            shader_storage_texel_buffer_array_dynamic_indexing: false,
            shader_storage_texel_buffer_array_non_uniform_indexing: false,
            shader_subgroup_clock: false,
            shader_subgroup_extended_types: false,
            shader_subgroup_rotate: false,
            shader_subgroup_rotate_clustered: false,
            shader_subgroup_uniform_control_flow: false,
            shader_terminate_invocation: false,
            shader_tessellation_and_geometry_point_size: shader_tessellation_and_geometry_point_size
                != 0,
            shader_tile_image_color_read_access: false,
            shader_tile_image_depth_read_access: false,
            shader_tile_image_stencil_read_access: false,
            shader_uniform_buffer_array_dynamic_indexing: shader_uniform_buffer_array_dynamic_indexing
                != 0,
            shader_uniform_buffer_array_non_uniform_indexing: false,
            shader_uniform_texel_buffer_array_dynamic_indexing: false,
            shader_uniform_texel_buffer_array_non_uniform_indexing: false,
            shader_zero_initialize_workgroup_memory: false,
            shading_rate_coarse_sample_order: false,
            shading_rate_image: false,
            smooth_lines: false,
            sparse_binding: sparse_binding != 0,
            sparse_image_float32_atomic_add: false,
            sparse_image_float32_atomic_min_max: false,
            sparse_image_float32_atomics: false,
            sparse_image_int64_atomics: false,
            sparse_residency16_samples: sparse_residency16_samples != 0,
            sparse_residency2_samples: sparse_residency2_samples != 0,
            sparse_residency4_samples: sparse_residency4_samples != 0,
            sparse_residency8_samples: sparse_residency8_samples != 0,
            sparse_residency_aliased: sparse_residency_aliased != 0,
            sparse_residency_buffer: sparse_residency_buffer != 0,
            sparse_residency_image2_d: sparse_residency_image2_d != 0,
            sparse_residency_image3_d: sparse_residency_image3_d != 0,
            stippled_bresenham_lines: false,
            stippled_rectangular_lines: false,
            stippled_smooth_lines: false,
            storage_buffer16_bit_access: false,
            storage_buffer8_bit_access: false,
            storage_input_output16: false,
            storage_push_constant16: false,
            storage_push_constant8: false,
            subgroup_broadcast_dynamic_id: false,
            subgroup_size_control: false,
            subpass_merge_feedback: false,
            subpass_shading: false,
            supersample_fragment_shading_rates: false,
            swapchain_maintenance1: false,
            synchronization2: false,
            task_shader: false,
            tessellation_isolines: false,
            tessellation_point_mode: false,
            tessellation_shader: tessellation_shader != 0,
            texel_buffer_alignment: false,
            texture_block_match: false,
            texture_block_match2: false,
            texture_box_filter: false,
            texture_compression_astc_hdr: false,
            texture_compression_astc_ldr: texture_compression_astc_ldr != 0,
            texture_compression_bc: texture_compression_bc != 0,
            texture_compression_etc2: texture_compression_etc2 != 0,
            texture_sample_weighted: false,
            tile_properties: false,
            timeline_semaphore: false,
            transform_feedback: false,
            transform_feedback_preserves_provoking_vertex: false,
            triangle_fans: false,
            uniform_and_storage_buffer16_bit_access: false,
            uniform_and_storage_buffer8_bit_access: false,
            uniform_buffer_standard_layout: false,
            variable_multisample_rate: variable_multisample_rate != 0,
            variable_pointers: false,
            variable_pointers_storage_buffer: false,
            vertex_attribute_access_beyond_stride: false,
            vertex_attribute_instance_rate_divisor: false,
            vertex_attribute_instance_rate_zero_divisor: false,
            vertex_input_dynamic_state: false,
            vertex_pipeline_stores_and_atomics: vertex_pipeline_stores_and_atomics != 0,
            video_maintenance1: false,
            vulkan_memory_model: false,
            vulkan_memory_model_availability_visibility_chains: false,
            vulkan_memory_model_device_scope: false,
            wide_lines: wide_lines != 0,
            workgroup_memory_explicit_layout: false,
            workgroup_memory_explicit_layout16_bit_access: false,
            workgroup_memory_explicit_layout8_bit_access: false,
            workgroup_memory_explicit_layout_scalar_block_layout: false,
            ycbcr2plane444_formats: false,
            ycbcr_degamma: false,
            ycbcr_image_arrays: false,
            _ne: crate::NE,
        }
    }
    #[allow(clippy::wrong_self_convention)]
    pub(crate) fn to_vk(&self) -> vk::PhysicalDeviceFeatures {
        vk::PhysicalDeviceFeatures::default()
            .alpha_to_one(self.alpha_to_one)
            .depth_bias_clamp(self.depth_bias_clamp)
            .depth_bounds(self.depth_bounds)
            .depth_clamp(self.depth_clamp)
            .draw_indirect_first_instance(self.draw_indirect_first_instance)
            .dual_src_blend(self.dual_src_blend)
            .fill_mode_non_solid(self.fill_mode_non_solid)
            .fragment_stores_and_atomics(self.fragment_stores_and_atomics)
            .full_draw_index_uint32(self.full_draw_index_uint32)
            .geometry_shader(self.geometry_shader)
            .image_cube_array(self.image_cube_array)
            .independent_blend(self.independent_blend)
            .inherited_queries(self.inherited_queries)
            .large_points(self.large_points)
            .logic_op(self.logic_op)
            .multi_draw_indirect(self.multi_draw_indirect)
            .multi_viewport(self.multi_viewport)
            .occlusion_query_precise(self.occlusion_query_precise)
            .pipeline_statistics_query(self.pipeline_statistics_query)
            .robust_buffer_access(self.robust_buffer_access)
            .sample_rate_shading(self.sample_rate_shading)
            .sampler_anisotropy(self.sampler_anisotropy)
            .shader_clip_distance(self.shader_clip_distance)
            .shader_cull_distance(self.shader_cull_distance)
            .shader_float64(self.shader_float64)
            .shader_image_gather_extended(self.shader_image_gather_extended)
            .shader_int16(self.shader_int16)
            .shader_int64(self.shader_int64)
            .shader_resource_min_lod(self.shader_resource_min_lod)
            .shader_resource_residency(self.shader_resource_residency)
            .shader_sampled_image_array_dynamic_indexing(
                self.shader_sampled_image_array_dynamic_indexing,
            )
            .shader_storage_buffer_array_dynamic_indexing(
                self.shader_storage_buffer_array_dynamic_indexing,
            )
            .shader_storage_image_array_dynamic_indexing(
                self.shader_storage_image_array_dynamic_indexing,
            )
            .shader_storage_image_extended_formats(
                self.shader_storage_image_extended_formats,
            )
            .shader_storage_image_multisample(self.shader_storage_image_multisample)
            .shader_storage_image_read_without_format(
                self.shader_storage_image_read_without_format,
            )
            .shader_storage_image_write_without_format(
                self.shader_storage_image_write_without_format,
            )
            .shader_tessellation_and_geometry_point_size(
                self.shader_tessellation_and_geometry_point_size,
            )
            .shader_uniform_buffer_array_dynamic_indexing(
                self.shader_uniform_buffer_array_dynamic_indexing,
            )
            .sparse_binding(self.sparse_binding)
            .sparse_residency16_samples(self.sparse_residency16_samples)
            .sparse_residency2_samples(self.sparse_residency2_samples)
            .sparse_residency4_samples(self.sparse_residency4_samples)
            .sparse_residency8_samples(self.sparse_residency8_samples)
            .sparse_residency_aliased(self.sparse_residency_aliased)
            .sparse_residency_buffer(self.sparse_residency_buffer)
            .sparse_residency_image2_d(self.sparse_residency_image2_d)
            .sparse_residency_image3_d(self.sparse_residency_image3_d)
            .tessellation_shader(self.tessellation_shader)
            .texture_compression_astc_ldr(self.texture_compression_astc_ldr)
            .texture_compression_bc(self.texture_compression_bc)
            .texture_compression_etc2(self.texture_compression_etc2)
            .variable_multisample_rate(self.variable_multisample_rate)
            .vertex_pipeline_stores_and_atomics(self.vertex_pipeline_stores_and_atomics)
            .wide_lines(self.wide_lines)
    }
    pub(crate) fn to_mut_vk2(
        extensions_vk: &mut PhysicalDeviceFeatures2ExtensionsVk,
    ) -> vk::PhysicalDeviceFeatures2<'_> {
        let mut val_vk = vk::PhysicalDeviceFeatures2::default();
        if let Some(next) = &mut extensions_vk.features_vulkan11_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan12_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan13_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_16bit_storage_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_multiview_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_protected_memory_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_sampler_ycbcr_conversion_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_draw_parameters_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_variable_pointers_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_8bit_storage_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_buffer_device_address_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_descriptor_indexing_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_host_query_reset_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_imageless_framebuffer_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_scalar_block_layout_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_separate_depth_stencil_layouts_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_int64_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_float16_int8_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_subgroup_extended_types_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_timeline_semaphore_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_uniform_buffer_standard_layout_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan_memory_model_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_dynamic_rendering_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_robustness_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_inline_uniform_block_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance4_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_creation_cache_control_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_private_data_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_demote_to_helper_invocation_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_integer_dot_product_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_terminate_invocation_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subgroup_size_control_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_synchronization2_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_texture_compression_astchdr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_zero_initialize_workgroup_memory_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_acceleration_structure_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cooperative_matrix_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dynamic_rendering_local_read_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_fragment_shader_barycentric_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shading_rate_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_global_priority_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_index_type_uint8_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_line_rasterization_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance5_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance6_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_performance_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_executable_properties_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_portability_subset_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_id_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_wait_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_maintenance1_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_pipeline_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_position_fetch_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_clock_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_expect_assume_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_float_controls2_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_maximal_reconvergence_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_quad_control_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_subgroup_rotate_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_subgroup_uniform_control_flow_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vertex_attribute_divisor_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_video_maintenance1_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_workgroup_memory_explicit_layout_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_4444formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_astc_decode_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_address_binding_report_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_attachment_feedback_loop_dynamic_state_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_attachment_feedback_loop_layout_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_blend_operation_advanced_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_border_color_swizzle_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_buffer_device_address_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_color_write_enable_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_conditional_rendering_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_custom_border_color_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_bias_control_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clamp_zero_one_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clip_control_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clip_enable_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_descriptor_buffer_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_device_memory_report_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dynamic_rendering_unused_attachments_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state3_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fault_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_density_map2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_density_map_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shader_interlock_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_frame_boundary_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_graphics_pipeline_library_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_host_image_copy_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image2_d_view_of3_d_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_compression_control_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_image_compression_control_swapchain_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_sliced_view_of3_d_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_view_min_lod_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_legacy_dithering_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_map_memory_placed_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_memory_priority_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mesh_shader_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_multi_draw_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multisampled_render_to_single_sampled_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mutable_descriptor_type_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_nested_command_buffer_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_non_seamless_cube_map_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_opacity_micromap_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pageable_device_local_memory_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_library_group_handles_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_protected_access_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_robustness_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_primitive_topology_list_restart_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_primitives_generated_query_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_provoking_vertex_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_rgba10x6_formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_rasterization_order_attachment_access_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_robustness2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_float2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_float_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_image_atomic_int64_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_module_identifier_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_object_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_tile_image_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subpass_merge_feedback_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_swapchain_maintenance1_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_texel_buffer_alignment_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_transform_feedback_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vertex_input_dynamic_state_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr2_plane444_formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr_image_arrays_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_amigo_profiling_sec_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cluster_culling_shader_huawei_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_coherent_memory_amd_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_compute_shader_derivatives_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cooperative_matrix_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_copy_memory_indirect_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_corner_sampled_image_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_coverage_reduction_mode_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cubic_clamp_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cubic_weights_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cuda_kernel_launch_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dedicated_allocation_image_aliasing_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_descriptor_pool_overallocation_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_descriptor_set_host_mapping_valve_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_device_generated_commands_compute_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_device_generated_commands_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_diagnostics_config_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_displacement_micromap_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_exclusive_scissor_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_extended_sparse_address_space_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_external_format_resolve_android_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_external_memory_rdma_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_external_memory_screen_buffer_qnx_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_fragment_density_map_offset_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shading_rate_enums_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_processing2_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_processing_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_inherited_viewport_scissor_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_invocation_mask_huawei_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_linear_color_attachment_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_memory_decompression_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mesh_shader_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multiview_per_view_render_areas_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multiview_per_view_viewports_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_optical_flow_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_per_stage_descriptor_set_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_barrier_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_raw_access_chains_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_ray_tracing_invocation_reorder_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_motion_blur_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_validation_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_relaxed_line_rasterization_img_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_render_pass_striped_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_representative_fragment_test_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_scheduling_controls_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_atomic_float16_vector_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_core_builtins_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_early_and_late_fragment_tests_amd_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_enqueue_amdx_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_image_footprint_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_integer_functions2_intel_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_sm_builtins_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shading_rate_image_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subpass_shading_huawei_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_tile_properties_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr_degamma_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        val_vk
    }
    pub(crate) fn to_mut_vk2_extensions(
        api_version: Version,
        device_extensions: &DeviceExtensions,
        #[allow(unused)]
        instance_extensions: &InstanceExtensions,
    ) -> PhysicalDeviceFeatures2ExtensionsVk {
        PhysicalDeviceFeatures2ExtensionsVk {
            features_vulkan11_vk: (api_version >= Version::V1_2)
                .then(<vk::PhysicalDeviceVulkan11Features<'_>>::default),
            features_vulkan12_vk: (api_version >= Version::V1_2)
                .then(<vk::PhysicalDeviceVulkan12Features<'_>>::default),
            features_vulkan13_vk: (api_version >= Version::V1_3)
                .then(<vk::PhysicalDeviceVulkan13Features<'_>>::default),
            features_16bit_storage_vk: (api_version >= Version::V1_1
                || device_extensions.khr_16bit_storage)
                .then(<vk::PhysicalDevice16BitStorageFeatures<'_>>::default),
            features_multiview_vk: (api_version >= Version::V1_1
                || device_extensions.khr_multiview)
                .then(<vk::PhysicalDeviceMultiviewFeatures<'_>>::default),
            features_protected_memory_vk: (api_version >= Version::V1_1)
                .then(<vk::PhysicalDeviceProtectedMemoryFeatures<'_>>::default),
            features_sampler_ycbcr_conversion_vk: (api_version >= Version::V1_1
                || device_extensions.khr_sampler_ycbcr_conversion)
                .then(<vk::PhysicalDeviceSamplerYcbcrConversionFeatures<'_>>::default),
            features_shader_draw_parameters_vk: (api_version >= Version::V1_1)
                .then(<vk::PhysicalDeviceShaderDrawParametersFeatures<'_>>::default),
            features_variable_pointers_vk: (api_version >= Version::V1_1
                || device_extensions.khr_variable_pointers)
                .then(<vk::PhysicalDeviceVariablePointersFeatures<'_>>::default),
            features_8bit_storage_vk: (api_version >= Version::V1_2
                || device_extensions.khr_8bit_storage)
                .then(<vk::PhysicalDevice8BitStorageFeatures<'_>>::default),
            features_buffer_device_address_vk: (api_version >= Version::V1_2
                || device_extensions.khr_buffer_device_address)
                .then(<vk::PhysicalDeviceBufferDeviceAddressFeatures<'_>>::default),
            features_descriptor_indexing_vk: (api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
                .then(<vk::PhysicalDeviceDescriptorIndexingFeatures<'_>>::default),
            features_host_query_reset_vk: (api_version >= Version::V1_2
                || device_extensions.ext_host_query_reset)
                .then(<vk::PhysicalDeviceHostQueryResetFeatures<'_>>::default),
            features_imageless_framebuffer_vk: (api_version >= Version::V1_2
                || device_extensions.khr_imageless_framebuffer)
                .then(<vk::PhysicalDeviceImagelessFramebufferFeatures<'_>>::default),
            features_scalar_block_layout_vk: (api_version >= Version::V1_2
                || device_extensions.ext_scalar_block_layout)
                .then(<vk::PhysicalDeviceScalarBlockLayoutFeatures<'_>>::default),
            features_separate_depth_stencil_layouts_vk: (api_version >= Version::V1_2
                || device_extensions.khr_separate_depth_stencil_layouts)
                .then(
                    <vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures<'_>>::default,
                ),
            features_shader_atomic_int64_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_atomic_int64)
                .then(<vk::PhysicalDeviceShaderAtomicInt64Features<'_>>::default),
            features_shader_float16_int8_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_float16_int8)
                .then(<vk::PhysicalDeviceShaderFloat16Int8Features<'_>>::default),
            features_shader_subgroup_extended_types_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_subgroup_extended_types)
                .then(
                    <vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures<'_>>::default,
                ),
            features_timeline_semaphore_vk: (api_version >= Version::V1_2
                || device_extensions.khr_timeline_semaphore)
                .then(<vk::PhysicalDeviceTimelineSemaphoreFeatures<'_>>::default),
            features_uniform_buffer_standard_layout_vk: (api_version >= Version::V1_2
                || device_extensions.khr_uniform_buffer_standard_layout)
                .then(
                    <vk::PhysicalDeviceUniformBufferStandardLayoutFeatures<'_>>::default,
                ),
            features_vulkan_memory_model_vk: (api_version >= Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
                .then(<vk::PhysicalDeviceVulkanMemoryModelFeatures<'_>>::default),
            features_dynamic_rendering_vk: (api_version >= Version::V1_3
                || device_extensions.khr_dynamic_rendering)
                .then(<vk::PhysicalDeviceDynamicRenderingFeatures<'_>>::default),
            features_image_robustness_vk: (api_version >= Version::V1_3
                || device_extensions.ext_image_robustness)
                .then(<vk::PhysicalDeviceImageRobustnessFeatures<'_>>::default),
            features_inline_uniform_block_vk: (api_version >= Version::V1_3
                || device_extensions.ext_inline_uniform_block)
                .then(<vk::PhysicalDeviceInlineUniformBlockFeatures<'_>>::default),
            features_maintenance4_vk: (api_version >= Version::V1_3
                || device_extensions.khr_maintenance4)
                .then(<vk::PhysicalDeviceMaintenance4Features<'_>>::default),
            features_pipeline_creation_cache_control_vk: (api_version >= Version::V1_3
                || device_extensions.ext_pipeline_creation_cache_control)
                .then(
                    <vk::PhysicalDevicePipelineCreationCacheControlFeatures<'_>>::default,
                ),
            features_private_data_vk: (api_version >= Version::V1_3
                || device_extensions.ext_private_data)
                .then(<vk::PhysicalDevicePrivateDataFeatures<'_>>::default),
            features_shader_demote_to_helper_invocation_vk: (api_version >= Version::V1_3
                || device_extensions.ext_shader_demote_to_helper_invocation)
                .then(
                    <vk::PhysicalDeviceShaderDemoteToHelperInvocationFeatures<
                        '_,
                    >>::default,
                ),
            features_shader_integer_dot_product_vk: (api_version >= Version::V1_3
                || device_extensions.khr_shader_integer_dot_product)
                .then(<vk::PhysicalDeviceShaderIntegerDotProductFeatures<'_>>::default),
            features_shader_terminate_invocation_vk: (api_version >= Version::V1_3
                || device_extensions.khr_shader_terminate_invocation)
                .then(
                    <vk::PhysicalDeviceShaderTerminateInvocationFeatures<'_>>::default,
                ),
            features_subgroup_size_control_vk: (api_version >= Version::V1_3
                || device_extensions.ext_subgroup_size_control)
                .then(<vk::PhysicalDeviceSubgroupSizeControlFeatures<'_>>::default),
            features_synchronization2_vk: (api_version >= Version::V1_3
                || device_extensions.khr_synchronization2)
                .then(<vk::PhysicalDeviceSynchronization2Features<'_>>::default),
            features_texture_compression_astchdr_vk: (api_version >= Version::V1_3
                || device_extensions.ext_texture_compression_astc_hdr)
                .then(
                    <vk::PhysicalDeviceTextureCompressionASTCHDRFeatures<'_>>::default,
                ),
            features_zero_initialize_workgroup_memory_vk: (api_version >= Version::V1_3
                || device_extensions.khr_zero_initialize_workgroup_memory)
                .then(
                    <vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures<
                        '_,
                    >>::default,
                ),
            features_acceleration_structure_khr_vk: (device_extensions
                .khr_acceleration_structure)
                .then(<vk::PhysicalDeviceAccelerationStructureFeaturesKHR<'_>>::default),
            features_cooperative_matrix_khr_vk: (device_extensions
                .khr_cooperative_matrix)
                .then(<vk::PhysicalDeviceCooperativeMatrixFeaturesKHR<'_>>::default),
            features_dynamic_rendering_local_read_khr_vk: (device_extensions
                .khr_dynamic_rendering_local_read)
                .then(
                    <vk::PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR<'_>>::default,
                ),
            features_fragment_shader_barycentric_khr_vk: (device_extensions
                .khr_fragment_shader_barycentric
                || device_extensions.nv_fragment_shader_barycentric)
                .then(
                    <vk::PhysicalDeviceFragmentShaderBarycentricFeaturesKHR<'_>>::default,
                ),
            features_fragment_shading_rate_khr_vk: (device_extensions
                .khr_fragment_shading_rate)
                .then(<vk::PhysicalDeviceFragmentShadingRateFeaturesKHR<'_>>::default),
            features_global_priority_query_khr_vk: (device_extensions.khr_global_priority
                || device_extensions.ext_global_priority_query)
                .then(<vk::PhysicalDeviceGlobalPriorityQueryFeaturesKHR<'_>>::default),
            features_index_type_uint8_khr_vk: (device_extensions.khr_index_type_uint8
                || device_extensions.ext_index_type_uint8)
                .then(<vk::PhysicalDeviceIndexTypeUint8FeaturesKHR<'_>>::default),
            features_line_rasterization_khr_vk: (device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
                .then(<vk::PhysicalDeviceLineRasterizationFeaturesKHR<'_>>::default),
            features_maintenance5_khr_vk: (device_extensions.khr_maintenance5)
                .then(<vk::PhysicalDeviceMaintenance5FeaturesKHR<'_>>::default),
            features_maintenance6_khr_vk: (device_extensions.khr_maintenance6)
                .then(<vk::PhysicalDeviceMaintenance6FeaturesKHR<'_>>::default),
            features_performance_query_khr_vk: (device_extensions.khr_performance_query)
                .then(<vk::PhysicalDevicePerformanceQueryFeaturesKHR<'_>>::default),
            features_pipeline_executable_properties_khr_vk: (device_extensions
                .khr_pipeline_executable_properties)
                .then(
                    <vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR<
                        '_,
                    >>::default,
                ),
            features_portability_subset_khr_vk: (device_extensions
                .khr_portability_subset)
                .then(<vk::PhysicalDevicePortabilitySubsetFeaturesKHR<'_>>::default),
            features_present_id_khr_vk: (device_extensions.khr_present_id)
                .then(<vk::PhysicalDevicePresentIdFeaturesKHR<'_>>::default),
            features_present_wait_khr_vk: (device_extensions.khr_present_wait)
                .then(<vk::PhysicalDevicePresentWaitFeaturesKHR<'_>>::default),
            features_ray_query_khr_vk: (device_extensions.khr_ray_query)
                .then(<vk::PhysicalDeviceRayQueryFeaturesKHR<'_>>::default),
            features_ray_tracing_maintenance1_khr_vk: (device_extensions
                .khr_ray_tracing_maintenance1)
                .then(
                    <vk::PhysicalDeviceRayTracingMaintenance1FeaturesKHR<'_>>::default,
                ),
            features_ray_tracing_pipeline_khr_vk: (device_extensions
                .khr_ray_tracing_pipeline)
                .then(<vk::PhysicalDeviceRayTracingPipelineFeaturesKHR<'_>>::default),
            features_ray_tracing_position_fetch_khr_vk: (device_extensions
                .khr_ray_tracing_position_fetch)
                .then(
                    <vk::PhysicalDeviceRayTracingPositionFetchFeaturesKHR<'_>>::default,
                ),
            features_shader_clock_khr_vk: (device_extensions.khr_shader_clock)
                .then(<vk::PhysicalDeviceShaderClockFeaturesKHR<'_>>::default),
            features_shader_expect_assume_khr_vk: (device_extensions
                .khr_shader_expect_assume)
                .then(<vk::PhysicalDeviceShaderExpectAssumeFeaturesKHR<'_>>::default),
            features_shader_float_controls2_khr_vk: (device_extensions
                .khr_shader_float_controls2)
                .then(<vk::PhysicalDeviceShaderFloatControls2FeaturesKHR<'_>>::default),
            features_shader_maximal_reconvergence_khr_vk: (device_extensions
                .khr_shader_maximal_reconvergence)
                .then(
                    <vk::PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR<
                        '_,
                    >>::default,
                ),
            features_shader_quad_control_khr_vk: (device_extensions
                .khr_shader_quad_control)
                .then(<vk::PhysicalDeviceShaderQuadControlFeaturesKHR<'_>>::default),
            features_shader_subgroup_rotate_khr_vk: (device_extensions
                .khr_shader_subgroup_rotate)
                .then(<vk::PhysicalDeviceShaderSubgroupRotateFeaturesKHR<'_>>::default),
            features_shader_subgroup_uniform_control_flow_khr_vk: (device_extensions
                .khr_shader_subgroup_uniform_control_flow)
                .then(
                    <vk::PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR<
                        '_,
                    >>::default,
                ),
            features_vertex_attribute_divisor_khr_vk: (device_extensions
                .khr_vertex_attribute_divisor
                || device_extensions.ext_vertex_attribute_divisor)
                .then(
                    <vk::PhysicalDeviceVertexAttributeDivisorFeaturesKHR<'_>>::default,
                ),
            features_video_maintenance1_khr_vk: (device_extensions
                .khr_video_maintenance1)
                .then(<vk::PhysicalDeviceVideoMaintenance1FeaturesKHR<'_>>::default),
            features_workgroup_memory_explicit_layout_khr_vk: (device_extensions
                .khr_workgroup_memory_explicit_layout)
                .then(
                    <vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR<
                        '_,
                    >>::default,
                ),
            features_4444formats_ext_vk: (device_extensions.ext_4444_formats)
                .then(<vk::PhysicalDevice4444FormatsFeaturesEXT<'_>>::default),
            features_astc_decode_ext_vk: (device_extensions.ext_astc_decode_mode)
                .then(<vk::PhysicalDeviceASTCDecodeFeaturesEXT<'_>>::default),
            features_address_binding_report_ext_vk: (device_extensions
                .ext_device_address_binding_report)
                .then(<vk::PhysicalDeviceAddressBindingReportFeaturesEXT<'_>>::default),
            features_attachment_feedback_loop_dynamic_state_ext_vk: (device_extensions
                .ext_attachment_feedback_loop_dynamic_state)
                .then(
                    <vk::PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_attachment_feedback_loop_layout_ext_vk: (device_extensions
                .ext_attachment_feedback_loop_layout)
                .then(
                    <vk::PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_blend_operation_advanced_ext_vk: (device_extensions
                .ext_blend_operation_advanced)
                .then(
                    <vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT<'_>>::default,
                ),
            features_border_color_swizzle_ext_vk: (device_extensions
                .ext_border_color_swizzle)
                .then(<vk::PhysicalDeviceBorderColorSwizzleFeaturesEXT<'_>>::default),
            features_buffer_device_address_ext_vk: (device_extensions
                .ext_buffer_device_address)
                .then(<vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT<'_>>::default),
            features_color_write_enable_ext_vk: (device_extensions
                .ext_color_write_enable)
                .then(<vk::PhysicalDeviceColorWriteEnableFeaturesEXT<'_>>::default),
            features_conditional_rendering_ext_vk: (device_extensions
                .ext_conditional_rendering)
                .then(<vk::PhysicalDeviceConditionalRenderingFeaturesEXT<'_>>::default),
            features_custom_border_color_ext_vk: (device_extensions
                .ext_custom_border_color)
                .then(<vk::PhysicalDeviceCustomBorderColorFeaturesEXT<'_>>::default),
            features_depth_bias_control_ext_vk: (device_extensions
                .ext_depth_bias_control)
                .then(<vk::PhysicalDeviceDepthBiasControlFeaturesEXT<'_>>::default),
            features_depth_clamp_zero_one_ext_vk: (device_extensions
                .ext_depth_clamp_zero_one)
                .then(<vk::PhysicalDeviceDepthClampZeroOneFeaturesEXT<'_>>::default),
            features_depth_clip_control_ext_vk: (device_extensions
                .ext_depth_clip_control)
                .then(<vk::PhysicalDeviceDepthClipControlFeaturesEXT<'_>>::default),
            features_depth_clip_enable_ext_vk: (device_extensions.ext_depth_clip_enable)
                .then(<vk::PhysicalDeviceDepthClipEnableFeaturesEXT<'_>>::default),
            features_descriptor_buffer_ext_vk: (device_extensions.ext_descriptor_buffer)
                .then(<vk::PhysicalDeviceDescriptorBufferFeaturesEXT<'_>>::default),
            features_device_memory_report_ext_vk: (device_extensions
                .ext_device_memory_report)
                .then(<vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT<'_>>::default),
            features_dynamic_rendering_unused_attachments_ext_vk: (device_extensions
                .ext_dynamic_rendering_unused_attachments)
                .then(
                    <vk::PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_extended_dynamic_state2_ext_vk: (device_extensions
                .ext_extended_dynamic_state2)
                .then(<vk::PhysicalDeviceExtendedDynamicState2FeaturesEXT<'_>>::default),
            features_extended_dynamic_state3_ext_vk: (device_extensions
                .ext_extended_dynamic_state3)
                .then(<vk::PhysicalDeviceExtendedDynamicState3FeaturesEXT<'_>>::default),
            features_extended_dynamic_state_ext_vk: (device_extensions
                .ext_extended_dynamic_state)
                .then(<vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT<'_>>::default),
            features_fault_ext_vk: (device_extensions.ext_device_fault)
                .then(<vk::PhysicalDeviceFaultFeaturesEXT<'_>>::default),
            features_fragment_density_map2_ext_vk: (device_extensions
                .ext_fragment_density_map2)
                .then(<vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT<'_>>::default),
            features_fragment_density_map_ext_vk: (device_extensions
                .ext_fragment_density_map)
                .then(<vk::PhysicalDeviceFragmentDensityMapFeaturesEXT<'_>>::default),
            features_fragment_shader_interlock_ext_vk: (device_extensions
                .ext_fragment_shader_interlock)
                .then(
                    <vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT<'_>>::default,
                ),
            features_frame_boundary_ext_vk: (device_extensions.ext_frame_boundary)
                .then(<vk::PhysicalDeviceFrameBoundaryFeaturesEXT<'_>>::default),
            features_graphics_pipeline_library_ext_vk: (device_extensions
                .ext_graphics_pipeline_library)
                .then(
                    <vk::PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT<'_>>::default,
                ),
            features_host_image_copy_ext_vk: (device_extensions.ext_host_image_copy)
                .then(<vk::PhysicalDeviceHostImageCopyFeaturesEXT<'_>>::default),
            features_image2_d_view_of3_d_ext_vk: (device_extensions
                .ext_image_2d_view_of_3d)
                .then(<vk::PhysicalDeviceImage2DViewOf3DFeaturesEXT<'_>>::default),
            features_image_compression_control_ext_vk: (device_extensions
                .ext_image_compression_control)
                .then(
                    <vk::PhysicalDeviceImageCompressionControlFeaturesEXT<'_>>::default,
                ),
            features_image_compression_control_swapchain_ext_vk: (device_extensions
                .ext_image_compression_control_swapchain)
                .then(
                    <vk::PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_image_sliced_view_of3_d_ext_vk: (device_extensions
                .ext_image_sliced_view_of_3d)
                .then(<vk::PhysicalDeviceImageSlicedViewOf3DFeaturesEXT<'_>>::default),
            features_image_view_min_lod_ext_vk: (device_extensions
                .ext_image_view_min_lod)
                .then(<vk::PhysicalDeviceImageViewMinLodFeaturesEXT<'_>>::default),
            features_legacy_dithering_ext_vk: (device_extensions.ext_legacy_dithering)
                .then(<vk::PhysicalDeviceLegacyDitheringFeaturesEXT<'_>>::default),
            features_map_memory_placed_ext_vk: (device_extensions.ext_map_memory_placed)
                .then(<vk::PhysicalDeviceMapMemoryPlacedFeaturesEXT<'_>>::default),
            features_memory_priority_ext_vk: (device_extensions.ext_memory_priority)
                .then(<vk::PhysicalDeviceMemoryPriorityFeaturesEXT<'_>>::default),
            features_mesh_shader_ext_vk: (device_extensions.ext_mesh_shader)
                .then(<vk::PhysicalDeviceMeshShaderFeaturesEXT<'_>>::default),
            features_multi_draw_ext_vk: (device_extensions.ext_multi_draw)
                .then(<vk::PhysicalDeviceMultiDrawFeaturesEXT<'_>>::default),
            features_multisampled_render_to_single_sampled_ext_vk: (device_extensions
                .ext_multisampled_render_to_single_sampled)
                .then(
                    <vk::PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_mutable_descriptor_type_ext_vk: (device_extensions
                .ext_mutable_descriptor_type
                || device_extensions.valve_mutable_descriptor_type)
                .then(<vk::PhysicalDeviceMutableDescriptorTypeFeaturesEXT<'_>>::default),
            features_nested_command_buffer_ext_vk: (device_extensions
                .ext_nested_command_buffer)
                .then(<vk::PhysicalDeviceNestedCommandBufferFeaturesEXT<'_>>::default),
            features_non_seamless_cube_map_ext_vk: (device_extensions
                .ext_non_seamless_cube_map)
                .then(<vk::PhysicalDeviceNonSeamlessCubeMapFeaturesEXT<'_>>::default),
            features_opacity_micromap_ext_vk: (device_extensions.ext_opacity_micromap)
                .then(<vk::PhysicalDeviceOpacityMicromapFeaturesEXT<'_>>::default),
            features_pageable_device_local_memory_ext_vk: (device_extensions
                .ext_pageable_device_local_memory)
                .then(
                    <vk::PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT<'_>>::default,
                ),
            features_pipeline_library_group_handles_ext_vk: (device_extensions
                .ext_pipeline_library_group_handles)
                .then(
                    <vk::PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_pipeline_properties_ext_vk: (device_extensions
                .ext_pipeline_properties)
                .then(<vk::PhysicalDevicePipelinePropertiesFeaturesEXT<'_>>::default),
            features_pipeline_protected_access_ext_vk: (device_extensions
                .ext_pipeline_protected_access)
                .then(
                    <vk::PhysicalDevicePipelineProtectedAccessFeaturesEXT<'_>>::default,
                ),
            features_pipeline_robustness_ext_vk: (device_extensions
                .ext_pipeline_robustness)
                .then(<vk::PhysicalDevicePipelineRobustnessFeaturesEXT<'_>>::default),
            features_primitive_topology_list_restart_ext_vk: (device_extensions
                .ext_primitive_topology_list_restart)
                .then(
                    <vk::PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_primitives_generated_query_ext_vk: (device_extensions
                .ext_primitives_generated_query)
                .then(
                    <vk::PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT<'_>>::default,
                ),
            features_provoking_vertex_ext_vk: (device_extensions.ext_provoking_vertex)
                .then(<vk::PhysicalDeviceProvokingVertexFeaturesEXT<'_>>::default),
            features_rgba10x6_formats_ext_vk: (device_extensions.ext_rgba10x6_formats)
                .then(<vk::PhysicalDeviceRGBA10X6FormatsFeaturesEXT<'_>>::default),
            features_rasterization_order_attachment_access_ext_vk: (device_extensions
                .ext_rasterization_order_attachment_access
                || device_extensions.arm_rasterization_order_attachment_access)
                .then(
                    <vk::PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT<
                        '_,
                    >>::default,
                ),
            features_robustness2_ext_vk: (device_extensions.ext_robustness2)
                .then(<vk::PhysicalDeviceRobustness2FeaturesEXT<'_>>::default),
            features_shader_atomic_float2_ext_vk: (device_extensions
                .ext_shader_atomic_float2)
                .then(<vk::PhysicalDeviceShaderAtomicFloat2FeaturesEXT<'_>>::default),
            features_shader_atomic_float_ext_vk: (device_extensions
                .ext_shader_atomic_float)
                .then(<vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT<'_>>::default),
            features_shader_image_atomic_int64_ext_vk: (device_extensions
                .ext_shader_image_atomic_int64)
                .then(
                    <vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT<'_>>::default,
                ),
            features_shader_module_identifier_ext_vk: (device_extensions
                .ext_shader_module_identifier)
                .then(
                    <vk::PhysicalDeviceShaderModuleIdentifierFeaturesEXT<'_>>::default,
                ),
            features_shader_object_ext_vk: (device_extensions.ext_shader_object)
                .then(<vk::PhysicalDeviceShaderObjectFeaturesEXT<'_>>::default),
            features_shader_tile_image_ext_vk: (device_extensions.ext_shader_tile_image)
                .then(<vk::PhysicalDeviceShaderTileImageFeaturesEXT<'_>>::default),
            features_subpass_merge_feedback_ext_vk: (device_extensions
                .ext_subpass_merge_feedback)
                .then(<vk::PhysicalDeviceSubpassMergeFeedbackFeaturesEXT<'_>>::default),
            features_swapchain_maintenance1_ext_vk: (device_extensions
                .ext_swapchain_maintenance1)
                .then(<vk::PhysicalDeviceSwapchainMaintenance1FeaturesEXT<'_>>::default),
            features_texel_buffer_alignment_ext_vk: (device_extensions
                .ext_texel_buffer_alignment)
                .then(<vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT<'_>>::default),
            features_transform_feedback_ext_vk: (device_extensions
                .ext_transform_feedback)
                .then(<vk::PhysicalDeviceTransformFeedbackFeaturesEXT<'_>>::default),
            features_vertex_input_dynamic_state_ext_vk: (device_extensions
                .ext_vertex_input_dynamic_state)
                .then(
                    <vk::PhysicalDeviceVertexInputDynamicStateFeaturesEXT<'_>>::default,
                ),
            features_ycbcr2_plane444_formats_ext_vk: (device_extensions
                .ext_ycbcr_2plane_444_formats)
                .then(<vk::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT<'_>>::default),
            features_ycbcr_image_arrays_ext_vk: (device_extensions
                .ext_ycbcr_image_arrays)
                .then(<vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT<'_>>::default),
            features_amigo_profiling_sec_vk: (device_extensions.sec_amigo_profiling)
                .then(<vk::PhysicalDeviceAmigoProfilingFeaturesSEC<'_>>::default),
            features_cluster_culling_shader_huawei_vk: (device_extensions
                .huawei_cluster_culling_shader)
                .then(
                    <vk::PhysicalDeviceClusterCullingShaderFeaturesHUAWEI<'_>>::default,
                ),
            features_coherent_memory_amd_vk: (device_extensions
                .amd_device_coherent_memory)
                .then(<vk::PhysicalDeviceCoherentMemoryFeaturesAMD<'_>>::default),
            features_compute_shader_derivatives_nv_vk: (device_extensions
                .nv_compute_shader_derivatives)
                .then(
                    <vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV<'_>>::default,
                ),
            features_cooperative_matrix_nv_vk: (device_extensions.nv_cooperative_matrix)
                .then(<vk::PhysicalDeviceCooperativeMatrixFeaturesNV<'_>>::default),
            features_copy_memory_indirect_nv_vk: (device_extensions
                .nv_copy_memory_indirect)
                .then(<vk::PhysicalDeviceCopyMemoryIndirectFeaturesNV<'_>>::default),
            features_corner_sampled_image_nv_vk: (device_extensions
                .nv_corner_sampled_image)
                .then(<vk::PhysicalDeviceCornerSampledImageFeaturesNV<'_>>::default),
            features_coverage_reduction_mode_nv_vk: (device_extensions
                .nv_coverage_reduction_mode)
                .then(<vk::PhysicalDeviceCoverageReductionModeFeaturesNV<'_>>::default),
            features_cubic_clamp_qcom_vk: (device_extensions.qcom_filter_cubic_clamp)
                .then(<vk::PhysicalDeviceCubicClampFeaturesQCOM<'_>>::default),
            features_cubic_weights_qcom_vk: (device_extensions.qcom_filter_cubic_weights)
                .then(<vk::PhysicalDeviceCubicWeightsFeaturesQCOM<'_>>::default),
            features_cuda_kernel_launch_nv_vk: (device_extensions.nv_cuda_kernel_launch)
                .then(<vk::PhysicalDeviceCudaKernelLaunchFeaturesNV<'_>>::default),
            features_dedicated_allocation_image_aliasing_nv_vk: (device_extensions
                .nv_dedicated_allocation_image_aliasing)
                .then(
                    <vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV<
                        '_,
                    >>::default,
                ),
            features_descriptor_pool_overallocation_nv_vk: (device_extensions
                .nv_descriptor_pool_overallocation)
                .then(
                    <vk::PhysicalDeviceDescriptorPoolOverallocationFeaturesNV<
                        '_,
                    >>::default,
                ),
            features_descriptor_set_host_mapping_valve_vk: (device_extensions
                .valve_descriptor_set_host_mapping)
                .then(
                    <vk::PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE<
                        '_,
                    >>::default,
                ),
            features_device_generated_commands_compute_nv_vk: (device_extensions
                .nv_device_generated_commands_compute)
                .then(
                    <vk::PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV<
                        '_,
                    >>::default,
                ),
            features_device_generated_commands_nv_vk: (device_extensions
                .nv_device_generated_commands)
                .then(
                    <vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV<'_>>::default,
                ),
            features_diagnostics_config_nv_vk: (device_extensions
                .nv_device_diagnostics_config)
                .then(<vk::PhysicalDeviceDiagnosticsConfigFeaturesNV<'_>>::default),
            features_displacement_micromap_nv_vk: (device_extensions
                .nv_displacement_micromap)
                .then(<vk::PhysicalDeviceDisplacementMicromapFeaturesNV<'_>>::default),
            features_exclusive_scissor_nv_vk: (device_extensions.nv_scissor_exclusive)
                .then(<vk::PhysicalDeviceExclusiveScissorFeaturesNV<'_>>::default),
            features_extended_sparse_address_space_nv_vk: (device_extensions
                .nv_extended_sparse_address_space)
                .then(
                    <vk::PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV<'_>>::default,
                ),
            features_external_format_resolve_android_vk: (device_extensions
                .android_external_format_resolve)
                .then(
                    <vk::PhysicalDeviceExternalFormatResolveFeaturesANDROID<'_>>::default,
                ),
            features_external_memory_rdma_nv_vk: (device_extensions
                .nv_external_memory_rdma)
                .then(<vk::PhysicalDeviceExternalMemoryRDMAFeaturesNV<'_>>::default),
            features_external_memory_screen_buffer_qnx_vk: (device_extensions
                .qnx_external_memory_screen_buffer)
                .then(
                    <vk::PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX<
                        '_,
                    >>::default,
                ),
            features_fragment_density_map_offset_qcom_vk: (device_extensions
                .qcom_fragment_density_map_offset)
                .then(
                    <vk::PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM<'_>>::default,
                ),
            features_fragment_shading_rate_enums_nv_vk: (device_extensions
                .nv_fragment_shading_rate_enums)
                .then(
                    <vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV<'_>>::default,
                ),
            features_image_processing2_qcom_vk: (device_extensions
                .qcom_image_processing2)
                .then(<vk::PhysicalDeviceImageProcessing2FeaturesQCOM<'_>>::default),
            features_image_processing_qcom_vk: (device_extensions.qcom_image_processing)
                .then(<vk::PhysicalDeviceImageProcessingFeaturesQCOM<'_>>::default),
            features_inherited_viewport_scissor_nv_vk: (device_extensions
                .nv_inherited_viewport_scissor)
                .then(
                    <vk::PhysicalDeviceInheritedViewportScissorFeaturesNV<'_>>::default,
                ),
            features_invocation_mask_huawei_vk: (device_extensions
                .huawei_invocation_mask)
                .then(<vk::PhysicalDeviceInvocationMaskFeaturesHUAWEI<'_>>::default),
            features_linear_color_attachment_nv_vk: (device_extensions
                .nv_linear_color_attachment)
                .then(<vk::PhysicalDeviceLinearColorAttachmentFeaturesNV<'_>>::default),
            features_memory_decompression_nv_vk: (device_extensions
                .nv_memory_decompression)
                .then(<vk::PhysicalDeviceMemoryDecompressionFeaturesNV<'_>>::default),
            features_mesh_shader_nv_vk: (device_extensions.nv_mesh_shader)
                .then(<vk::PhysicalDeviceMeshShaderFeaturesNV<'_>>::default),
            features_multiview_per_view_render_areas_qcom_vk: (device_extensions
                .qcom_multiview_per_view_render_areas)
                .then(
                    <vk::PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM<
                        '_,
                    >>::default,
                ),
            features_multiview_per_view_viewports_qcom_vk: (device_extensions
                .qcom_multiview_per_view_viewports)
                .then(
                    <vk::PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM<
                        '_,
                    >>::default,
                ),
            features_optical_flow_nv_vk: (device_extensions.nv_optical_flow)
                .then(<vk::PhysicalDeviceOpticalFlowFeaturesNV<'_>>::default),
            features_per_stage_descriptor_set_nv_vk: (device_extensions
                .nv_per_stage_descriptor_set)
                .then(<vk::PhysicalDevicePerStageDescriptorSetFeaturesNV<'_>>::default),
            features_present_barrier_nv_vk: (device_extensions.nv_present_barrier)
                .then(<vk::PhysicalDevicePresentBarrierFeaturesNV<'_>>::default),
            features_raw_access_chains_nv_vk: (device_extensions.nv_raw_access_chains)
                .then(<vk::PhysicalDeviceRawAccessChainsFeaturesNV<'_>>::default),
            features_ray_tracing_invocation_reorder_nv_vk: (device_extensions
                .nv_ray_tracing_invocation_reorder)
                .then(
                    <vk::PhysicalDeviceRayTracingInvocationReorderFeaturesNV<
                        '_,
                    >>::default,
                ),
            features_ray_tracing_motion_blur_nv_vk: (device_extensions
                .nv_ray_tracing_motion_blur)
                .then(<vk::PhysicalDeviceRayTracingMotionBlurFeaturesNV<'_>>::default),
            features_ray_tracing_validation_nv_vk: (device_extensions
                .nv_ray_tracing_validation)
                .then(<vk::PhysicalDeviceRayTracingValidationFeaturesNV<'_>>::default),
            features_relaxed_line_rasterization_img_vk: (device_extensions
                .img_relaxed_line_rasterization)
                .then(
                    <vk::PhysicalDeviceRelaxedLineRasterizationFeaturesIMG<'_>>::default,
                ),
            features_render_pass_striped_arm_vk: (device_extensions
                .arm_render_pass_striped)
                .then(<vk::PhysicalDeviceRenderPassStripedFeaturesARM<'_>>::default),
            features_representative_fragment_test_nv_vk: (device_extensions
                .nv_representative_fragment_test)
                .then(
                    <vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV<'_>>::default,
                ),
            features_scheduling_controls_arm_vk: (device_extensions
                .arm_scheduling_controls)
                .then(<vk::PhysicalDeviceSchedulingControlsFeaturesARM<'_>>::default),
            features_shader_atomic_float16_vector_nv_vk: (device_extensions
                .nv_shader_atomic_float16_vector)
                .then(
                    <vk::PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV<'_>>::default,
                ),
            features_shader_core_builtins_arm_vk: (device_extensions
                .arm_shader_core_builtins)
                .then(<vk::PhysicalDeviceShaderCoreBuiltinsFeaturesARM<'_>>::default),
            features_shader_early_and_late_fragment_tests_amd_vk: (device_extensions
                .amd_shader_early_and_late_fragment_tests)
                .then(
                    <vk::PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD<
                        '_,
                    >>::default,
                ),
            features_shader_enqueue_amdx_vk: (device_extensions.amdx_shader_enqueue)
                .then(<vk::PhysicalDeviceShaderEnqueueFeaturesAMDX<'_>>::default),
            features_shader_image_footprint_nv_vk: (device_extensions
                .nv_shader_image_footprint)
                .then(<vk::PhysicalDeviceShaderImageFootprintFeaturesNV<'_>>::default),
            features_shader_integer_functions2_intel_vk: (device_extensions
                .intel_shader_integer_functions2)
                .then(
                    <vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL<'_>>::default,
                ),
            features_shader_sm_builtins_nv_vk: (device_extensions.nv_shader_sm_builtins)
                .then(<vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV<'_>>::default),
            features_shading_rate_image_nv_vk: (device_extensions.nv_shading_rate_image)
                .then(<vk::PhysicalDeviceShadingRateImageFeaturesNV<'_>>::default),
            features_subpass_shading_huawei_vk: (device_extensions
                .huawei_subpass_shading)
                .then(<vk::PhysicalDeviceSubpassShadingFeaturesHUAWEI<'_>>::default),
            features_tile_properties_qcom_vk: (device_extensions.qcom_tile_properties)
                .then(<vk::PhysicalDeviceTilePropertiesFeaturesQCOM<'_>>::default),
            features_ycbcr_degamma_qcom_vk: (device_extensions.qcom_ycbcr_degamma)
                .then(<vk::PhysicalDeviceYcbcrDegammaFeaturesQCOM<'_>>::default),
        }
    }
    pub(crate) fn from_vk2(
        val_vk: &vk::PhysicalDeviceFeatures2<'_>,
        extensions_vk: &PhysicalDeviceFeatures2ExtensionsVk,
    ) -> Self {
        let vk::PhysicalDeviceFeatures2 { features: val_vk, .. } = val_vk;
        let PhysicalDeviceFeatures2ExtensionsVk {
            features_vulkan11_vk,
            features_vulkan12_vk,
            features_vulkan13_vk,
            features_16bit_storage_vk,
            features_multiview_vk,
            features_protected_memory_vk,
            features_sampler_ycbcr_conversion_vk,
            features_shader_draw_parameters_vk,
            features_variable_pointers_vk,
            features_8bit_storage_vk,
            features_buffer_device_address_vk,
            features_descriptor_indexing_vk,
            features_host_query_reset_vk,
            features_imageless_framebuffer_vk,
            features_scalar_block_layout_vk,
            features_separate_depth_stencil_layouts_vk,
            features_shader_atomic_int64_vk,
            features_shader_float16_int8_vk,
            features_shader_subgroup_extended_types_vk,
            features_timeline_semaphore_vk,
            features_uniform_buffer_standard_layout_vk,
            features_vulkan_memory_model_vk,
            features_dynamic_rendering_vk,
            features_image_robustness_vk,
            features_inline_uniform_block_vk,
            features_maintenance4_vk,
            features_pipeline_creation_cache_control_vk,
            features_private_data_vk,
            features_shader_demote_to_helper_invocation_vk,
            features_shader_integer_dot_product_vk,
            features_shader_terminate_invocation_vk,
            features_subgroup_size_control_vk,
            features_synchronization2_vk,
            features_texture_compression_astchdr_vk,
            features_zero_initialize_workgroup_memory_vk,
            features_acceleration_structure_khr_vk,
            features_cooperative_matrix_khr_vk,
            features_dynamic_rendering_local_read_khr_vk,
            features_fragment_shader_barycentric_khr_vk,
            features_fragment_shading_rate_khr_vk,
            features_global_priority_query_khr_vk,
            features_index_type_uint8_khr_vk,
            features_line_rasterization_khr_vk,
            features_maintenance5_khr_vk,
            features_maintenance6_khr_vk,
            features_performance_query_khr_vk,
            features_pipeline_executable_properties_khr_vk,
            features_portability_subset_khr_vk,
            features_present_id_khr_vk,
            features_present_wait_khr_vk,
            features_ray_query_khr_vk,
            features_ray_tracing_maintenance1_khr_vk,
            features_ray_tracing_pipeline_khr_vk,
            features_ray_tracing_position_fetch_khr_vk,
            features_shader_clock_khr_vk,
            features_shader_expect_assume_khr_vk,
            features_shader_float_controls2_khr_vk,
            features_shader_maximal_reconvergence_khr_vk,
            features_shader_quad_control_khr_vk,
            features_shader_subgroup_rotate_khr_vk,
            features_shader_subgroup_uniform_control_flow_khr_vk,
            features_vertex_attribute_divisor_khr_vk,
            features_video_maintenance1_khr_vk,
            features_workgroup_memory_explicit_layout_khr_vk,
            features_4444formats_ext_vk,
            features_astc_decode_ext_vk,
            features_address_binding_report_ext_vk,
            features_attachment_feedback_loop_dynamic_state_ext_vk,
            features_attachment_feedback_loop_layout_ext_vk,
            features_blend_operation_advanced_ext_vk,
            features_border_color_swizzle_ext_vk,
            features_buffer_device_address_ext_vk,
            features_color_write_enable_ext_vk,
            features_conditional_rendering_ext_vk,
            features_custom_border_color_ext_vk,
            features_depth_bias_control_ext_vk,
            features_depth_clamp_zero_one_ext_vk,
            features_depth_clip_control_ext_vk,
            features_depth_clip_enable_ext_vk,
            features_descriptor_buffer_ext_vk,
            features_device_memory_report_ext_vk,
            features_dynamic_rendering_unused_attachments_ext_vk,
            features_extended_dynamic_state2_ext_vk,
            features_extended_dynamic_state3_ext_vk,
            features_extended_dynamic_state_ext_vk,
            features_fault_ext_vk,
            features_fragment_density_map2_ext_vk,
            features_fragment_density_map_ext_vk,
            features_fragment_shader_interlock_ext_vk,
            features_frame_boundary_ext_vk,
            features_graphics_pipeline_library_ext_vk,
            features_host_image_copy_ext_vk,
            features_image2_d_view_of3_d_ext_vk,
            features_image_compression_control_ext_vk,
            features_image_compression_control_swapchain_ext_vk,
            features_image_sliced_view_of3_d_ext_vk,
            features_image_view_min_lod_ext_vk,
            features_legacy_dithering_ext_vk,
            features_map_memory_placed_ext_vk,
            features_memory_priority_ext_vk,
            features_mesh_shader_ext_vk,
            features_multi_draw_ext_vk,
            features_multisampled_render_to_single_sampled_ext_vk,
            features_mutable_descriptor_type_ext_vk,
            features_nested_command_buffer_ext_vk,
            features_non_seamless_cube_map_ext_vk,
            features_opacity_micromap_ext_vk,
            features_pageable_device_local_memory_ext_vk,
            features_pipeline_library_group_handles_ext_vk,
            features_pipeline_properties_ext_vk,
            features_pipeline_protected_access_ext_vk,
            features_pipeline_robustness_ext_vk,
            features_primitive_topology_list_restart_ext_vk,
            features_primitives_generated_query_ext_vk,
            features_provoking_vertex_ext_vk,
            features_rgba10x6_formats_ext_vk,
            features_rasterization_order_attachment_access_ext_vk,
            features_robustness2_ext_vk,
            features_shader_atomic_float2_ext_vk,
            features_shader_atomic_float_ext_vk,
            features_shader_image_atomic_int64_ext_vk,
            features_shader_module_identifier_ext_vk,
            features_shader_object_ext_vk,
            features_shader_tile_image_ext_vk,
            features_subpass_merge_feedback_ext_vk,
            features_swapchain_maintenance1_ext_vk,
            features_texel_buffer_alignment_ext_vk,
            features_transform_feedback_ext_vk,
            features_vertex_input_dynamic_state_ext_vk,
            features_ycbcr2_plane444_formats_ext_vk,
            features_ycbcr_image_arrays_ext_vk,
            features_amigo_profiling_sec_vk,
            features_cluster_culling_shader_huawei_vk,
            features_coherent_memory_amd_vk,
            features_compute_shader_derivatives_nv_vk,
            features_cooperative_matrix_nv_vk,
            features_copy_memory_indirect_nv_vk,
            features_corner_sampled_image_nv_vk,
            features_coverage_reduction_mode_nv_vk,
            features_cubic_clamp_qcom_vk,
            features_cubic_weights_qcom_vk,
            features_cuda_kernel_launch_nv_vk,
            features_dedicated_allocation_image_aliasing_nv_vk,
            features_descriptor_pool_overallocation_nv_vk,
            features_descriptor_set_host_mapping_valve_vk,
            features_device_generated_commands_compute_nv_vk,
            features_device_generated_commands_nv_vk,
            features_diagnostics_config_nv_vk,
            features_displacement_micromap_nv_vk,
            features_exclusive_scissor_nv_vk,
            features_extended_sparse_address_space_nv_vk,
            features_external_format_resolve_android_vk,
            features_external_memory_rdma_nv_vk,
            features_external_memory_screen_buffer_qnx_vk,
            features_fragment_density_map_offset_qcom_vk,
            features_fragment_shading_rate_enums_nv_vk,
            features_image_processing2_qcom_vk,
            features_image_processing_qcom_vk,
            features_inherited_viewport_scissor_nv_vk,
            features_invocation_mask_huawei_vk,
            features_linear_color_attachment_nv_vk,
            features_memory_decompression_nv_vk,
            features_mesh_shader_nv_vk,
            features_multiview_per_view_render_areas_qcom_vk,
            features_multiview_per_view_viewports_qcom_vk,
            features_optical_flow_nv_vk,
            features_per_stage_descriptor_set_nv_vk,
            features_present_barrier_nv_vk,
            features_raw_access_chains_nv_vk,
            features_ray_tracing_invocation_reorder_nv_vk,
            features_ray_tracing_motion_blur_nv_vk,
            features_ray_tracing_validation_nv_vk,
            features_relaxed_line_rasterization_img_vk,
            features_render_pass_striped_arm_vk,
            features_representative_fragment_test_nv_vk,
            features_scheduling_controls_arm_vk,
            features_shader_atomic_float16_vector_nv_vk,
            features_shader_core_builtins_arm_vk,
            features_shader_early_and_late_fragment_tests_amd_vk,
            features_shader_enqueue_amdx_vk,
            features_shader_image_footprint_nv_vk,
            features_shader_integer_functions2_intel_vk,
            features_shader_sm_builtins_nv_vk,
            features_shading_rate_image_nv_vk,
            features_subpass_shading_huawei_vk,
            features_tile_properties_qcom_vk,
            features_ycbcr_degamma_qcom_vk,
        } = extensions_vk;
        let &vk::PhysicalDeviceFeatures {
            robust_buffer_access,
            full_draw_index_uint32,
            image_cube_array,
            independent_blend,
            geometry_shader,
            tessellation_shader,
            sample_rate_shading,
            dual_src_blend,
            logic_op,
            multi_draw_indirect,
            draw_indirect_first_instance,
            depth_clamp,
            depth_bias_clamp,
            fill_mode_non_solid,
            depth_bounds,
            wide_lines,
            large_points,
            alpha_to_one,
            multi_viewport,
            sampler_anisotropy,
            texture_compression_etc2,
            texture_compression_astc_ldr,
            texture_compression_bc,
            occlusion_query_precise,
            pipeline_statistics_query,
            vertex_pipeline_stores_and_atomics,
            fragment_stores_and_atomics,
            shader_tessellation_and_geometry_point_size,
            shader_image_gather_extended,
            shader_storage_image_extended_formats,
            shader_storage_image_multisample,
            shader_storage_image_read_without_format,
            shader_storage_image_write_without_format,
            shader_uniform_buffer_array_dynamic_indexing,
            shader_sampled_image_array_dynamic_indexing,
            shader_storage_buffer_array_dynamic_indexing,
            shader_storage_image_array_dynamic_indexing,
            shader_clip_distance,
            shader_cull_distance,
            shader_float64,
            shader_int64,
            shader_int16,
            shader_resource_residency,
            shader_resource_min_lod,
            sparse_binding,
            sparse_residency_buffer,
            sparse_residency_image2_d,
            sparse_residency_image3_d,
            sparse_residency2_samples,
            sparse_residency4_samples,
            sparse_residency8_samples,
            sparse_residency16_samples,
            sparse_residency_aliased,
            variable_multisample_rate,
            inherited_queries,
            ..
        } = val_vk;
        let mut val = Self {
            acceleration_structure: false,
            acceleration_structure_capture_replay: false,
            acceleration_structure_host_commands: false,
            acceleration_structure_indirect_build: false,
            advanced_blend_coherent_operations: false,
            alpha_to_one: alpha_to_one != 0,
            amigo_profiling: false,
            attachment_feedback_loop_dynamic_state: false,
            attachment_feedback_loop_layout: false,
            attachment_fragment_shading_rate: false,
            border_color_swizzle: false,
            border_color_swizzle_from_image: false,
            bresenham_lines: false,
            buffer_device_address: false,
            buffer_device_address_capture_replay: false,
            buffer_device_address_multi_device: false,
            clusterculling_shader: false,
            color_write_enable: false,
            compute_derivative_group_linear: false,
            compute_derivative_group_quads: false,
            compute_full_subgroups: false,
            conditional_rendering: false,
            constant_alpha_color_blend_factors: false,
            cooperative_matrix: false,
            cooperative_matrix_robust_buffer_access: false,
            corner_sampled_image: false,
            coverage_reduction_mode: false,
            cubic_range_clamp: false,
            cuda_kernel_launch_features: false,
            custom_border_color_without_format: false,
            custom_border_colors: false,
            decode_mode_shared_exponent: false,
            dedicated_allocation_image_aliasing: false,
            depth_bias_clamp: depth_bias_clamp != 0,
            depth_bias_control: false,
            depth_bias_exact: false,
            depth_bounds: depth_bounds != 0,
            depth_clamp: depth_clamp != 0,
            depth_clamp_zero_one: false,
            depth_clip_control: false,
            depth_clip_enable: false,
            descriptor_binding_acceleration_structure_update_after_bind: false,
            descriptor_binding_inline_uniform_block_update_after_bind: false,
            descriptor_binding_partially_bound: false,
            descriptor_binding_sampled_image_update_after_bind: false,
            descriptor_binding_storage_buffer_update_after_bind: false,
            descriptor_binding_storage_image_update_after_bind: false,
            descriptor_binding_storage_texel_buffer_update_after_bind: false,
            descriptor_binding_uniform_buffer_update_after_bind: false,
            descriptor_binding_uniform_texel_buffer_update_after_bind: false,
            descriptor_binding_update_unused_while_pending: false,
            descriptor_binding_variable_descriptor_count: false,
            descriptor_buffer: false,
            descriptor_buffer_capture_replay: false,
            descriptor_buffer_image_layout_ignored: false,
            descriptor_buffer_push_descriptors: false,
            descriptor_indexing: false,
            descriptor_pool_overallocation: false,
            descriptor_set_host_mapping: false,
            device_coherent_memory: false,
            device_fault: false,
            device_fault_vendor_binary: false,
            device_generated_commands: false,
            device_generated_compute: false,
            device_generated_compute_capture_replay: false,
            device_generated_compute_pipelines: false,
            device_memory_report: false,
            diagnostics_config: false,
            displacement_micromap: false,
            draw_indirect_count: false,
            draw_indirect_first_instance: draw_indirect_first_instance != 0,
            dual_src_blend: dual_src_blend != 0,
            dynamic_pipeline_layout: false,
            dynamic_rendering: false,
            dynamic_rendering_local_read: false,
            dynamic_rendering_unused_attachments: false,
            events: false,
            exclusive_scissor: false,
            extended_dynamic_state: false,
            extended_dynamic_state2: false,
            extended_dynamic_state2_logic_op: false,
            extended_dynamic_state2_patch_control_points: false,
            extended_dynamic_state3_alpha_to_coverage_enable: false,
            extended_dynamic_state3_alpha_to_one_enable: false,
            extended_dynamic_state3_color_blend_advanced: false,
            extended_dynamic_state3_color_blend_enable: false,
            extended_dynamic_state3_color_blend_equation: false,
            extended_dynamic_state3_color_write_mask: false,
            extended_dynamic_state3_conservative_rasterization_mode: false,
            extended_dynamic_state3_coverage_modulation_mode: false,
            extended_dynamic_state3_coverage_modulation_table: false,
            extended_dynamic_state3_coverage_modulation_table_enable: false,
            extended_dynamic_state3_coverage_reduction_mode: false,
            extended_dynamic_state3_coverage_to_color_enable: false,
            extended_dynamic_state3_coverage_to_color_location: false,
            extended_dynamic_state3_depth_clamp_enable: false,
            extended_dynamic_state3_depth_clip_enable: false,
            extended_dynamic_state3_depth_clip_negative_one_to_one: false,
            extended_dynamic_state3_extra_primitive_overestimation_size: false,
            extended_dynamic_state3_line_rasterization_mode: false,
            extended_dynamic_state3_line_stipple_enable: false,
            extended_dynamic_state3_logic_op_enable: false,
            extended_dynamic_state3_polygon_mode: false,
            extended_dynamic_state3_provoking_vertex_mode: false,
            extended_dynamic_state3_rasterization_samples: false,
            extended_dynamic_state3_rasterization_stream: false,
            extended_dynamic_state3_representative_fragment_test_enable: false,
            extended_dynamic_state3_sample_locations_enable: false,
            extended_dynamic_state3_sample_mask: false,
            extended_dynamic_state3_shading_rate_image_enable: false,
            extended_dynamic_state3_tessellation_domain_origin: false,
            extended_dynamic_state3_viewport_swizzle: false,
            extended_dynamic_state3_viewport_w_scaling_enable: false,
            extended_sparse_address_space: false,
            external_format_resolve: false,
            external_memory_rdma: false,
            fill_mode_non_solid: fill_mode_non_solid != 0,
            float_representation: false,
            format_a4b4g4r4: false,
            format_a4r4g4b4: false,
            format_rgba10x6_without_y_cb_cr_sampler: false,
            fragment_density_map: false,
            fragment_density_map_deferred: false,
            fragment_density_map_dynamic: false,
            fragment_density_map_non_subsampled_images: false,
            fragment_density_map_offset: false,
            fragment_shader_barycentric: false,
            fragment_shader_pixel_interlock: false,
            fragment_shader_sample_interlock: false,
            fragment_shader_shading_rate_interlock: false,
            fragment_shading_rate_enums: false,
            fragment_stores_and_atomics: fragment_stores_and_atomics != 0,
            frame_boundary: false,
            full_draw_index_uint32: full_draw_index_uint32 != 0,
            geometry_shader: geometry_shader != 0,
            geometry_streams: false,
            global_priority_query: false,
            graphics_pipeline_library: false,
            host_image_copy: false,
            host_query_reset: false,
            image2_d_view_of3_d: false,
            image_compression_control: false,
            image_compression_control_swapchain: false,
            image_cube_array: image_cube_array != 0,
            image_footprint: false,
            image_sliced_view_of3_d: false,
            image_view2_d_on3_d_image: false,
            image_view_format_reinterpretation: false,
            image_view_format_swizzle: false,
            imageless_framebuffer: false,
            independent_blend: independent_blend != 0,
            index_type_uint8: false,
            indirect_copy: false,
            inherited_conditional_rendering: false,
            inherited_queries: inherited_queries != 0,
            inherited_viewport_scissor2_d: false,
            inline_uniform_block: false,
            invocation_mask: false,
            large_points: large_points != 0,
            least_representable_value_force_unorm_representation: false,
            legacy_dithering: false,
            linear_color_attachment: false,
            logic_op: logic_op != 0,
            maintenance4: false,
            maintenance5: false,
            maintenance6: false,
            memory_decompression: false,
            memory_map_placed: false,
            memory_map_range_placed: false,
            memory_priority: false,
            memory_unmap_reserve: false,
            mesh_shader: false,
            mesh_shader_queries: false,
            micromap: false,
            micromap_capture_replay: false,
            micromap_host_commands: false,
            min_lod: false,
            multi_draw: false,
            multi_draw_indirect: multi_draw_indirect != 0,
            multi_viewport: multi_viewport != 0,
            multisample_array_image: false,
            multisampled_render_to_single_sampled: false,
            multiview: false,
            multiview_cluster_culling_shader: false,
            multiview_geometry_shader: false,
            multiview_mesh_shader: false,
            multiview_per_view_render_areas: false,
            multiview_per_view_viewports: false,
            multiview_tessellation_shader: false,
            mutable_comparison_samplers: false,
            mutable_descriptor_type: false,
            nested_command_buffer: false,
            nested_command_buffer_rendering: false,
            nested_command_buffer_simultaneous_use: false,
            no_invocation_fragment_shading_rates: false,
            non_seamless_cube_map: false,
            null_descriptor: false,
            occlusion_query_precise: occlusion_query_precise != 0,
            optical_flow: false,
            pageable_device_local_memory: false,
            per_stage_descriptor_set: false,
            performance_counter_multiple_query_pools: false,
            performance_counter_query_pools: false,
            pipeline_creation_cache_control: false,
            pipeline_executable_info: false,
            pipeline_fragment_shading_rate: false,
            pipeline_library_group_handles: false,
            pipeline_properties_identifier: false,
            pipeline_protected_access: false,
            pipeline_robustness: false,
            pipeline_statistics_query: pipeline_statistics_query != 0,
            point_polygons: false,
            present_barrier: false,
            present_id: false,
            present_wait: false,
            primitive_fragment_shading_rate: false,
            primitive_fragment_shading_rate_mesh_shader: false,
            primitive_topology_list_restart: false,
            primitive_topology_patch_list_restart: false,
            primitives_generated_query: false,
            primitives_generated_query_with_non_zero_streams: false,
            primitives_generated_query_with_rasterizer_discard: false,
            private_data: false,
            protected_memory: false,
            provoking_vertex_last: false,
            rasterization_order_color_attachment_access: false,
            rasterization_order_depth_attachment_access: false,
            rasterization_order_stencil_attachment_access: false,
            ray_query: false,
            ray_tracing_invocation_reorder: false,
            ray_tracing_maintenance1: false,
            ray_tracing_motion_blur: false,
            ray_tracing_motion_blur_pipeline_trace_rays_indirect: false,
            ray_tracing_pipeline: false,
            ray_tracing_pipeline_shader_group_handle_capture_replay: false,
            ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: false,
            ray_tracing_pipeline_trace_rays_indirect: false,
            ray_tracing_pipeline_trace_rays_indirect2: false,
            ray_tracing_position_fetch: false,
            ray_tracing_validation: false,
            ray_traversal_primitive_culling: false,
            rectangular_lines: false,
            relaxed_line_rasterization: false,
            render_pass_striped: false,
            report_address_binding: false,
            representative_fragment_test: false,
            robust_buffer_access: robust_buffer_access != 0,
            robust_buffer_access2: false,
            robust_image_access: false,
            robust_image_access2: false,
            runtime_descriptor_array: false,
            sample_rate_shading: sample_rate_shading != 0,
            sampler2_d_view_of3_d: false,
            sampler_anisotropy: sampler_anisotropy != 0,
            sampler_filter_minmax: false,
            sampler_mip_lod_bias: false,
            sampler_mirror_clamp_to_edge: false,
            sampler_ycbcr_conversion: false,
            scalar_block_layout: false,
            scheduling_controls: false,
            screen_buffer_import: false,
            selectable_cubic_weights: false,
            separate_depth_stencil_layouts: false,
            separate_stencil_mask_ref: false,
            shader_buffer_float16_atomic_add: false,
            shader_buffer_float16_atomic_min_max: false,
            shader_buffer_float16_atomics: false,
            shader_buffer_float32_atomic_add: false,
            shader_buffer_float32_atomic_min_max: false,
            shader_buffer_float32_atomics: false,
            shader_buffer_float64_atomic_add: false,
            shader_buffer_float64_atomic_min_max: false,
            shader_buffer_float64_atomics: false,
            shader_buffer_int64_atomics: false,
            shader_clip_distance: shader_clip_distance != 0,
            shader_core_builtins: false,
            shader_cull_distance: shader_cull_distance != 0,
            shader_demote_to_helper_invocation: false,
            shader_device_clock: false,
            shader_draw_parameters: false,
            shader_early_and_late_fragment_tests: false,
            shader_enqueue: false,
            shader_expect_assume: false,
            shader_float16: false,
            shader_float16_vector_atomics: false,
            shader_float64: shader_float64 != 0,
            shader_float_controls2: false,
            shader_image_float32_atomic_add: false,
            shader_image_float32_atomic_min_max: false,
            shader_image_float32_atomics: false,
            shader_image_gather_extended: shader_image_gather_extended != 0,
            shader_image_int64_atomics: false,
            shader_input_attachment_array_dynamic_indexing: false,
            shader_input_attachment_array_non_uniform_indexing: false,
            shader_int16: shader_int16 != 0,
            shader_int64: shader_int64 != 0,
            shader_int8: false,
            shader_integer_dot_product: false,
            shader_integer_functions2: false,
            shader_maximal_reconvergence: false,
            shader_module_identifier: false,
            shader_object: false,
            shader_output_layer: false,
            shader_output_viewport_index: false,
            shader_quad_control: false,
            shader_raw_access_chains: false,
            shader_resource_min_lod: shader_resource_min_lod != 0,
            shader_resource_residency: shader_resource_residency != 0,
            shader_sample_rate_interpolation_functions: false,
            shader_sampled_image_array_dynamic_indexing: shader_sampled_image_array_dynamic_indexing
                != 0,
            shader_sampled_image_array_non_uniform_indexing: false,
            shader_shared_float16_atomic_add: false,
            shader_shared_float16_atomic_min_max: false,
            shader_shared_float16_atomics: false,
            shader_shared_float32_atomic_add: false,
            shader_shared_float32_atomic_min_max: false,
            shader_shared_float32_atomics: false,
            shader_shared_float64_atomic_add: false,
            shader_shared_float64_atomic_min_max: false,
            shader_shared_float64_atomics: false,
            shader_shared_int64_atomics: false,
            shader_sm_builtins: false,
            shader_storage_buffer_array_dynamic_indexing: shader_storage_buffer_array_dynamic_indexing
                != 0,
            shader_storage_buffer_array_non_uniform_indexing: false,
            shader_storage_image_array_dynamic_indexing: shader_storage_image_array_dynamic_indexing
                != 0,
            shader_storage_image_array_non_uniform_indexing: false,
            shader_storage_image_extended_formats: shader_storage_image_extended_formats
                != 0,
            shader_storage_image_multisample: shader_storage_image_multisample != 0,
            shader_storage_image_read_without_format: shader_storage_image_read_without_format
                != 0,
            shader_storage_image_write_without_format: shader_storage_image_write_without_format
                != 0,
            shader_storage_texel_buffer_array_dynamic_indexing: false,
            shader_storage_texel_buffer_array_non_uniform_indexing: false,
            shader_subgroup_clock: false,
            shader_subgroup_extended_types: false,
            shader_subgroup_rotate: false,
            shader_subgroup_rotate_clustered: false,
            shader_subgroup_uniform_control_flow: false,
            shader_terminate_invocation: false,
            shader_tessellation_and_geometry_point_size: shader_tessellation_and_geometry_point_size
                != 0,
            shader_tile_image_color_read_access: false,
            shader_tile_image_depth_read_access: false,
            shader_tile_image_stencil_read_access: false,
            shader_uniform_buffer_array_dynamic_indexing: shader_uniform_buffer_array_dynamic_indexing
                != 0,
            shader_uniform_buffer_array_non_uniform_indexing: false,
            shader_uniform_texel_buffer_array_dynamic_indexing: false,
            shader_uniform_texel_buffer_array_non_uniform_indexing: false,
            shader_zero_initialize_workgroup_memory: false,
            shading_rate_coarse_sample_order: false,
            shading_rate_image: false,
            smooth_lines: false,
            sparse_binding: sparse_binding != 0,
            sparse_image_float32_atomic_add: false,
            sparse_image_float32_atomic_min_max: false,
            sparse_image_float32_atomics: false,
            sparse_image_int64_atomics: false,
            sparse_residency16_samples: sparse_residency16_samples != 0,
            sparse_residency2_samples: sparse_residency2_samples != 0,
            sparse_residency4_samples: sparse_residency4_samples != 0,
            sparse_residency8_samples: sparse_residency8_samples != 0,
            sparse_residency_aliased: sparse_residency_aliased != 0,
            sparse_residency_buffer: sparse_residency_buffer != 0,
            sparse_residency_image2_d: sparse_residency_image2_d != 0,
            sparse_residency_image3_d: sparse_residency_image3_d != 0,
            stippled_bresenham_lines: false,
            stippled_rectangular_lines: false,
            stippled_smooth_lines: false,
            storage_buffer16_bit_access: false,
            storage_buffer8_bit_access: false,
            storage_input_output16: false,
            storage_push_constant16: false,
            storage_push_constant8: false,
            subgroup_broadcast_dynamic_id: false,
            subgroup_size_control: false,
            subpass_merge_feedback: false,
            subpass_shading: false,
            supersample_fragment_shading_rates: false,
            swapchain_maintenance1: false,
            synchronization2: false,
            task_shader: false,
            tessellation_isolines: false,
            tessellation_point_mode: false,
            tessellation_shader: tessellation_shader != 0,
            texel_buffer_alignment: false,
            texture_block_match: false,
            texture_block_match2: false,
            texture_box_filter: false,
            texture_compression_astc_hdr: false,
            texture_compression_astc_ldr: texture_compression_astc_ldr != 0,
            texture_compression_bc: texture_compression_bc != 0,
            texture_compression_etc2: texture_compression_etc2 != 0,
            texture_sample_weighted: false,
            tile_properties: false,
            timeline_semaphore: false,
            transform_feedback: false,
            transform_feedback_preserves_provoking_vertex: false,
            triangle_fans: false,
            uniform_and_storage_buffer16_bit_access: false,
            uniform_and_storage_buffer8_bit_access: false,
            uniform_buffer_standard_layout: false,
            variable_multisample_rate: variable_multisample_rate != 0,
            variable_pointers: false,
            variable_pointers_storage_buffer: false,
            vertex_attribute_access_beyond_stride: false,
            vertex_attribute_instance_rate_divisor: false,
            vertex_attribute_instance_rate_zero_divisor: false,
            vertex_input_dynamic_state: false,
            vertex_pipeline_stores_and_atomics: vertex_pipeline_stores_and_atomics != 0,
            video_maintenance1: false,
            vulkan_memory_model: false,
            vulkan_memory_model_availability_visibility_chains: false,
            vulkan_memory_model_device_scope: false,
            wide_lines: wide_lines != 0,
            workgroup_memory_explicit_layout: false,
            workgroup_memory_explicit_layout16_bit_access: false,
            workgroup_memory_explicit_layout8_bit_access: false,
            workgroup_memory_explicit_layout_scalar_block_layout: false,
            ycbcr2plane444_formats: false,
            ycbcr_degamma: false,
            ycbcr_image_arrays: false,
            _ne: crate::NE,
        };
        if let Some(val_vk) = features_vulkan11_vk {
            let &vk::PhysicalDeviceVulkan11Features {
                storage_buffer16_bit_access,
                uniform_and_storage_buffer16_bit_access,
                storage_push_constant16,
                storage_input_output16,
                multiview,
                multiview_geometry_shader,
                multiview_tessellation_shader,
                variable_pointers_storage_buffer,
                variable_pointers,
                protected_memory,
                sampler_ycbcr_conversion,
                shader_draw_parameters,
                ..
            } = val_vk;
            val.storage_buffer16_bit_access |= storage_buffer16_bit_access != 0;
            val.uniform_and_storage_buffer16_bit_access
                |= uniform_and_storage_buffer16_bit_access != 0;
            val.storage_push_constant16 |= storage_push_constant16 != 0;
            val.storage_input_output16 |= storage_input_output16 != 0;
            val.multiview |= multiview != 0;
            val.multiview_geometry_shader |= multiview_geometry_shader != 0;
            val.multiview_tessellation_shader |= multiview_tessellation_shader != 0;
            val.variable_pointers_storage_buffer
                |= variable_pointers_storage_buffer != 0;
            val.variable_pointers |= variable_pointers != 0;
            val.protected_memory |= protected_memory != 0;
            val.sampler_ycbcr_conversion |= sampler_ycbcr_conversion != 0;
            val.shader_draw_parameters |= shader_draw_parameters != 0;
        }
        if let Some(val_vk) = features_vulkan12_vk {
            let &vk::PhysicalDeviceVulkan12Features {
                sampler_mirror_clamp_to_edge,
                draw_indirect_count,
                storage_buffer8_bit_access,
                uniform_and_storage_buffer8_bit_access,
                storage_push_constant8,
                shader_buffer_int64_atomics,
                shader_shared_int64_atomics,
                shader_float16,
                shader_int8,
                descriptor_indexing,
                shader_input_attachment_array_dynamic_indexing,
                shader_uniform_texel_buffer_array_dynamic_indexing,
                shader_storage_texel_buffer_array_dynamic_indexing,
                shader_uniform_buffer_array_non_uniform_indexing,
                shader_sampled_image_array_non_uniform_indexing,
                shader_storage_buffer_array_non_uniform_indexing,
                shader_storage_image_array_non_uniform_indexing,
                shader_input_attachment_array_non_uniform_indexing,
                shader_uniform_texel_buffer_array_non_uniform_indexing,
                shader_storage_texel_buffer_array_non_uniform_indexing,
                descriptor_binding_uniform_buffer_update_after_bind,
                descriptor_binding_sampled_image_update_after_bind,
                descriptor_binding_storage_image_update_after_bind,
                descriptor_binding_storage_buffer_update_after_bind,
                descriptor_binding_uniform_texel_buffer_update_after_bind,
                descriptor_binding_storage_texel_buffer_update_after_bind,
                descriptor_binding_update_unused_while_pending,
                descriptor_binding_partially_bound,
                descriptor_binding_variable_descriptor_count,
                runtime_descriptor_array,
                sampler_filter_minmax,
                scalar_block_layout,
                imageless_framebuffer,
                uniform_buffer_standard_layout,
                shader_subgroup_extended_types,
                separate_depth_stencil_layouts,
                host_query_reset,
                timeline_semaphore,
                buffer_device_address,
                buffer_device_address_capture_replay,
                buffer_device_address_multi_device,
                vulkan_memory_model,
                vulkan_memory_model_device_scope,
                vulkan_memory_model_availability_visibility_chains,
                shader_output_viewport_index,
                shader_output_layer,
                subgroup_broadcast_dynamic_id,
                ..
            } = val_vk;
            val.sampler_mirror_clamp_to_edge |= sampler_mirror_clamp_to_edge != 0;
            val.draw_indirect_count |= draw_indirect_count != 0;
            val.storage_buffer8_bit_access |= storage_buffer8_bit_access != 0;
            val.uniform_and_storage_buffer8_bit_access
                |= uniform_and_storage_buffer8_bit_access != 0;
            val.storage_push_constant8 |= storage_push_constant8 != 0;
            val.shader_buffer_int64_atomics |= shader_buffer_int64_atomics != 0;
            val.shader_shared_int64_atomics |= shader_shared_int64_atomics != 0;
            val.shader_float16 |= shader_float16 != 0;
            val.shader_int8 |= shader_int8 != 0;
            val.descriptor_indexing |= descriptor_indexing != 0;
            val.shader_input_attachment_array_dynamic_indexing
                |= shader_input_attachment_array_dynamic_indexing != 0;
            val.shader_uniform_texel_buffer_array_dynamic_indexing
                |= shader_uniform_texel_buffer_array_dynamic_indexing != 0;
            val.shader_storage_texel_buffer_array_dynamic_indexing
                |= shader_storage_texel_buffer_array_dynamic_indexing != 0;
            val.shader_uniform_buffer_array_non_uniform_indexing
                |= shader_uniform_buffer_array_non_uniform_indexing != 0;
            val.shader_sampled_image_array_non_uniform_indexing
                |= shader_sampled_image_array_non_uniform_indexing != 0;
            val.shader_storage_buffer_array_non_uniform_indexing
                |= shader_storage_buffer_array_non_uniform_indexing != 0;
            val.shader_storage_image_array_non_uniform_indexing
                |= shader_storage_image_array_non_uniform_indexing != 0;
            val.shader_input_attachment_array_non_uniform_indexing
                |= shader_input_attachment_array_non_uniform_indexing != 0;
            val.shader_uniform_texel_buffer_array_non_uniform_indexing
                |= shader_uniform_texel_buffer_array_non_uniform_indexing != 0;
            val.shader_storage_texel_buffer_array_non_uniform_indexing
                |= shader_storage_texel_buffer_array_non_uniform_indexing != 0;
            val.descriptor_binding_uniform_buffer_update_after_bind
                |= descriptor_binding_uniform_buffer_update_after_bind != 0;
            val.descriptor_binding_sampled_image_update_after_bind
                |= descriptor_binding_sampled_image_update_after_bind != 0;
            val.descriptor_binding_storage_image_update_after_bind
                |= descriptor_binding_storage_image_update_after_bind != 0;
            val.descriptor_binding_storage_buffer_update_after_bind
                |= descriptor_binding_storage_buffer_update_after_bind != 0;
            val.descriptor_binding_uniform_texel_buffer_update_after_bind
                |= descriptor_binding_uniform_texel_buffer_update_after_bind != 0;
            val.descriptor_binding_storage_texel_buffer_update_after_bind
                |= descriptor_binding_storage_texel_buffer_update_after_bind != 0;
            val.descriptor_binding_update_unused_while_pending
                |= descriptor_binding_update_unused_while_pending != 0;
            val.descriptor_binding_partially_bound
                |= descriptor_binding_partially_bound != 0;
            val.descriptor_binding_variable_descriptor_count
                |= descriptor_binding_variable_descriptor_count != 0;
            val.runtime_descriptor_array |= runtime_descriptor_array != 0;
            val.sampler_filter_minmax |= sampler_filter_minmax != 0;
            val.scalar_block_layout |= scalar_block_layout != 0;
            val.imageless_framebuffer |= imageless_framebuffer != 0;
            val.uniform_buffer_standard_layout |= uniform_buffer_standard_layout != 0;
            val.shader_subgroup_extended_types |= shader_subgroup_extended_types != 0;
            val.separate_depth_stencil_layouts |= separate_depth_stencil_layouts != 0;
            val.host_query_reset |= host_query_reset != 0;
            val.timeline_semaphore |= timeline_semaphore != 0;
            val.buffer_device_address |= buffer_device_address != 0;
            val.buffer_device_address_capture_replay
                |= buffer_device_address_capture_replay != 0;
            val.buffer_device_address_multi_device
                |= buffer_device_address_multi_device != 0;
            val.vulkan_memory_model |= vulkan_memory_model != 0;
            val.vulkan_memory_model_device_scope
                |= vulkan_memory_model_device_scope != 0;
            val.vulkan_memory_model_availability_visibility_chains
                |= vulkan_memory_model_availability_visibility_chains != 0;
            val.shader_output_viewport_index |= shader_output_viewport_index != 0;
            val.shader_output_layer |= shader_output_layer != 0;
            val.subgroup_broadcast_dynamic_id |= subgroup_broadcast_dynamic_id != 0;
        }
        if let Some(val_vk) = features_vulkan13_vk {
            let &vk::PhysicalDeviceVulkan13Features {
                robust_image_access,
                inline_uniform_block,
                descriptor_binding_inline_uniform_block_update_after_bind,
                pipeline_creation_cache_control,
                private_data,
                shader_demote_to_helper_invocation,
                shader_terminate_invocation,
                subgroup_size_control,
                compute_full_subgroups,
                synchronization2,
                texture_compression_astc_hdr,
                shader_zero_initialize_workgroup_memory,
                dynamic_rendering,
                shader_integer_dot_product,
                maintenance4,
                ..
            } = val_vk;
            val.robust_image_access |= robust_image_access != 0;
            val.inline_uniform_block |= inline_uniform_block != 0;
            val.descriptor_binding_inline_uniform_block_update_after_bind
                |= descriptor_binding_inline_uniform_block_update_after_bind != 0;
            val.pipeline_creation_cache_control |= pipeline_creation_cache_control != 0;
            val.private_data |= private_data != 0;
            val.shader_demote_to_helper_invocation
                |= shader_demote_to_helper_invocation != 0;
            val.shader_terminate_invocation |= shader_terminate_invocation != 0;
            val.subgroup_size_control |= subgroup_size_control != 0;
            val.compute_full_subgroups |= compute_full_subgroups != 0;
            val.synchronization2 |= synchronization2 != 0;
            val.texture_compression_astc_hdr |= texture_compression_astc_hdr != 0;
            val.shader_zero_initialize_workgroup_memory
                |= shader_zero_initialize_workgroup_memory != 0;
            val.dynamic_rendering |= dynamic_rendering != 0;
            val.shader_integer_dot_product |= shader_integer_dot_product != 0;
            val.maintenance4 |= maintenance4 != 0;
        }
        if let Some(val_vk) = features_16bit_storage_vk {
            let &vk::PhysicalDevice16BitStorageFeatures {
                storage_buffer16_bit_access,
                uniform_and_storage_buffer16_bit_access,
                storage_push_constant16,
                storage_input_output16,
                ..
            } = val_vk;
            val.storage_buffer16_bit_access |= storage_buffer16_bit_access != 0;
            val.uniform_and_storage_buffer16_bit_access
                |= uniform_and_storage_buffer16_bit_access != 0;
            val.storage_push_constant16 |= storage_push_constant16 != 0;
            val.storage_input_output16 |= storage_input_output16 != 0;
        }
        if let Some(val_vk) = features_multiview_vk {
            let &vk::PhysicalDeviceMultiviewFeatures {
                multiview,
                multiview_geometry_shader,
                multiview_tessellation_shader,
                ..
            } = val_vk;
            val.multiview |= multiview != 0;
            val.multiview_geometry_shader |= multiview_geometry_shader != 0;
            val.multiview_tessellation_shader |= multiview_tessellation_shader != 0;
        }
        if let Some(val_vk) = features_protected_memory_vk {
            let &vk::PhysicalDeviceProtectedMemoryFeatures { protected_memory, .. } = val_vk;
            val.protected_memory |= protected_memory != 0;
        }
        if let Some(val_vk) = features_sampler_ycbcr_conversion_vk {
            let &vk::PhysicalDeviceSamplerYcbcrConversionFeatures {
                sampler_ycbcr_conversion,
                ..
            } = val_vk;
            val.sampler_ycbcr_conversion |= sampler_ycbcr_conversion != 0;
        }
        if let Some(val_vk) = features_shader_draw_parameters_vk {
            let &vk::PhysicalDeviceShaderDrawParametersFeatures {
                shader_draw_parameters,
                ..
            } = val_vk;
            val.shader_draw_parameters |= shader_draw_parameters != 0;
        }
        if let Some(val_vk) = features_variable_pointers_vk {
            let &vk::PhysicalDeviceVariablePointersFeatures {
                variable_pointers_storage_buffer,
                variable_pointers,
                ..
            } = val_vk;
            val.variable_pointers_storage_buffer
                |= variable_pointers_storage_buffer != 0;
            val.variable_pointers |= variable_pointers != 0;
        }
        if let Some(val_vk) = features_8bit_storage_vk {
            let &vk::PhysicalDevice8BitStorageFeatures {
                storage_buffer8_bit_access,
                uniform_and_storage_buffer8_bit_access,
                storage_push_constant8,
                ..
            } = val_vk;
            val.storage_buffer8_bit_access |= storage_buffer8_bit_access != 0;
            val.uniform_and_storage_buffer8_bit_access
                |= uniform_and_storage_buffer8_bit_access != 0;
            val.storage_push_constant8 |= storage_push_constant8 != 0;
        }
        if let Some(val_vk) = features_buffer_device_address_vk {
            let &vk::PhysicalDeviceBufferDeviceAddressFeatures {
                buffer_device_address,
                buffer_device_address_capture_replay,
                buffer_device_address_multi_device,
                ..
            } = val_vk;
            val.buffer_device_address |= buffer_device_address != 0;
            val.buffer_device_address_capture_replay
                |= buffer_device_address_capture_replay != 0;
            val.buffer_device_address_multi_device
                |= buffer_device_address_multi_device != 0;
        }
        if let Some(val_vk) = features_descriptor_indexing_vk {
            let &vk::PhysicalDeviceDescriptorIndexingFeatures {
                shader_input_attachment_array_dynamic_indexing,
                shader_uniform_texel_buffer_array_dynamic_indexing,
                shader_storage_texel_buffer_array_dynamic_indexing,
                shader_uniform_buffer_array_non_uniform_indexing,
                shader_sampled_image_array_non_uniform_indexing,
                shader_storage_buffer_array_non_uniform_indexing,
                shader_storage_image_array_non_uniform_indexing,
                shader_input_attachment_array_non_uniform_indexing,
                shader_uniform_texel_buffer_array_non_uniform_indexing,
                shader_storage_texel_buffer_array_non_uniform_indexing,
                descriptor_binding_uniform_buffer_update_after_bind,
                descriptor_binding_sampled_image_update_after_bind,
                descriptor_binding_storage_image_update_after_bind,
                descriptor_binding_storage_buffer_update_after_bind,
                descriptor_binding_uniform_texel_buffer_update_after_bind,
                descriptor_binding_storage_texel_buffer_update_after_bind,
                descriptor_binding_update_unused_while_pending,
                descriptor_binding_partially_bound,
                descriptor_binding_variable_descriptor_count,
                runtime_descriptor_array,
                ..
            } = val_vk;
            val.shader_input_attachment_array_dynamic_indexing
                |= shader_input_attachment_array_dynamic_indexing != 0;
            val.shader_uniform_texel_buffer_array_dynamic_indexing
                |= shader_uniform_texel_buffer_array_dynamic_indexing != 0;
            val.shader_storage_texel_buffer_array_dynamic_indexing
                |= shader_storage_texel_buffer_array_dynamic_indexing != 0;
            val.shader_uniform_buffer_array_non_uniform_indexing
                |= shader_uniform_buffer_array_non_uniform_indexing != 0;
            val.shader_sampled_image_array_non_uniform_indexing
                |= shader_sampled_image_array_non_uniform_indexing != 0;
            val.shader_storage_buffer_array_non_uniform_indexing
                |= shader_storage_buffer_array_non_uniform_indexing != 0;
            val.shader_storage_image_array_non_uniform_indexing
                |= shader_storage_image_array_non_uniform_indexing != 0;
            val.shader_input_attachment_array_non_uniform_indexing
                |= shader_input_attachment_array_non_uniform_indexing != 0;
            val.shader_uniform_texel_buffer_array_non_uniform_indexing
                |= shader_uniform_texel_buffer_array_non_uniform_indexing != 0;
            val.shader_storage_texel_buffer_array_non_uniform_indexing
                |= shader_storage_texel_buffer_array_non_uniform_indexing != 0;
            val.descriptor_binding_uniform_buffer_update_after_bind
                |= descriptor_binding_uniform_buffer_update_after_bind != 0;
            val.descriptor_binding_sampled_image_update_after_bind
                |= descriptor_binding_sampled_image_update_after_bind != 0;
            val.descriptor_binding_storage_image_update_after_bind
                |= descriptor_binding_storage_image_update_after_bind != 0;
            val.descriptor_binding_storage_buffer_update_after_bind
                |= descriptor_binding_storage_buffer_update_after_bind != 0;
            val.descriptor_binding_uniform_texel_buffer_update_after_bind
                |= descriptor_binding_uniform_texel_buffer_update_after_bind != 0;
            val.descriptor_binding_storage_texel_buffer_update_after_bind
                |= descriptor_binding_storage_texel_buffer_update_after_bind != 0;
            val.descriptor_binding_update_unused_while_pending
                |= descriptor_binding_update_unused_while_pending != 0;
            val.descriptor_binding_partially_bound
                |= descriptor_binding_partially_bound != 0;
            val.descriptor_binding_variable_descriptor_count
                |= descriptor_binding_variable_descriptor_count != 0;
            val.runtime_descriptor_array |= runtime_descriptor_array != 0;
        }
        if let Some(val_vk) = features_host_query_reset_vk {
            let &vk::PhysicalDeviceHostQueryResetFeatures { host_query_reset, .. } = val_vk;
            val.host_query_reset |= host_query_reset != 0;
        }
        if let Some(val_vk) = features_imageless_framebuffer_vk {
            let &vk::PhysicalDeviceImagelessFramebufferFeatures {
                imageless_framebuffer,
                ..
            } = val_vk;
            val.imageless_framebuffer |= imageless_framebuffer != 0;
        }
        if let Some(val_vk) = features_scalar_block_layout_vk {
            let &vk::PhysicalDeviceScalarBlockLayoutFeatures {
                scalar_block_layout,
                ..
            } = val_vk;
            val.scalar_block_layout |= scalar_block_layout != 0;
        }
        if let Some(val_vk) = features_separate_depth_stencil_layouts_vk {
            let &vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
                separate_depth_stencil_layouts,
                ..
            } = val_vk;
            val.separate_depth_stencil_layouts |= separate_depth_stencil_layouts != 0;
        }
        if let Some(val_vk) = features_shader_atomic_int64_vk {
            let &vk::PhysicalDeviceShaderAtomicInt64Features {
                shader_buffer_int64_atomics,
                shader_shared_int64_atomics,
                ..
            } = val_vk;
            val.shader_buffer_int64_atomics |= shader_buffer_int64_atomics != 0;
            val.shader_shared_int64_atomics |= shader_shared_int64_atomics != 0;
        }
        if let Some(val_vk) = features_shader_float16_int8_vk {
            let &vk::PhysicalDeviceShaderFloat16Int8Features {
                shader_float16,
                shader_int8,
                ..
            } = val_vk;
            val.shader_float16 |= shader_float16 != 0;
            val.shader_int8 |= shader_int8 != 0;
        }
        if let Some(val_vk) = features_shader_subgroup_extended_types_vk {
            let &vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
                shader_subgroup_extended_types,
                ..
            } = val_vk;
            val.shader_subgroup_extended_types |= shader_subgroup_extended_types != 0;
        }
        if let Some(val_vk) = features_timeline_semaphore_vk {
            let &vk::PhysicalDeviceTimelineSemaphoreFeatures {
                timeline_semaphore,
                ..
            } = val_vk;
            val.timeline_semaphore |= timeline_semaphore != 0;
        }
        if let Some(val_vk) = features_uniform_buffer_standard_layout_vk {
            let &vk::PhysicalDeviceUniformBufferStandardLayoutFeatures {
                uniform_buffer_standard_layout,
                ..
            } = val_vk;
            val.uniform_buffer_standard_layout |= uniform_buffer_standard_layout != 0;
        }
        if let Some(val_vk) = features_vulkan_memory_model_vk {
            let &vk::PhysicalDeviceVulkanMemoryModelFeatures {
                vulkan_memory_model,
                vulkan_memory_model_device_scope,
                vulkan_memory_model_availability_visibility_chains,
                ..
            } = val_vk;
            val.vulkan_memory_model |= vulkan_memory_model != 0;
            val.vulkan_memory_model_device_scope
                |= vulkan_memory_model_device_scope != 0;
            val.vulkan_memory_model_availability_visibility_chains
                |= vulkan_memory_model_availability_visibility_chains != 0;
        }
        if let Some(val_vk) = features_dynamic_rendering_vk {
            let &vk::PhysicalDeviceDynamicRenderingFeatures { dynamic_rendering, .. } = val_vk;
            val.dynamic_rendering |= dynamic_rendering != 0;
        }
        if let Some(val_vk) = features_image_robustness_vk {
            let &vk::PhysicalDeviceImageRobustnessFeatures { robust_image_access, .. } = val_vk;
            val.robust_image_access |= robust_image_access != 0;
        }
        if let Some(val_vk) = features_inline_uniform_block_vk {
            let &vk::PhysicalDeviceInlineUniformBlockFeatures {
                inline_uniform_block,
                descriptor_binding_inline_uniform_block_update_after_bind,
                ..
            } = val_vk;
            val.inline_uniform_block |= inline_uniform_block != 0;
            val.descriptor_binding_inline_uniform_block_update_after_bind
                |= descriptor_binding_inline_uniform_block_update_after_bind != 0;
        }
        if let Some(val_vk) = features_maintenance4_vk {
            let &vk::PhysicalDeviceMaintenance4Features { maintenance4, .. } = val_vk;
            val.maintenance4 |= maintenance4 != 0;
        }
        if let Some(val_vk) = features_pipeline_creation_cache_control_vk {
            let &vk::PhysicalDevicePipelineCreationCacheControlFeatures {
                pipeline_creation_cache_control,
                ..
            } = val_vk;
            val.pipeline_creation_cache_control |= pipeline_creation_cache_control != 0;
        }
        if let Some(val_vk) = features_private_data_vk {
            let &vk::PhysicalDevicePrivateDataFeatures { private_data, .. } = val_vk;
            val.private_data |= private_data != 0;
        }
        if let Some(val_vk) = features_shader_demote_to_helper_invocation_vk {
            let &vk::PhysicalDeviceShaderDemoteToHelperInvocationFeatures {
                shader_demote_to_helper_invocation,
                ..
            } = val_vk;
            val.shader_demote_to_helper_invocation
                |= shader_demote_to_helper_invocation != 0;
        }
        if let Some(val_vk) = features_shader_integer_dot_product_vk {
            let &vk::PhysicalDeviceShaderIntegerDotProductFeatures {
                shader_integer_dot_product,
                ..
            } = val_vk;
            val.shader_integer_dot_product |= shader_integer_dot_product != 0;
        }
        if let Some(val_vk) = features_shader_terminate_invocation_vk {
            let &vk::PhysicalDeviceShaderTerminateInvocationFeatures {
                shader_terminate_invocation,
                ..
            } = val_vk;
            val.shader_terminate_invocation |= shader_terminate_invocation != 0;
        }
        if let Some(val_vk) = features_subgroup_size_control_vk {
            let &vk::PhysicalDeviceSubgroupSizeControlFeatures {
                subgroup_size_control,
                compute_full_subgroups,
                ..
            } = val_vk;
            val.subgroup_size_control |= subgroup_size_control != 0;
            val.compute_full_subgroups |= compute_full_subgroups != 0;
        }
        if let Some(val_vk) = features_synchronization2_vk {
            let &vk::PhysicalDeviceSynchronization2Features { synchronization2, .. } = val_vk;
            val.synchronization2 |= synchronization2 != 0;
        }
        if let Some(val_vk) = features_texture_compression_astchdr_vk {
            let &vk::PhysicalDeviceTextureCompressionASTCHDRFeatures {
                texture_compression_astc_hdr,
                ..
            } = val_vk;
            val.texture_compression_astc_hdr |= texture_compression_astc_hdr != 0;
        }
        if let Some(val_vk) = features_zero_initialize_workgroup_memory_vk {
            let &vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
                shader_zero_initialize_workgroup_memory,
                ..
            } = val_vk;
            val.shader_zero_initialize_workgroup_memory
                |= shader_zero_initialize_workgroup_memory != 0;
        }
        if let Some(val_vk) = features_acceleration_structure_khr_vk {
            let &vk::PhysicalDeviceAccelerationStructureFeaturesKHR {
                acceleration_structure,
                acceleration_structure_capture_replay,
                acceleration_structure_indirect_build,
                acceleration_structure_host_commands,
                descriptor_binding_acceleration_structure_update_after_bind,
                ..
            } = val_vk;
            val.acceleration_structure |= acceleration_structure != 0;
            val.acceleration_structure_capture_replay
                |= acceleration_structure_capture_replay != 0;
            val.acceleration_structure_indirect_build
                |= acceleration_structure_indirect_build != 0;
            val.acceleration_structure_host_commands
                |= acceleration_structure_host_commands != 0;
            val.descriptor_binding_acceleration_structure_update_after_bind
                |= descriptor_binding_acceleration_structure_update_after_bind != 0;
        }
        if let Some(val_vk) = features_cooperative_matrix_khr_vk {
            let &vk::PhysicalDeviceCooperativeMatrixFeaturesKHR {
                cooperative_matrix,
                cooperative_matrix_robust_buffer_access,
                ..
            } = val_vk;
            val.cooperative_matrix |= cooperative_matrix != 0;
            val.cooperative_matrix_robust_buffer_access
                |= cooperative_matrix_robust_buffer_access != 0;
        }
        if let Some(val_vk) = features_dynamic_rendering_local_read_khr_vk {
            let &vk::PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR {
                dynamic_rendering_local_read,
                ..
            } = val_vk;
            val.dynamic_rendering_local_read |= dynamic_rendering_local_read != 0;
        }
        if let Some(val_vk) = features_fragment_shader_barycentric_khr_vk {
            let &vk::PhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
                fragment_shader_barycentric,
                ..
            } = val_vk;
            val.fragment_shader_barycentric |= fragment_shader_barycentric != 0;
        }
        if let Some(val_vk) = features_fragment_shading_rate_khr_vk {
            let &vk::PhysicalDeviceFragmentShadingRateFeaturesKHR {
                pipeline_fragment_shading_rate,
                primitive_fragment_shading_rate,
                attachment_fragment_shading_rate,
                ..
            } = val_vk;
            val.pipeline_fragment_shading_rate |= pipeline_fragment_shading_rate != 0;
            val.primitive_fragment_shading_rate |= primitive_fragment_shading_rate != 0;
            val.attachment_fragment_shading_rate
                |= attachment_fragment_shading_rate != 0;
        }
        if let Some(val_vk) = features_global_priority_query_khr_vk {
            let &vk::PhysicalDeviceGlobalPriorityQueryFeaturesKHR {
                global_priority_query,
                ..
            } = val_vk;
            val.global_priority_query |= global_priority_query != 0;
        }
        if let Some(val_vk) = features_index_type_uint8_khr_vk {
            let &vk::PhysicalDeviceIndexTypeUint8FeaturesKHR { index_type_uint8, .. } = val_vk;
            val.index_type_uint8 |= index_type_uint8 != 0;
        }
        if let Some(val_vk) = features_line_rasterization_khr_vk {
            let &vk::PhysicalDeviceLineRasterizationFeaturesKHR {
                rectangular_lines,
                bresenham_lines,
                smooth_lines,
                stippled_rectangular_lines,
                stippled_bresenham_lines,
                stippled_smooth_lines,
                ..
            } = val_vk;
            val.rectangular_lines |= rectangular_lines != 0;
            val.bresenham_lines |= bresenham_lines != 0;
            val.smooth_lines |= smooth_lines != 0;
            val.stippled_rectangular_lines |= stippled_rectangular_lines != 0;
            val.stippled_bresenham_lines |= stippled_bresenham_lines != 0;
            val.stippled_smooth_lines |= stippled_smooth_lines != 0;
        }
        if let Some(val_vk) = features_maintenance5_khr_vk {
            let &vk::PhysicalDeviceMaintenance5FeaturesKHR { maintenance5, .. } = val_vk;
            val.maintenance5 |= maintenance5 != 0;
        }
        if let Some(val_vk) = features_maintenance6_khr_vk {
            let &vk::PhysicalDeviceMaintenance6FeaturesKHR { maintenance6, .. } = val_vk;
            val.maintenance6 |= maintenance6 != 0;
        }
        if let Some(val_vk) = features_performance_query_khr_vk {
            let &vk::PhysicalDevicePerformanceQueryFeaturesKHR {
                performance_counter_query_pools,
                performance_counter_multiple_query_pools,
                ..
            } = val_vk;
            val.performance_counter_query_pools |= performance_counter_query_pools != 0;
            val.performance_counter_multiple_query_pools
                |= performance_counter_multiple_query_pools != 0;
        }
        if let Some(val_vk) = features_pipeline_executable_properties_khr_vk {
            let &vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
                pipeline_executable_info,
                ..
            } = val_vk;
            val.pipeline_executable_info |= pipeline_executable_info != 0;
        }
        if let Some(val_vk) = features_portability_subset_khr_vk {
            let &vk::PhysicalDevicePortabilitySubsetFeaturesKHR {
                constant_alpha_color_blend_factors,
                events,
                image_view_format_reinterpretation,
                image_view_format_swizzle,
                image_view2_d_on3_d_image,
                multisample_array_image,
                mutable_comparison_samplers,
                point_polygons,
                sampler_mip_lod_bias,
                separate_stencil_mask_ref,
                shader_sample_rate_interpolation_functions,
                tessellation_isolines,
                tessellation_point_mode,
                triangle_fans,
                vertex_attribute_access_beyond_stride,
                ..
            } = val_vk;
            val.constant_alpha_color_blend_factors
                |= constant_alpha_color_blend_factors != 0;
            val.events |= events != 0;
            val.image_view_format_reinterpretation
                |= image_view_format_reinterpretation != 0;
            val.image_view_format_swizzle |= image_view_format_swizzle != 0;
            val.image_view2_d_on3_d_image |= image_view2_d_on3_d_image != 0;
            val.multisample_array_image |= multisample_array_image != 0;
            val.mutable_comparison_samplers |= mutable_comparison_samplers != 0;
            val.point_polygons |= point_polygons != 0;
            val.sampler_mip_lod_bias |= sampler_mip_lod_bias != 0;
            val.separate_stencil_mask_ref |= separate_stencil_mask_ref != 0;
            val.shader_sample_rate_interpolation_functions
                |= shader_sample_rate_interpolation_functions != 0;
            val.tessellation_isolines |= tessellation_isolines != 0;
            val.tessellation_point_mode |= tessellation_point_mode != 0;
            val.triangle_fans |= triangle_fans != 0;
            val.vertex_attribute_access_beyond_stride
                |= vertex_attribute_access_beyond_stride != 0;
        }
        if let Some(val_vk) = features_present_id_khr_vk {
            let &vk::PhysicalDevicePresentIdFeaturesKHR { present_id, .. } = val_vk;
            val.present_id |= present_id != 0;
        }
        if let Some(val_vk) = features_present_wait_khr_vk {
            let &vk::PhysicalDevicePresentWaitFeaturesKHR { present_wait, .. } = val_vk;
            val.present_wait |= present_wait != 0;
        }
        if let Some(val_vk) = features_ray_query_khr_vk {
            let &vk::PhysicalDeviceRayQueryFeaturesKHR { ray_query, .. } = val_vk;
            val.ray_query |= ray_query != 0;
        }
        if let Some(val_vk) = features_ray_tracing_maintenance1_khr_vk {
            let &vk::PhysicalDeviceRayTracingMaintenance1FeaturesKHR {
                ray_tracing_maintenance1,
                ray_tracing_pipeline_trace_rays_indirect2,
                ..
            } = val_vk;
            val.ray_tracing_maintenance1 |= ray_tracing_maintenance1 != 0;
            val.ray_tracing_pipeline_trace_rays_indirect2
                |= ray_tracing_pipeline_trace_rays_indirect2 != 0;
        }
        if let Some(val_vk) = features_ray_tracing_pipeline_khr_vk {
            let &vk::PhysicalDeviceRayTracingPipelineFeaturesKHR {
                ray_tracing_pipeline,
                ray_tracing_pipeline_shader_group_handle_capture_replay,
                ray_tracing_pipeline_shader_group_handle_capture_replay_mixed,
                ray_tracing_pipeline_trace_rays_indirect,
                ray_traversal_primitive_culling,
                ..
            } = val_vk;
            val.ray_tracing_pipeline |= ray_tracing_pipeline != 0;
            val.ray_tracing_pipeline_shader_group_handle_capture_replay
                |= ray_tracing_pipeline_shader_group_handle_capture_replay != 0;
            val.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed
                |= ray_tracing_pipeline_shader_group_handle_capture_replay_mixed != 0;
            val.ray_tracing_pipeline_trace_rays_indirect
                |= ray_tracing_pipeline_trace_rays_indirect != 0;
            val.ray_traversal_primitive_culling |= ray_traversal_primitive_culling != 0;
        }
        if let Some(val_vk) = features_ray_tracing_position_fetch_khr_vk {
            let &vk::PhysicalDeviceRayTracingPositionFetchFeaturesKHR {
                ray_tracing_position_fetch,
                ..
            } = val_vk;
            val.ray_tracing_position_fetch |= ray_tracing_position_fetch != 0;
        }
        if let Some(val_vk) = features_shader_clock_khr_vk {
            let &vk::PhysicalDeviceShaderClockFeaturesKHR {
                shader_subgroup_clock,
                shader_device_clock,
                ..
            } = val_vk;
            val.shader_subgroup_clock |= shader_subgroup_clock != 0;
            val.shader_device_clock |= shader_device_clock != 0;
        }
        if let Some(val_vk) = features_shader_expect_assume_khr_vk {
            let &vk::PhysicalDeviceShaderExpectAssumeFeaturesKHR {
                shader_expect_assume,
                ..
            } = val_vk;
            val.shader_expect_assume |= shader_expect_assume != 0;
        }
        if let Some(val_vk) = features_shader_float_controls2_khr_vk {
            let &vk::PhysicalDeviceShaderFloatControls2FeaturesKHR {
                shader_float_controls2,
                ..
            } = val_vk;
            val.shader_float_controls2 |= shader_float_controls2 != 0;
        }
        if let Some(val_vk) = features_shader_maximal_reconvergence_khr_vk {
            let &vk::PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
                shader_maximal_reconvergence,
                ..
            } = val_vk;
            val.shader_maximal_reconvergence |= shader_maximal_reconvergence != 0;
        }
        if let Some(val_vk) = features_shader_quad_control_khr_vk {
            let &vk::PhysicalDeviceShaderQuadControlFeaturesKHR {
                shader_quad_control,
                ..
            } = val_vk;
            val.shader_quad_control |= shader_quad_control != 0;
        }
        if let Some(val_vk) = features_shader_subgroup_rotate_khr_vk {
            let &vk::PhysicalDeviceShaderSubgroupRotateFeaturesKHR {
                shader_subgroup_rotate,
                shader_subgroup_rotate_clustered,
                ..
            } = val_vk;
            val.shader_subgroup_rotate |= shader_subgroup_rotate != 0;
            val.shader_subgroup_rotate_clustered
                |= shader_subgroup_rotate_clustered != 0;
        }
        if let Some(val_vk) = features_shader_subgroup_uniform_control_flow_khr_vk {
            let &vk::PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
                shader_subgroup_uniform_control_flow,
                ..
            } = val_vk;
            val.shader_subgroup_uniform_control_flow
                |= shader_subgroup_uniform_control_flow != 0;
        }
        if let Some(val_vk) = features_vertex_attribute_divisor_khr_vk {
            let &vk::PhysicalDeviceVertexAttributeDivisorFeaturesKHR {
                vertex_attribute_instance_rate_divisor,
                vertex_attribute_instance_rate_zero_divisor,
                ..
            } = val_vk;
            val.vertex_attribute_instance_rate_divisor
                |= vertex_attribute_instance_rate_divisor != 0;
            val.vertex_attribute_instance_rate_zero_divisor
                |= vertex_attribute_instance_rate_zero_divisor != 0;
        }
        if let Some(val_vk) = features_video_maintenance1_khr_vk {
            let &vk::PhysicalDeviceVideoMaintenance1FeaturesKHR {
                video_maintenance1,
                ..
            } = val_vk;
            val.video_maintenance1 |= video_maintenance1 != 0;
        }
        if let Some(val_vk) = features_workgroup_memory_explicit_layout_khr_vk {
            let &vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
                workgroup_memory_explicit_layout,
                workgroup_memory_explicit_layout_scalar_block_layout,
                workgroup_memory_explicit_layout8_bit_access,
                workgroup_memory_explicit_layout16_bit_access,
                ..
            } = val_vk;
            val.workgroup_memory_explicit_layout
                |= workgroup_memory_explicit_layout != 0;
            val.workgroup_memory_explicit_layout_scalar_block_layout
                |= workgroup_memory_explicit_layout_scalar_block_layout != 0;
            val.workgroup_memory_explicit_layout8_bit_access
                |= workgroup_memory_explicit_layout8_bit_access != 0;
            val.workgroup_memory_explicit_layout16_bit_access
                |= workgroup_memory_explicit_layout16_bit_access != 0;
        }
        if let Some(val_vk) = features_4444formats_ext_vk {
            let &vk::PhysicalDevice4444FormatsFeaturesEXT {
                format_a4r4g4b4,
                format_a4b4g4r4,
                ..
            } = val_vk;
            val.format_a4r4g4b4 |= format_a4r4g4b4 != 0;
            val.format_a4b4g4r4 |= format_a4b4g4r4 != 0;
        }
        if let Some(val_vk) = features_astc_decode_ext_vk {
            let &vk::PhysicalDeviceASTCDecodeFeaturesEXT {
                decode_mode_shared_exponent,
                ..
            } = val_vk;
            val.decode_mode_shared_exponent |= decode_mode_shared_exponent != 0;
        }
        if let Some(val_vk) = features_address_binding_report_ext_vk {
            let &vk::PhysicalDeviceAddressBindingReportFeaturesEXT {
                report_address_binding,
                ..
            } = val_vk;
            val.report_address_binding |= report_address_binding != 0;
        }
        if let Some(val_vk) = features_attachment_feedback_loop_dynamic_state_ext_vk {
            let &vk::PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
                attachment_feedback_loop_dynamic_state,
                ..
            } = val_vk;
            val.attachment_feedback_loop_dynamic_state
                |= attachment_feedback_loop_dynamic_state != 0;
        }
        if let Some(val_vk) = features_attachment_feedback_loop_layout_ext_vk {
            let &vk::PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
                attachment_feedback_loop_layout,
                ..
            } = val_vk;
            val.attachment_feedback_loop_layout |= attachment_feedback_loop_layout != 0;
        }
        if let Some(val_vk) = features_blend_operation_advanced_ext_vk {
            let &vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
                advanced_blend_coherent_operations,
                ..
            } = val_vk;
            val.advanced_blend_coherent_operations
                |= advanced_blend_coherent_operations != 0;
        }
        if let Some(val_vk) = features_border_color_swizzle_ext_vk {
            let &vk::PhysicalDeviceBorderColorSwizzleFeaturesEXT {
                border_color_swizzle,
                border_color_swizzle_from_image,
                ..
            } = val_vk;
            val.border_color_swizzle |= border_color_swizzle != 0;
            val.border_color_swizzle_from_image |= border_color_swizzle_from_image != 0;
        }
        if let Some(val_vk) = features_buffer_device_address_ext_vk {
            let &vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT {
                buffer_device_address,
                buffer_device_address_capture_replay,
                buffer_device_address_multi_device,
                ..
            } = val_vk;
            val.buffer_device_address |= buffer_device_address != 0;
            val.buffer_device_address_capture_replay
                |= buffer_device_address_capture_replay != 0;
            val.buffer_device_address_multi_device
                |= buffer_device_address_multi_device != 0;
        }
        if let Some(val_vk) = features_color_write_enable_ext_vk {
            let &vk::PhysicalDeviceColorWriteEnableFeaturesEXT {
                color_write_enable,
                ..
            } = val_vk;
            val.color_write_enable |= color_write_enable != 0;
        }
        if let Some(val_vk) = features_conditional_rendering_ext_vk {
            let &vk::PhysicalDeviceConditionalRenderingFeaturesEXT {
                conditional_rendering,
                inherited_conditional_rendering,
                ..
            } = val_vk;
            val.conditional_rendering |= conditional_rendering != 0;
            val.inherited_conditional_rendering |= inherited_conditional_rendering != 0;
        }
        if let Some(val_vk) = features_custom_border_color_ext_vk {
            let &vk::PhysicalDeviceCustomBorderColorFeaturesEXT {
                custom_border_colors,
                custom_border_color_without_format,
                ..
            } = val_vk;
            val.custom_border_colors |= custom_border_colors != 0;
            val.custom_border_color_without_format
                |= custom_border_color_without_format != 0;
        }
        if let Some(val_vk) = features_depth_bias_control_ext_vk {
            let &vk::PhysicalDeviceDepthBiasControlFeaturesEXT {
                depth_bias_control,
                least_representable_value_force_unorm_representation,
                float_representation,
                depth_bias_exact,
                ..
            } = val_vk;
            val.depth_bias_control |= depth_bias_control != 0;
            val.least_representable_value_force_unorm_representation
                |= least_representable_value_force_unorm_representation != 0;
            val.float_representation |= float_representation != 0;
            val.depth_bias_exact |= depth_bias_exact != 0;
        }
        if let Some(val_vk) = features_depth_clamp_zero_one_ext_vk {
            let &vk::PhysicalDeviceDepthClampZeroOneFeaturesEXT {
                depth_clamp_zero_one,
                ..
            } = val_vk;
            val.depth_clamp_zero_one |= depth_clamp_zero_one != 0;
        }
        if let Some(val_vk) = features_depth_clip_control_ext_vk {
            let &vk::PhysicalDeviceDepthClipControlFeaturesEXT {
                depth_clip_control,
                ..
            } = val_vk;
            val.depth_clip_control |= depth_clip_control != 0;
        }
        if let Some(val_vk) = features_depth_clip_enable_ext_vk {
            let &vk::PhysicalDeviceDepthClipEnableFeaturesEXT {
                depth_clip_enable,
                ..
            } = val_vk;
            val.depth_clip_enable |= depth_clip_enable != 0;
        }
        if let Some(val_vk) = features_descriptor_buffer_ext_vk {
            let &vk::PhysicalDeviceDescriptorBufferFeaturesEXT {
                descriptor_buffer,
                descriptor_buffer_capture_replay,
                descriptor_buffer_image_layout_ignored,
                descriptor_buffer_push_descriptors,
                ..
            } = val_vk;
            val.descriptor_buffer |= descriptor_buffer != 0;
            val.descriptor_buffer_capture_replay
                |= descriptor_buffer_capture_replay != 0;
            val.descriptor_buffer_image_layout_ignored
                |= descriptor_buffer_image_layout_ignored != 0;
            val.descriptor_buffer_push_descriptors
                |= descriptor_buffer_push_descriptors != 0;
        }
        if let Some(val_vk) = features_device_memory_report_ext_vk {
            let &vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT {
                device_memory_report,
                ..
            } = val_vk;
            val.device_memory_report |= device_memory_report != 0;
        }
        if let Some(val_vk) = features_dynamic_rendering_unused_attachments_ext_vk {
            let &vk::PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
                dynamic_rendering_unused_attachments,
                ..
            } = val_vk;
            val.dynamic_rendering_unused_attachments
                |= dynamic_rendering_unused_attachments != 0;
        }
        if let Some(val_vk) = features_extended_dynamic_state2_ext_vk {
            let &vk::PhysicalDeviceExtendedDynamicState2FeaturesEXT {
                extended_dynamic_state2,
                extended_dynamic_state2_logic_op,
                extended_dynamic_state2_patch_control_points,
                ..
            } = val_vk;
            val.extended_dynamic_state2 |= extended_dynamic_state2 != 0;
            val.extended_dynamic_state2_logic_op
                |= extended_dynamic_state2_logic_op != 0;
            val.extended_dynamic_state2_patch_control_points
                |= extended_dynamic_state2_patch_control_points != 0;
        }
        if let Some(val_vk) = features_extended_dynamic_state3_ext_vk {
            let &vk::PhysicalDeviceExtendedDynamicState3FeaturesEXT {
                extended_dynamic_state3_tessellation_domain_origin,
                extended_dynamic_state3_depth_clamp_enable,
                extended_dynamic_state3_polygon_mode,
                extended_dynamic_state3_rasterization_samples,
                extended_dynamic_state3_sample_mask,
                extended_dynamic_state3_alpha_to_coverage_enable,
                extended_dynamic_state3_alpha_to_one_enable,
                extended_dynamic_state3_logic_op_enable,
                extended_dynamic_state3_color_blend_enable,
                extended_dynamic_state3_color_blend_equation,
                extended_dynamic_state3_color_write_mask,
                extended_dynamic_state3_rasterization_stream,
                extended_dynamic_state3_conservative_rasterization_mode,
                extended_dynamic_state3_extra_primitive_overestimation_size,
                extended_dynamic_state3_depth_clip_enable,
                extended_dynamic_state3_sample_locations_enable,
                extended_dynamic_state3_color_blend_advanced,
                extended_dynamic_state3_provoking_vertex_mode,
                extended_dynamic_state3_line_rasterization_mode,
                extended_dynamic_state3_line_stipple_enable,
                extended_dynamic_state3_depth_clip_negative_one_to_one,
                extended_dynamic_state3_viewport_w_scaling_enable,
                extended_dynamic_state3_viewport_swizzle,
                extended_dynamic_state3_coverage_to_color_enable,
                extended_dynamic_state3_coverage_to_color_location,
                extended_dynamic_state3_coverage_modulation_mode,
                extended_dynamic_state3_coverage_modulation_table_enable,
                extended_dynamic_state3_coverage_modulation_table,
                extended_dynamic_state3_coverage_reduction_mode,
                extended_dynamic_state3_representative_fragment_test_enable,
                extended_dynamic_state3_shading_rate_image_enable,
                ..
            } = val_vk;
            val.extended_dynamic_state3_tessellation_domain_origin
                |= extended_dynamic_state3_tessellation_domain_origin != 0;
            val.extended_dynamic_state3_depth_clamp_enable
                |= extended_dynamic_state3_depth_clamp_enable != 0;
            val.extended_dynamic_state3_polygon_mode
                |= extended_dynamic_state3_polygon_mode != 0;
            val.extended_dynamic_state3_rasterization_samples
                |= extended_dynamic_state3_rasterization_samples != 0;
            val.extended_dynamic_state3_sample_mask
                |= extended_dynamic_state3_sample_mask != 0;
            val.extended_dynamic_state3_alpha_to_coverage_enable
                |= extended_dynamic_state3_alpha_to_coverage_enable != 0;
            val.extended_dynamic_state3_alpha_to_one_enable
                |= extended_dynamic_state3_alpha_to_one_enable != 0;
            val.extended_dynamic_state3_logic_op_enable
                |= extended_dynamic_state3_logic_op_enable != 0;
            val.extended_dynamic_state3_color_blend_enable
                |= extended_dynamic_state3_color_blend_enable != 0;
            val.extended_dynamic_state3_color_blend_equation
                |= extended_dynamic_state3_color_blend_equation != 0;
            val.extended_dynamic_state3_color_write_mask
                |= extended_dynamic_state3_color_write_mask != 0;
            val.extended_dynamic_state3_rasterization_stream
                |= extended_dynamic_state3_rasterization_stream != 0;
            val.extended_dynamic_state3_conservative_rasterization_mode
                |= extended_dynamic_state3_conservative_rasterization_mode != 0;
            val.extended_dynamic_state3_extra_primitive_overestimation_size
                |= extended_dynamic_state3_extra_primitive_overestimation_size != 0;
            val.extended_dynamic_state3_depth_clip_enable
                |= extended_dynamic_state3_depth_clip_enable != 0;
            val.extended_dynamic_state3_sample_locations_enable
                |= extended_dynamic_state3_sample_locations_enable != 0;
            val.extended_dynamic_state3_color_blend_advanced
                |= extended_dynamic_state3_color_blend_advanced != 0;
            val.extended_dynamic_state3_provoking_vertex_mode
                |= extended_dynamic_state3_provoking_vertex_mode != 0;
            val.extended_dynamic_state3_line_rasterization_mode
                |= extended_dynamic_state3_line_rasterization_mode != 0;
            val.extended_dynamic_state3_line_stipple_enable
                |= extended_dynamic_state3_line_stipple_enable != 0;
            val.extended_dynamic_state3_depth_clip_negative_one_to_one
                |= extended_dynamic_state3_depth_clip_negative_one_to_one != 0;
            val.extended_dynamic_state3_viewport_w_scaling_enable
                |= extended_dynamic_state3_viewport_w_scaling_enable != 0;
            val.extended_dynamic_state3_viewport_swizzle
                |= extended_dynamic_state3_viewport_swizzle != 0;
            val.extended_dynamic_state3_coverage_to_color_enable
                |= extended_dynamic_state3_coverage_to_color_enable != 0;
            val.extended_dynamic_state3_coverage_to_color_location
                |= extended_dynamic_state3_coverage_to_color_location != 0;
            val.extended_dynamic_state3_coverage_modulation_mode
                |= extended_dynamic_state3_coverage_modulation_mode != 0;
            val.extended_dynamic_state3_coverage_modulation_table_enable
                |= extended_dynamic_state3_coverage_modulation_table_enable != 0;
            val.extended_dynamic_state3_coverage_modulation_table
                |= extended_dynamic_state3_coverage_modulation_table != 0;
            val.extended_dynamic_state3_coverage_reduction_mode
                |= extended_dynamic_state3_coverage_reduction_mode != 0;
            val.extended_dynamic_state3_representative_fragment_test_enable
                |= extended_dynamic_state3_representative_fragment_test_enable != 0;
            val.extended_dynamic_state3_shading_rate_image_enable
                |= extended_dynamic_state3_shading_rate_image_enable != 0;
        }
        if let Some(val_vk) = features_extended_dynamic_state_ext_vk {
            let &vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT {
                extended_dynamic_state,
                ..
            } = val_vk;
            val.extended_dynamic_state |= extended_dynamic_state != 0;
        }
        if let Some(val_vk) = features_fault_ext_vk {
            let &vk::PhysicalDeviceFaultFeaturesEXT {
                device_fault,
                device_fault_vendor_binary,
                ..
            } = val_vk;
            val.device_fault |= device_fault != 0;
            val.device_fault_vendor_binary |= device_fault_vendor_binary != 0;
        }
        if let Some(val_vk) = features_fragment_density_map2_ext_vk {
            let &vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT {
                fragment_density_map_deferred,
                ..
            } = val_vk;
            val.fragment_density_map_deferred |= fragment_density_map_deferred != 0;
        }
        if let Some(val_vk) = features_fragment_density_map_ext_vk {
            let &vk::PhysicalDeviceFragmentDensityMapFeaturesEXT {
                fragment_density_map,
                fragment_density_map_dynamic,
                fragment_density_map_non_subsampled_images,
                ..
            } = val_vk;
            val.fragment_density_map |= fragment_density_map != 0;
            val.fragment_density_map_dynamic |= fragment_density_map_dynamic != 0;
            val.fragment_density_map_non_subsampled_images
                |= fragment_density_map_non_subsampled_images != 0;
        }
        if let Some(val_vk) = features_fragment_shader_interlock_ext_vk {
            let &vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
                fragment_shader_sample_interlock,
                fragment_shader_pixel_interlock,
                fragment_shader_shading_rate_interlock,
                ..
            } = val_vk;
            val.fragment_shader_sample_interlock
                |= fragment_shader_sample_interlock != 0;
            val.fragment_shader_pixel_interlock |= fragment_shader_pixel_interlock != 0;
            val.fragment_shader_shading_rate_interlock
                |= fragment_shader_shading_rate_interlock != 0;
        }
        if let Some(val_vk) = features_frame_boundary_ext_vk {
            let &vk::PhysicalDeviceFrameBoundaryFeaturesEXT { frame_boundary, .. } = val_vk;
            val.frame_boundary |= frame_boundary != 0;
        }
        if let Some(val_vk) = features_graphics_pipeline_library_ext_vk {
            let &vk::PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
                graphics_pipeline_library,
                ..
            } = val_vk;
            val.graphics_pipeline_library |= graphics_pipeline_library != 0;
        }
        if let Some(val_vk) = features_host_image_copy_ext_vk {
            let &vk::PhysicalDeviceHostImageCopyFeaturesEXT { host_image_copy, .. } = val_vk;
            val.host_image_copy |= host_image_copy != 0;
        }
        if let Some(val_vk) = features_image2_d_view_of3_d_ext_vk {
            let &vk::PhysicalDeviceImage2DViewOf3DFeaturesEXT {
                image2_d_view_of3_d,
                sampler2_d_view_of3_d,
                ..
            } = val_vk;
            val.image2_d_view_of3_d |= image2_d_view_of3_d != 0;
            val.sampler2_d_view_of3_d |= sampler2_d_view_of3_d != 0;
        }
        if let Some(val_vk) = features_image_compression_control_ext_vk {
            let &vk::PhysicalDeviceImageCompressionControlFeaturesEXT {
                image_compression_control,
                ..
            } = val_vk;
            val.image_compression_control |= image_compression_control != 0;
        }
        if let Some(val_vk) = features_image_compression_control_swapchain_ext_vk {
            let &vk::PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
                image_compression_control_swapchain,
                ..
            } = val_vk;
            val.image_compression_control_swapchain
                |= image_compression_control_swapchain != 0;
        }
        if let Some(val_vk) = features_image_sliced_view_of3_d_ext_vk {
            let &vk::PhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
                image_sliced_view_of3_d,
                ..
            } = val_vk;
            val.image_sliced_view_of3_d |= image_sliced_view_of3_d != 0;
        }
        if let Some(val_vk) = features_image_view_min_lod_ext_vk {
            let &vk::PhysicalDeviceImageViewMinLodFeaturesEXT { min_lod, .. } = val_vk;
            val.min_lod |= min_lod != 0;
        }
        if let Some(val_vk) = features_legacy_dithering_ext_vk {
            let &vk::PhysicalDeviceLegacyDitheringFeaturesEXT { legacy_dithering, .. } = val_vk;
            val.legacy_dithering |= legacy_dithering != 0;
        }
        if let Some(val_vk) = features_map_memory_placed_ext_vk {
            let &vk::PhysicalDeviceMapMemoryPlacedFeaturesEXT {
                memory_map_placed,
                memory_map_range_placed,
                memory_unmap_reserve,
                ..
            } = val_vk;
            val.memory_map_placed |= memory_map_placed != 0;
            val.memory_map_range_placed |= memory_map_range_placed != 0;
            val.memory_unmap_reserve |= memory_unmap_reserve != 0;
        }
        if let Some(val_vk) = features_memory_priority_ext_vk {
            let &vk::PhysicalDeviceMemoryPriorityFeaturesEXT { memory_priority, .. } = val_vk;
            val.memory_priority |= memory_priority != 0;
        }
        if let Some(val_vk) = features_mesh_shader_ext_vk {
            let &vk::PhysicalDeviceMeshShaderFeaturesEXT {
                task_shader,
                mesh_shader,
                multiview_mesh_shader,
                primitive_fragment_shading_rate_mesh_shader,
                mesh_shader_queries,
                ..
            } = val_vk;
            val.task_shader |= task_shader != 0;
            val.mesh_shader |= mesh_shader != 0;
            val.multiview_mesh_shader |= multiview_mesh_shader != 0;
            val.primitive_fragment_shading_rate_mesh_shader
                |= primitive_fragment_shading_rate_mesh_shader != 0;
            val.mesh_shader_queries |= mesh_shader_queries != 0;
        }
        if let Some(val_vk) = features_multi_draw_ext_vk {
            let &vk::PhysicalDeviceMultiDrawFeaturesEXT { multi_draw, .. } = val_vk;
            val.multi_draw |= multi_draw != 0;
        }
        if let Some(val_vk) = features_multisampled_render_to_single_sampled_ext_vk {
            let &vk::PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
                multisampled_render_to_single_sampled,
                ..
            } = val_vk;
            val.multisampled_render_to_single_sampled
                |= multisampled_render_to_single_sampled != 0;
        }
        if let Some(val_vk) = features_mutable_descriptor_type_ext_vk {
            let &vk::PhysicalDeviceMutableDescriptorTypeFeaturesEXT {
                mutable_descriptor_type,
                ..
            } = val_vk;
            val.mutable_descriptor_type |= mutable_descriptor_type != 0;
        }
        if let Some(val_vk) = features_nested_command_buffer_ext_vk {
            let &vk::PhysicalDeviceNestedCommandBufferFeaturesEXT {
                nested_command_buffer,
                nested_command_buffer_rendering,
                nested_command_buffer_simultaneous_use,
                ..
            } = val_vk;
            val.nested_command_buffer |= nested_command_buffer != 0;
            val.nested_command_buffer_rendering |= nested_command_buffer_rendering != 0;
            val.nested_command_buffer_simultaneous_use
                |= nested_command_buffer_simultaneous_use != 0;
        }
        if let Some(val_vk) = features_non_seamless_cube_map_ext_vk {
            let &vk::PhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
                non_seamless_cube_map,
                ..
            } = val_vk;
            val.non_seamless_cube_map |= non_seamless_cube_map != 0;
        }
        if let Some(val_vk) = features_opacity_micromap_ext_vk {
            let &vk::PhysicalDeviceOpacityMicromapFeaturesEXT {
                micromap,
                micromap_capture_replay,
                micromap_host_commands,
                ..
            } = val_vk;
            val.micromap |= micromap != 0;
            val.micromap_capture_replay |= micromap_capture_replay != 0;
            val.micromap_host_commands |= micromap_host_commands != 0;
        }
        if let Some(val_vk) = features_pageable_device_local_memory_ext_vk {
            let &vk::PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
                pageable_device_local_memory,
                ..
            } = val_vk;
            val.pageable_device_local_memory |= pageable_device_local_memory != 0;
        }
        if let Some(val_vk) = features_pipeline_library_group_handles_ext_vk {
            let &vk::PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
                pipeline_library_group_handles,
                ..
            } = val_vk;
            val.pipeline_library_group_handles |= pipeline_library_group_handles != 0;
        }
        if let Some(val_vk) = features_pipeline_properties_ext_vk {
            let &vk::PhysicalDevicePipelinePropertiesFeaturesEXT {
                pipeline_properties_identifier,
                ..
            } = val_vk;
            val.pipeline_properties_identifier |= pipeline_properties_identifier != 0;
        }
        if let Some(val_vk) = features_pipeline_protected_access_ext_vk {
            let &vk::PhysicalDevicePipelineProtectedAccessFeaturesEXT {
                pipeline_protected_access,
                ..
            } = val_vk;
            val.pipeline_protected_access |= pipeline_protected_access != 0;
        }
        if let Some(val_vk) = features_pipeline_robustness_ext_vk {
            let &vk::PhysicalDevicePipelineRobustnessFeaturesEXT {
                pipeline_robustness,
                ..
            } = val_vk;
            val.pipeline_robustness |= pipeline_robustness != 0;
        }
        if let Some(val_vk) = features_primitive_topology_list_restart_ext_vk {
            let &vk::PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
                primitive_topology_list_restart,
                primitive_topology_patch_list_restart,
                ..
            } = val_vk;
            val.primitive_topology_list_restart |= primitive_topology_list_restart != 0;
            val.primitive_topology_patch_list_restart
                |= primitive_topology_patch_list_restart != 0;
        }
        if let Some(val_vk) = features_primitives_generated_query_ext_vk {
            let &vk::PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
                primitives_generated_query,
                primitives_generated_query_with_rasterizer_discard,
                primitives_generated_query_with_non_zero_streams,
                ..
            } = val_vk;
            val.primitives_generated_query |= primitives_generated_query != 0;
            val.primitives_generated_query_with_rasterizer_discard
                |= primitives_generated_query_with_rasterizer_discard != 0;
            val.primitives_generated_query_with_non_zero_streams
                |= primitives_generated_query_with_non_zero_streams != 0;
        }
        if let Some(val_vk) = features_provoking_vertex_ext_vk {
            let &vk::PhysicalDeviceProvokingVertexFeaturesEXT {
                provoking_vertex_last,
                transform_feedback_preserves_provoking_vertex,
                ..
            } = val_vk;
            val.provoking_vertex_last |= provoking_vertex_last != 0;
            val.transform_feedback_preserves_provoking_vertex
                |= transform_feedback_preserves_provoking_vertex != 0;
        }
        if let Some(val_vk) = features_rgba10x6_formats_ext_vk {
            let &vk::PhysicalDeviceRGBA10X6FormatsFeaturesEXT {
                format_rgba10x6_without_y_cb_cr_sampler,
                ..
            } = val_vk;
            val.format_rgba10x6_without_y_cb_cr_sampler
                |= format_rgba10x6_without_y_cb_cr_sampler != 0;
        }
        if let Some(val_vk) = features_rasterization_order_attachment_access_ext_vk {
            let &vk::PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
                rasterization_order_color_attachment_access,
                rasterization_order_depth_attachment_access,
                rasterization_order_stencil_attachment_access,
                ..
            } = val_vk;
            val.rasterization_order_color_attachment_access
                |= rasterization_order_color_attachment_access != 0;
            val.rasterization_order_depth_attachment_access
                |= rasterization_order_depth_attachment_access != 0;
            val.rasterization_order_stencil_attachment_access
                |= rasterization_order_stencil_attachment_access != 0;
        }
        if let Some(val_vk) = features_robustness2_ext_vk {
            let &vk::PhysicalDeviceRobustness2FeaturesEXT {
                robust_buffer_access2,
                robust_image_access2,
                null_descriptor,
                ..
            } = val_vk;
            val.robust_buffer_access2 |= robust_buffer_access2 != 0;
            val.robust_image_access2 |= robust_image_access2 != 0;
            val.null_descriptor |= null_descriptor != 0;
        }
        if let Some(val_vk) = features_shader_atomic_float2_ext_vk {
            let &vk::PhysicalDeviceShaderAtomicFloat2FeaturesEXT {
                shader_buffer_float16_atomics,
                shader_buffer_float16_atomic_add,
                shader_buffer_float16_atomic_min_max,
                shader_buffer_float32_atomic_min_max,
                shader_buffer_float64_atomic_min_max,
                shader_shared_float16_atomics,
                shader_shared_float16_atomic_add,
                shader_shared_float16_atomic_min_max,
                shader_shared_float32_atomic_min_max,
                shader_shared_float64_atomic_min_max,
                shader_image_float32_atomic_min_max,
                sparse_image_float32_atomic_min_max,
                ..
            } = val_vk;
            val.shader_buffer_float16_atomics |= shader_buffer_float16_atomics != 0;
            val.shader_buffer_float16_atomic_add
                |= shader_buffer_float16_atomic_add != 0;
            val.shader_buffer_float16_atomic_min_max
                |= shader_buffer_float16_atomic_min_max != 0;
            val.shader_buffer_float32_atomic_min_max
                |= shader_buffer_float32_atomic_min_max != 0;
            val.shader_buffer_float64_atomic_min_max
                |= shader_buffer_float64_atomic_min_max != 0;
            val.shader_shared_float16_atomics |= shader_shared_float16_atomics != 0;
            val.shader_shared_float16_atomic_add
                |= shader_shared_float16_atomic_add != 0;
            val.shader_shared_float16_atomic_min_max
                |= shader_shared_float16_atomic_min_max != 0;
            val.shader_shared_float32_atomic_min_max
                |= shader_shared_float32_atomic_min_max != 0;
            val.shader_shared_float64_atomic_min_max
                |= shader_shared_float64_atomic_min_max != 0;
            val.shader_image_float32_atomic_min_max
                |= shader_image_float32_atomic_min_max != 0;
            val.sparse_image_float32_atomic_min_max
                |= sparse_image_float32_atomic_min_max != 0;
        }
        if let Some(val_vk) = features_shader_atomic_float_ext_vk {
            let &vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT {
                shader_buffer_float32_atomics,
                shader_buffer_float32_atomic_add,
                shader_buffer_float64_atomics,
                shader_buffer_float64_atomic_add,
                shader_shared_float32_atomics,
                shader_shared_float32_atomic_add,
                shader_shared_float64_atomics,
                shader_shared_float64_atomic_add,
                shader_image_float32_atomics,
                shader_image_float32_atomic_add,
                sparse_image_float32_atomics,
                sparse_image_float32_atomic_add,
                ..
            } = val_vk;
            val.shader_buffer_float32_atomics |= shader_buffer_float32_atomics != 0;
            val.shader_buffer_float32_atomic_add
                |= shader_buffer_float32_atomic_add != 0;
            val.shader_buffer_float64_atomics |= shader_buffer_float64_atomics != 0;
            val.shader_buffer_float64_atomic_add
                |= shader_buffer_float64_atomic_add != 0;
            val.shader_shared_float32_atomics |= shader_shared_float32_atomics != 0;
            val.shader_shared_float32_atomic_add
                |= shader_shared_float32_atomic_add != 0;
            val.shader_shared_float64_atomics |= shader_shared_float64_atomics != 0;
            val.shader_shared_float64_atomic_add
                |= shader_shared_float64_atomic_add != 0;
            val.shader_image_float32_atomics |= shader_image_float32_atomics != 0;
            val.shader_image_float32_atomic_add |= shader_image_float32_atomic_add != 0;
            val.sparse_image_float32_atomics |= sparse_image_float32_atomics != 0;
            val.sparse_image_float32_atomic_add |= sparse_image_float32_atomic_add != 0;
        }
        if let Some(val_vk) = features_shader_image_atomic_int64_ext_vk {
            let &vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
                shader_image_int64_atomics,
                sparse_image_int64_atomics,
                ..
            } = val_vk;
            val.shader_image_int64_atomics |= shader_image_int64_atomics != 0;
            val.sparse_image_int64_atomics |= sparse_image_int64_atomics != 0;
        }
        if let Some(val_vk) = features_shader_module_identifier_ext_vk {
            let &vk::PhysicalDeviceShaderModuleIdentifierFeaturesEXT {
                shader_module_identifier,
                ..
            } = val_vk;
            val.shader_module_identifier |= shader_module_identifier != 0;
        }
        if let Some(val_vk) = features_shader_object_ext_vk {
            let &vk::PhysicalDeviceShaderObjectFeaturesEXT { shader_object, .. } = val_vk;
            val.shader_object |= shader_object != 0;
        }
        if let Some(val_vk) = features_shader_tile_image_ext_vk {
            let &vk::PhysicalDeviceShaderTileImageFeaturesEXT {
                shader_tile_image_color_read_access,
                shader_tile_image_depth_read_access,
                shader_tile_image_stencil_read_access,
                ..
            } = val_vk;
            val.shader_tile_image_color_read_access
                |= shader_tile_image_color_read_access != 0;
            val.shader_tile_image_depth_read_access
                |= shader_tile_image_depth_read_access != 0;
            val.shader_tile_image_stencil_read_access
                |= shader_tile_image_stencil_read_access != 0;
        }
        if let Some(val_vk) = features_subpass_merge_feedback_ext_vk {
            let &vk::PhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
                subpass_merge_feedback,
                ..
            } = val_vk;
            val.subpass_merge_feedback |= subpass_merge_feedback != 0;
        }
        if let Some(val_vk) = features_swapchain_maintenance1_ext_vk {
            let &vk::PhysicalDeviceSwapchainMaintenance1FeaturesEXT {
                swapchain_maintenance1,
                ..
            } = val_vk;
            val.swapchain_maintenance1 |= swapchain_maintenance1 != 0;
        }
        if let Some(val_vk) = features_texel_buffer_alignment_ext_vk {
            let &vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
                texel_buffer_alignment,
                ..
            } = val_vk;
            val.texel_buffer_alignment |= texel_buffer_alignment != 0;
        }
        if let Some(val_vk) = features_transform_feedback_ext_vk {
            let &vk::PhysicalDeviceTransformFeedbackFeaturesEXT {
                transform_feedback,
                geometry_streams,
                ..
            } = val_vk;
            val.transform_feedback |= transform_feedback != 0;
            val.geometry_streams |= geometry_streams != 0;
        }
        if let Some(val_vk) = features_vertex_input_dynamic_state_ext_vk {
            let &vk::PhysicalDeviceVertexInputDynamicStateFeaturesEXT {
                vertex_input_dynamic_state,
                ..
            } = val_vk;
            val.vertex_input_dynamic_state |= vertex_input_dynamic_state != 0;
        }
        if let Some(val_vk) = features_ycbcr2_plane444_formats_ext_vk {
            let &vk::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
                ycbcr2plane444_formats,
                ..
            } = val_vk;
            val.ycbcr2plane444_formats |= ycbcr2plane444_formats != 0;
        }
        if let Some(val_vk) = features_ycbcr_image_arrays_ext_vk {
            let &vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT {
                ycbcr_image_arrays,
                ..
            } = val_vk;
            val.ycbcr_image_arrays |= ycbcr_image_arrays != 0;
        }
        if let Some(val_vk) = features_amigo_profiling_sec_vk {
            let &vk::PhysicalDeviceAmigoProfilingFeaturesSEC { amigo_profiling, .. } = val_vk;
            val.amigo_profiling |= amigo_profiling != 0;
        }
        if let Some(val_vk) = features_cluster_culling_shader_huawei_vk {
            let &vk::PhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
                clusterculling_shader,
                multiview_cluster_culling_shader,
                ..
            } = val_vk;
            val.clusterculling_shader |= clusterculling_shader != 0;
            val.multiview_cluster_culling_shader
                |= multiview_cluster_culling_shader != 0;
        }
        if let Some(val_vk) = features_coherent_memory_amd_vk {
            let &vk::PhysicalDeviceCoherentMemoryFeaturesAMD {
                device_coherent_memory,
                ..
            } = val_vk;
            val.device_coherent_memory |= device_coherent_memory != 0;
        }
        if let Some(val_vk) = features_compute_shader_derivatives_nv_vk {
            let &vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV {
                compute_derivative_group_quads,
                compute_derivative_group_linear,
                ..
            } = val_vk;
            val.compute_derivative_group_quads |= compute_derivative_group_quads != 0;
            val.compute_derivative_group_linear |= compute_derivative_group_linear != 0;
        }
        if let Some(val_vk) = features_cooperative_matrix_nv_vk {
            let &vk::PhysicalDeviceCooperativeMatrixFeaturesNV {
                cooperative_matrix,
                cooperative_matrix_robust_buffer_access,
                ..
            } = val_vk;
            val.cooperative_matrix |= cooperative_matrix != 0;
            val.cooperative_matrix_robust_buffer_access
                |= cooperative_matrix_robust_buffer_access != 0;
        }
        if let Some(val_vk) = features_copy_memory_indirect_nv_vk {
            let &vk::PhysicalDeviceCopyMemoryIndirectFeaturesNV { indirect_copy, .. } = val_vk;
            val.indirect_copy |= indirect_copy != 0;
        }
        if let Some(val_vk) = features_corner_sampled_image_nv_vk {
            let &vk::PhysicalDeviceCornerSampledImageFeaturesNV {
                corner_sampled_image,
                ..
            } = val_vk;
            val.corner_sampled_image |= corner_sampled_image != 0;
        }
        if let Some(val_vk) = features_coverage_reduction_mode_nv_vk {
            let &vk::PhysicalDeviceCoverageReductionModeFeaturesNV {
                coverage_reduction_mode,
                ..
            } = val_vk;
            val.coverage_reduction_mode |= coverage_reduction_mode != 0;
        }
        if let Some(val_vk) = features_cubic_clamp_qcom_vk {
            let &vk::PhysicalDeviceCubicClampFeaturesQCOM { cubic_range_clamp, .. } = val_vk;
            val.cubic_range_clamp |= cubic_range_clamp != 0;
        }
        if let Some(val_vk) = features_cubic_weights_qcom_vk {
            let &vk::PhysicalDeviceCubicWeightsFeaturesQCOM {
                selectable_cubic_weights,
                ..
            } = val_vk;
            val.selectable_cubic_weights |= selectable_cubic_weights != 0;
        }
        if let Some(val_vk) = features_cuda_kernel_launch_nv_vk {
            let &vk::PhysicalDeviceCudaKernelLaunchFeaturesNV {
                cuda_kernel_launch_features,
                ..
            } = val_vk;
            val.cuda_kernel_launch_features |= cuda_kernel_launch_features != 0;
        }
        if let Some(val_vk) = features_dedicated_allocation_image_aliasing_nv_vk {
            let &vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
                dedicated_allocation_image_aliasing,
                ..
            } = val_vk;
            val.dedicated_allocation_image_aliasing
                |= dedicated_allocation_image_aliasing != 0;
        }
        if let Some(val_vk) = features_descriptor_pool_overallocation_nv_vk {
            let &vk::PhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
                descriptor_pool_overallocation,
                ..
            } = val_vk;
            val.descriptor_pool_overallocation |= descriptor_pool_overallocation != 0;
        }
        if let Some(val_vk) = features_descriptor_set_host_mapping_valve_vk {
            let &vk::PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
                descriptor_set_host_mapping,
                ..
            } = val_vk;
            val.descriptor_set_host_mapping |= descriptor_set_host_mapping != 0;
        }
        if let Some(val_vk) = features_device_generated_commands_compute_nv_vk {
            let &vk::PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
                device_generated_compute,
                device_generated_compute_pipelines,
                device_generated_compute_capture_replay,
                ..
            } = val_vk;
            val.device_generated_compute |= device_generated_compute != 0;
            val.device_generated_compute_pipelines
                |= device_generated_compute_pipelines != 0;
            val.device_generated_compute_capture_replay
                |= device_generated_compute_capture_replay != 0;
        }
        if let Some(val_vk) = features_device_generated_commands_nv_vk {
            let &vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
                device_generated_commands,
                ..
            } = val_vk;
            val.device_generated_commands |= device_generated_commands != 0;
        }
        if let Some(val_vk) = features_diagnostics_config_nv_vk {
            let &vk::PhysicalDeviceDiagnosticsConfigFeaturesNV {
                diagnostics_config,
                ..
            } = val_vk;
            val.diagnostics_config |= diagnostics_config != 0;
        }
        if let Some(val_vk) = features_displacement_micromap_nv_vk {
            let &vk::PhysicalDeviceDisplacementMicromapFeaturesNV {
                displacement_micromap,
                ..
            } = val_vk;
            val.displacement_micromap |= displacement_micromap != 0;
        }
        if let Some(val_vk) = features_exclusive_scissor_nv_vk {
            let &vk::PhysicalDeviceExclusiveScissorFeaturesNV {
                exclusive_scissor,
                ..
            } = val_vk;
            val.exclusive_scissor |= exclusive_scissor != 0;
        }
        if let Some(val_vk) = features_extended_sparse_address_space_nv_vk {
            let &vk::PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
                extended_sparse_address_space,
                ..
            } = val_vk;
            val.extended_sparse_address_space |= extended_sparse_address_space != 0;
        }
        if let Some(val_vk) = features_external_format_resolve_android_vk {
            let &vk::PhysicalDeviceExternalFormatResolveFeaturesANDROID {
                external_format_resolve,
                ..
            } = val_vk;
            val.external_format_resolve |= external_format_resolve != 0;
        }
        if let Some(val_vk) = features_external_memory_rdma_nv_vk {
            let &vk::PhysicalDeviceExternalMemoryRDMAFeaturesNV {
                external_memory_rdma,
                ..
            } = val_vk;
            val.external_memory_rdma |= external_memory_rdma != 0;
        }
        if let Some(val_vk) = features_external_memory_screen_buffer_qnx_vk {
            let &vk::PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX {
                screen_buffer_import,
                ..
            } = val_vk;
            val.screen_buffer_import |= screen_buffer_import != 0;
        }
        if let Some(val_vk) = features_fragment_density_map_offset_qcom_vk {
            let &vk::PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
                fragment_density_map_offset,
                ..
            } = val_vk;
            val.fragment_density_map_offset |= fragment_density_map_offset != 0;
        }
        if let Some(val_vk) = features_fragment_shading_rate_enums_nv_vk {
            let &vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
                fragment_shading_rate_enums,
                supersample_fragment_shading_rates,
                no_invocation_fragment_shading_rates,
                ..
            } = val_vk;
            val.fragment_shading_rate_enums |= fragment_shading_rate_enums != 0;
            val.supersample_fragment_shading_rates
                |= supersample_fragment_shading_rates != 0;
            val.no_invocation_fragment_shading_rates
                |= no_invocation_fragment_shading_rates != 0;
        }
        if let Some(val_vk) = features_image_processing2_qcom_vk {
            let &vk::PhysicalDeviceImageProcessing2FeaturesQCOM {
                texture_block_match2,
                ..
            } = val_vk;
            val.texture_block_match2 |= texture_block_match2 != 0;
        }
        if let Some(val_vk) = features_image_processing_qcom_vk {
            let &vk::PhysicalDeviceImageProcessingFeaturesQCOM {
                texture_sample_weighted,
                texture_box_filter,
                texture_block_match,
                ..
            } = val_vk;
            val.texture_sample_weighted |= texture_sample_weighted != 0;
            val.texture_box_filter |= texture_box_filter != 0;
            val.texture_block_match |= texture_block_match != 0;
        }
        if let Some(val_vk) = features_inherited_viewport_scissor_nv_vk {
            let &vk::PhysicalDeviceInheritedViewportScissorFeaturesNV {
                inherited_viewport_scissor2_d,
                ..
            } = val_vk;
            val.inherited_viewport_scissor2_d |= inherited_viewport_scissor2_d != 0;
        }
        if let Some(val_vk) = features_invocation_mask_huawei_vk {
            let &vk::PhysicalDeviceInvocationMaskFeaturesHUAWEI {
                invocation_mask,
                ..
            } = val_vk;
            val.invocation_mask |= invocation_mask != 0;
        }
        if let Some(val_vk) = features_linear_color_attachment_nv_vk {
            let &vk::PhysicalDeviceLinearColorAttachmentFeaturesNV {
                linear_color_attachment,
                ..
            } = val_vk;
            val.linear_color_attachment |= linear_color_attachment != 0;
        }
        if let Some(val_vk) = features_memory_decompression_nv_vk {
            let &vk::PhysicalDeviceMemoryDecompressionFeaturesNV {
                memory_decompression,
                ..
            } = val_vk;
            val.memory_decompression |= memory_decompression != 0;
        }
        if let Some(val_vk) = features_mesh_shader_nv_vk {
            let &vk::PhysicalDeviceMeshShaderFeaturesNV {
                task_shader,
                mesh_shader,
                ..
            } = val_vk;
            val.task_shader |= task_shader != 0;
            val.mesh_shader |= mesh_shader != 0;
        }
        if let Some(val_vk) = features_multiview_per_view_render_areas_qcom_vk {
            let &vk::PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
                multiview_per_view_render_areas,
                ..
            } = val_vk;
            val.multiview_per_view_render_areas |= multiview_per_view_render_areas != 0;
        }
        if let Some(val_vk) = features_multiview_per_view_viewports_qcom_vk {
            let &vk::PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
                multiview_per_view_viewports,
                ..
            } = val_vk;
            val.multiview_per_view_viewports |= multiview_per_view_viewports != 0;
        }
        if let Some(val_vk) = features_optical_flow_nv_vk {
            let &vk::PhysicalDeviceOpticalFlowFeaturesNV { optical_flow, .. } = val_vk;
            val.optical_flow |= optical_flow != 0;
        }
        if let Some(val_vk) = features_per_stage_descriptor_set_nv_vk {
            let &vk::PhysicalDevicePerStageDescriptorSetFeaturesNV {
                per_stage_descriptor_set,
                dynamic_pipeline_layout,
                ..
            } = val_vk;
            val.per_stage_descriptor_set |= per_stage_descriptor_set != 0;
            val.dynamic_pipeline_layout |= dynamic_pipeline_layout != 0;
        }
        if let Some(val_vk) = features_present_barrier_nv_vk {
            let &vk::PhysicalDevicePresentBarrierFeaturesNV { present_barrier, .. } = val_vk;
            val.present_barrier |= present_barrier != 0;
        }
        if let Some(val_vk) = features_raw_access_chains_nv_vk {
            let &vk::PhysicalDeviceRawAccessChainsFeaturesNV {
                shader_raw_access_chains,
                ..
            } = val_vk;
            val.shader_raw_access_chains |= shader_raw_access_chains != 0;
        }
        if let Some(val_vk) = features_ray_tracing_invocation_reorder_nv_vk {
            let &vk::PhysicalDeviceRayTracingInvocationReorderFeaturesNV {
                ray_tracing_invocation_reorder,
                ..
            } = val_vk;
            val.ray_tracing_invocation_reorder |= ray_tracing_invocation_reorder != 0;
        }
        if let Some(val_vk) = features_ray_tracing_motion_blur_nv_vk {
            let &vk::PhysicalDeviceRayTracingMotionBlurFeaturesNV {
                ray_tracing_motion_blur,
                ray_tracing_motion_blur_pipeline_trace_rays_indirect,
                ..
            } = val_vk;
            val.ray_tracing_motion_blur |= ray_tracing_motion_blur != 0;
            val.ray_tracing_motion_blur_pipeline_trace_rays_indirect
                |= ray_tracing_motion_blur_pipeline_trace_rays_indirect != 0;
        }
        if let Some(val_vk) = features_ray_tracing_validation_nv_vk {
            let &vk::PhysicalDeviceRayTracingValidationFeaturesNV {
                ray_tracing_validation,
                ..
            } = val_vk;
            val.ray_tracing_validation |= ray_tracing_validation != 0;
        }
        if let Some(val_vk) = features_relaxed_line_rasterization_img_vk {
            let &vk::PhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
                relaxed_line_rasterization,
                ..
            } = val_vk;
            val.relaxed_line_rasterization |= relaxed_line_rasterization != 0;
        }
        if let Some(val_vk) = features_render_pass_striped_arm_vk {
            let &vk::PhysicalDeviceRenderPassStripedFeaturesARM {
                render_pass_striped,
                ..
            } = val_vk;
            val.render_pass_striped |= render_pass_striped != 0;
        }
        if let Some(val_vk) = features_representative_fragment_test_nv_vk {
            let &vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
                representative_fragment_test,
                ..
            } = val_vk;
            val.representative_fragment_test |= representative_fragment_test != 0;
        }
        if let Some(val_vk) = features_scheduling_controls_arm_vk {
            let &vk::PhysicalDeviceSchedulingControlsFeaturesARM {
                scheduling_controls,
                ..
            } = val_vk;
            val.scheduling_controls |= scheduling_controls != 0;
        }
        if let Some(val_vk) = features_shader_atomic_float16_vector_nv_vk {
            let &vk::PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
                shader_float16_vector_atomics,
                ..
            } = val_vk;
            val.shader_float16_vector_atomics |= shader_float16_vector_atomics != 0;
        }
        if let Some(val_vk) = features_shader_core_builtins_arm_vk {
            let &vk::PhysicalDeviceShaderCoreBuiltinsFeaturesARM {
                shader_core_builtins,
                ..
            } = val_vk;
            val.shader_core_builtins |= shader_core_builtins != 0;
        }
        if let Some(val_vk) = features_shader_early_and_late_fragment_tests_amd_vk {
            let &vk::PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
                shader_early_and_late_fragment_tests,
                ..
            } = val_vk;
            val.shader_early_and_late_fragment_tests
                |= shader_early_and_late_fragment_tests != 0;
        }
        if let Some(val_vk) = features_shader_enqueue_amdx_vk {
            let &vk::PhysicalDeviceShaderEnqueueFeaturesAMDX { shader_enqueue, .. } = val_vk;
            val.shader_enqueue |= shader_enqueue != 0;
        }
        if let Some(val_vk) = features_shader_image_footprint_nv_vk {
            let &vk::PhysicalDeviceShaderImageFootprintFeaturesNV {
                image_footprint,
                ..
            } = val_vk;
            val.image_footprint |= image_footprint != 0;
        }
        if let Some(val_vk) = features_shader_integer_functions2_intel_vk {
            let &vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
                shader_integer_functions2,
                ..
            } = val_vk;
            val.shader_integer_functions2 |= shader_integer_functions2 != 0;
        }
        if let Some(val_vk) = features_shader_sm_builtins_nv_vk {
            let &vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV {
                shader_sm_builtins,
                ..
            } = val_vk;
            val.shader_sm_builtins |= shader_sm_builtins != 0;
        }
        if let Some(val_vk) = features_shading_rate_image_nv_vk {
            let &vk::PhysicalDeviceShadingRateImageFeaturesNV {
                shading_rate_image,
                shading_rate_coarse_sample_order,
                ..
            } = val_vk;
            val.shading_rate_image |= shading_rate_image != 0;
            val.shading_rate_coarse_sample_order
                |= shading_rate_coarse_sample_order != 0;
        }
        if let Some(val_vk) = features_subpass_shading_huawei_vk {
            let &vk::PhysicalDeviceSubpassShadingFeaturesHUAWEI {
                subpass_shading,
                ..
            } = val_vk;
            val.subpass_shading |= subpass_shading != 0;
        }
        if let Some(val_vk) = features_tile_properties_qcom_vk {
            let &vk::PhysicalDeviceTilePropertiesFeaturesQCOM { tile_properties, .. } = val_vk;
            val.tile_properties |= tile_properties != 0;
        }
        if let Some(val_vk) = features_ycbcr_degamma_qcom_vk {
            let &vk::PhysicalDeviceYcbcrDegammaFeaturesQCOM { ycbcr_degamma, .. } = val_vk;
            val.ycbcr_degamma |= ycbcr_degamma != 0;
        }
        val
    }
    #[allow(clippy::wrong_self_convention)]
    pub(crate) fn to_vk2<'a>(
        &self,
        extensions_vk: &'a mut PhysicalDeviceFeatures2ExtensionsVk,
    ) -> vk::PhysicalDeviceFeatures2<'a> {
        let mut val_vk = vk::PhysicalDeviceFeatures2::default()
            .features(
                vk::PhysicalDeviceFeatures::default()
                    .alpha_to_one(self.alpha_to_one)
                    .depth_bias_clamp(self.depth_bias_clamp)
                    .depth_bounds(self.depth_bounds)
                    .depth_clamp(self.depth_clamp)
                    .draw_indirect_first_instance(self.draw_indirect_first_instance)
                    .dual_src_blend(self.dual_src_blend)
                    .fill_mode_non_solid(self.fill_mode_non_solid)
                    .fragment_stores_and_atomics(self.fragment_stores_and_atomics)
                    .full_draw_index_uint32(self.full_draw_index_uint32)
                    .geometry_shader(self.geometry_shader)
                    .image_cube_array(self.image_cube_array)
                    .independent_blend(self.independent_blend)
                    .inherited_queries(self.inherited_queries)
                    .large_points(self.large_points)
                    .logic_op(self.logic_op)
                    .multi_draw_indirect(self.multi_draw_indirect)
                    .multi_viewport(self.multi_viewport)
                    .occlusion_query_precise(self.occlusion_query_precise)
                    .pipeline_statistics_query(self.pipeline_statistics_query)
                    .robust_buffer_access(self.robust_buffer_access)
                    .sample_rate_shading(self.sample_rate_shading)
                    .sampler_anisotropy(self.sampler_anisotropy)
                    .shader_clip_distance(self.shader_clip_distance)
                    .shader_cull_distance(self.shader_cull_distance)
                    .shader_float64(self.shader_float64)
                    .shader_image_gather_extended(self.shader_image_gather_extended)
                    .shader_int16(self.shader_int16)
                    .shader_int64(self.shader_int64)
                    .shader_resource_min_lod(self.shader_resource_min_lod)
                    .shader_resource_residency(self.shader_resource_residency)
                    .shader_sampled_image_array_dynamic_indexing(
                        self.shader_sampled_image_array_dynamic_indexing,
                    )
                    .shader_storage_buffer_array_dynamic_indexing(
                        self.shader_storage_buffer_array_dynamic_indexing,
                    )
                    .shader_storage_image_array_dynamic_indexing(
                        self.shader_storage_image_array_dynamic_indexing,
                    )
                    .shader_storage_image_extended_formats(
                        self.shader_storage_image_extended_formats,
                    )
                    .shader_storage_image_multisample(
                        self.shader_storage_image_multisample,
                    )
                    .shader_storage_image_read_without_format(
                        self.shader_storage_image_read_without_format,
                    )
                    .shader_storage_image_write_without_format(
                        self.shader_storage_image_write_without_format,
                    )
                    .shader_tessellation_and_geometry_point_size(
                        self.shader_tessellation_and_geometry_point_size,
                    )
                    .shader_uniform_buffer_array_dynamic_indexing(
                        self.shader_uniform_buffer_array_dynamic_indexing,
                    )
                    .sparse_binding(self.sparse_binding)
                    .sparse_residency16_samples(self.sparse_residency16_samples)
                    .sparse_residency2_samples(self.sparse_residency2_samples)
                    .sparse_residency4_samples(self.sparse_residency4_samples)
                    .sparse_residency8_samples(self.sparse_residency8_samples)
                    .sparse_residency_aliased(self.sparse_residency_aliased)
                    .sparse_residency_buffer(self.sparse_residency_buffer)
                    .sparse_residency_image2_d(self.sparse_residency_image2_d)
                    .sparse_residency_image3_d(self.sparse_residency_image3_d)
                    .tessellation_shader(self.tessellation_shader)
                    .texture_compression_astc_ldr(self.texture_compression_astc_ldr)
                    .texture_compression_bc(self.texture_compression_bc)
                    .texture_compression_etc2(self.texture_compression_etc2)
                    .variable_multisample_rate(self.variable_multisample_rate)
                    .vertex_pipeline_stores_and_atomics(
                        self.vertex_pipeline_stores_and_atomics,
                    )
                    .wide_lines(self.wide_lines),
            );
        if let Some(next) = &mut extensions_vk.features_vulkan11_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan12_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan13_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_16bit_storage_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_multiview_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_protected_memory_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_sampler_ycbcr_conversion_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_draw_parameters_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_variable_pointers_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_8bit_storage_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_buffer_device_address_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_descriptor_indexing_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_host_query_reset_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_imageless_framebuffer_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_scalar_block_layout_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_separate_depth_stencil_layouts_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_int64_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_float16_int8_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_subgroup_extended_types_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_timeline_semaphore_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_uniform_buffer_standard_layout_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vulkan_memory_model_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_dynamic_rendering_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_robustness_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_inline_uniform_block_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance4_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_creation_cache_control_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_private_data_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_demote_to_helper_invocation_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_integer_dot_product_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_terminate_invocation_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subgroup_size_control_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_synchronization2_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_texture_compression_astchdr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_zero_initialize_workgroup_memory_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_acceleration_structure_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cooperative_matrix_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dynamic_rendering_local_read_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_fragment_shader_barycentric_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shading_rate_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_global_priority_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_index_type_uint8_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_line_rasterization_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance5_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_maintenance6_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_performance_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_executable_properties_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_portability_subset_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_id_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_wait_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_query_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_maintenance1_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_pipeline_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_position_fetch_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_clock_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_expect_assume_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_float_controls2_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_maximal_reconvergence_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_quad_control_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_subgroup_rotate_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_subgroup_uniform_control_flow_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vertex_attribute_divisor_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_video_maintenance1_khr_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_workgroup_memory_explicit_layout_khr_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_4444formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_astc_decode_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_address_binding_report_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_attachment_feedback_loop_dynamic_state_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_attachment_feedback_loop_layout_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_blend_operation_advanced_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_border_color_swizzle_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_buffer_device_address_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_color_write_enable_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_conditional_rendering_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_custom_border_color_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_bias_control_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clamp_zero_one_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clip_control_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_depth_clip_enable_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_descriptor_buffer_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_device_memory_report_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dynamic_rendering_unused_attachments_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state3_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_extended_dynamic_state_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fault_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_density_map2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_density_map_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shader_interlock_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_frame_boundary_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_graphics_pipeline_library_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_host_image_copy_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image2_d_view_of3_d_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_compression_control_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_image_compression_control_swapchain_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_sliced_view_of3_d_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_view_min_lod_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_legacy_dithering_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_map_memory_placed_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_memory_priority_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mesh_shader_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_multi_draw_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multisampled_render_to_single_sampled_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mutable_descriptor_type_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_nested_command_buffer_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_non_seamless_cube_map_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_opacity_micromap_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pageable_device_local_memory_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_pipeline_library_group_handles_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_properties_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_protected_access_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_pipeline_robustness_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_primitive_topology_list_restart_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_primitives_generated_query_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_provoking_vertex_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_rgba10x6_formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_rasterization_order_attachment_access_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_robustness2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_float2_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_atomic_float_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_image_atomic_int64_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_module_identifier_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_object_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_tile_image_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subpass_merge_feedback_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_swapchain_maintenance1_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_texel_buffer_alignment_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_transform_feedback_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_vertex_input_dynamic_state_ext_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr2_plane444_formats_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr_image_arrays_ext_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_amigo_profiling_sec_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cluster_culling_shader_huawei_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_coherent_memory_amd_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_compute_shader_derivatives_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cooperative_matrix_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_copy_memory_indirect_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_corner_sampled_image_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_coverage_reduction_mode_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cubic_clamp_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cubic_weights_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_cuda_kernel_launch_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_dedicated_allocation_image_aliasing_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_descriptor_pool_overallocation_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_descriptor_set_host_mapping_valve_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_device_generated_commands_compute_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_device_generated_commands_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_diagnostics_config_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_displacement_micromap_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_exclusive_scissor_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_extended_sparse_address_space_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_external_format_resolve_android_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_external_memory_rdma_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_external_memory_screen_buffer_qnx_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_fragment_density_map_offset_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_fragment_shading_rate_enums_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_processing2_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_image_processing_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_inherited_viewport_scissor_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_invocation_mask_huawei_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_linear_color_attachment_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_memory_decompression_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_mesh_shader_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multiview_per_view_render_areas_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_multiview_per_view_viewports_qcom_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_optical_flow_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_per_stage_descriptor_set_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_present_barrier_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_raw_access_chains_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_ray_tracing_invocation_reorder_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_motion_blur_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ray_tracing_validation_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_relaxed_line_rasterization_img_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_render_pass_striped_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_representative_fragment_test_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_scheduling_controls_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_atomic_float16_vector_nv_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_core_builtins_arm_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_early_and_late_fragment_tests_amd_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_enqueue_amdx_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_image_footprint_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk
            .features_shader_integer_functions2_intel_vk
        {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shader_sm_builtins_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_shading_rate_image_nv_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_subpass_shading_huawei_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_tile_properties_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        if let Some(next) = &mut extensions_vk.features_ycbcr_degamma_qcom_vk {
            val_vk = val_vk.push_next(next);
        }
        val_vk
    }
    #[allow(clippy::wrong_self_convention)]
    pub(crate) fn to_vk2_extensions(
        &self,
        api_version: Version,
        device_extensions: &DeviceExtensions,
        #[allow(unused)]
        instance_extensions: &InstanceExtensions,
    ) -> PhysicalDeviceFeatures2ExtensionsVk {
        PhysicalDeviceFeatures2ExtensionsVk {
            features_vulkan11_vk: (api_version >= Version::V1_2)
                .then(|| {
                    <vk::PhysicalDeviceVulkan11Features<'_>>::default()
                        .storage_buffer16_bit_access(self.storage_buffer16_bit_access)
                        .uniform_and_storage_buffer16_bit_access(
                            self.uniform_and_storage_buffer16_bit_access,
                        )
                        .storage_push_constant16(self.storage_push_constant16)
                        .storage_input_output16(self.storage_input_output16)
                        .multiview(self.multiview)
                        .multiview_geometry_shader(self.multiview_geometry_shader)
                        .multiview_tessellation_shader(
                            self.multiview_tessellation_shader,
                        )
                        .variable_pointers_storage_buffer(
                            self.variable_pointers_storage_buffer,
                        )
                        .variable_pointers(self.variable_pointers)
                        .protected_memory(self.protected_memory)
                        .sampler_ycbcr_conversion(self.sampler_ycbcr_conversion)
                        .shader_draw_parameters(self.shader_draw_parameters)
                }),
            features_vulkan12_vk: (api_version >= Version::V1_2)
                .then(|| {
                    <vk::PhysicalDeviceVulkan12Features<'_>>::default()
                        .sampler_mirror_clamp_to_edge(self.sampler_mirror_clamp_to_edge)
                        .draw_indirect_count(self.draw_indirect_count)
                        .storage_buffer8_bit_access(self.storage_buffer8_bit_access)
                        .uniform_and_storage_buffer8_bit_access(
                            self.uniform_and_storage_buffer8_bit_access,
                        )
                        .storage_push_constant8(self.storage_push_constant8)
                        .shader_buffer_int64_atomics(self.shader_buffer_int64_atomics)
                        .shader_shared_int64_atomics(self.shader_shared_int64_atomics)
                        .shader_float16(self.shader_float16)
                        .shader_int8(self.shader_int8)
                        .descriptor_indexing(self.descriptor_indexing)
                        .shader_input_attachment_array_dynamic_indexing(
                            self.shader_input_attachment_array_dynamic_indexing,
                        )
                        .shader_uniform_texel_buffer_array_dynamic_indexing(
                            self.shader_uniform_texel_buffer_array_dynamic_indexing,
                        )
                        .shader_storage_texel_buffer_array_dynamic_indexing(
                            self.shader_storage_texel_buffer_array_dynamic_indexing,
                        )
                        .shader_uniform_buffer_array_non_uniform_indexing(
                            self.shader_uniform_buffer_array_non_uniform_indexing,
                        )
                        .shader_sampled_image_array_non_uniform_indexing(
                            self.shader_sampled_image_array_non_uniform_indexing,
                        )
                        .shader_storage_buffer_array_non_uniform_indexing(
                            self.shader_storage_buffer_array_non_uniform_indexing,
                        )
                        .shader_storage_image_array_non_uniform_indexing(
                            self.shader_storage_image_array_non_uniform_indexing,
                        )
                        .shader_input_attachment_array_non_uniform_indexing(
                            self.shader_input_attachment_array_non_uniform_indexing,
                        )
                        .shader_uniform_texel_buffer_array_non_uniform_indexing(
                            self.shader_uniform_texel_buffer_array_non_uniform_indexing,
                        )
                        .shader_storage_texel_buffer_array_non_uniform_indexing(
                            self.shader_storage_texel_buffer_array_non_uniform_indexing,
                        )
                        .descriptor_binding_uniform_buffer_update_after_bind(
                            self.descriptor_binding_uniform_buffer_update_after_bind,
                        )
                        .descriptor_binding_sampled_image_update_after_bind(
                            self.descriptor_binding_sampled_image_update_after_bind,
                        )
                        .descriptor_binding_storage_image_update_after_bind(
                            self.descriptor_binding_storage_image_update_after_bind,
                        )
                        .descriptor_binding_storage_buffer_update_after_bind(
                            self.descriptor_binding_storage_buffer_update_after_bind,
                        )
                        .descriptor_binding_uniform_texel_buffer_update_after_bind(
                            self
                                .descriptor_binding_uniform_texel_buffer_update_after_bind,
                        )
                        .descriptor_binding_storage_texel_buffer_update_after_bind(
                            self
                                .descriptor_binding_storage_texel_buffer_update_after_bind,
                        )
                        .descriptor_binding_update_unused_while_pending(
                            self.descriptor_binding_update_unused_while_pending,
                        )
                        .descriptor_binding_partially_bound(
                            self.descriptor_binding_partially_bound,
                        )
                        .descriptor_binding_variable_descriptor_count(
                            self.descriptor_binding_variable_descriptor_count,
                        )
                        .runtime_descriptor_array(self.runtime_descriptor_array)
                        .sampler_filter_minmax(self.sampler_filter_minmax)
                        .scalar_block_layout(self.scalar_block_layout)
                        .imageless_framebuffer(self.imageless_framebuffer)
                        .uniform_buffer_standard_layout(
                            self.uniform_buffer_standard_layout,
                        )
                        .shader_subgroup_extended_types(
                            self.shader_subgroup_extended_types,
                        )
                        .separate_depth_stencil_layouts(
                            self.separate_depth_stencil_layouts,
                        )
                        .host_query_reset(self.host_query_reset)
                        .timeline_semaphore(self.timeline_semaphore)
                        .buffer_device_address(self.buffer_device_address)
                        .buffer_device_address_capture_replay(
                            self.buffer_device_address_capture_replay,
                        )
                        .buffer_device_address_multi_device(
                            self.buffer_device_address_multi_device,
                        )
                        .vulkan_memory_model(self.vulkan_memory_model)
                        .vulkan_memory_model_device_scope(
                            self.vulkan_memory_model_device_scope,
                        )
                        .vulkan_memory_model_availability_visibility_chains(
                            self.vulkan_memory_model_availability_visibility_chains,
                        )
                        .shader_output_viewport_index(self.shader_output_viewport_index)
                        .shader_output_layer(self.shader_output_layer)
                        .subgroup_broadcast_dynamic_id(
                            self.subgroup_broadcast_dynamic_id,
                        )
                }),
            features_vulkan13_vk: (api_version >= Version::V1_3)
                .then(|| {
                    <vk::PhysicalDeviceVulkan13Features<'_>>::default()
                        .robust_image_access(self.robust_image_access)
                        .inline_uniform_block(self.inline_uniform_block)
                        .descriptor_binding_inline_uniform_block_update_after_bind(
                            self
                                .descriptor_binding_inline_uniform_block_update_after_bind,
                        )
                        .pipeline_creation_cache_control(
                            self.pipeline_creation_cache_control,
                        )
                        .private_data(self.private_data)
                        .shader_demote_to_helper_invocation(
                            self.shader_demote_to_helper_invocation,
                        )
                        .shader_terminate_invocation(self.shader_terminate_invocation)
                        .subgroup_size_control(self.subgroup_size_control)
                        .compute_full_subgroups(self.compute_full_subgroups)
                        .synchronization2(self.synchronization2)
                        .texture_compression_astc_hdr(self.texture_compression_astc_hdr)
                        .shader_zero_initialize_workgroup_memory(
                            self.shader_zero_initialize_workgroup_memory,
                        )
                        .dynamic_rendering(self.dynamic_rendering)
                        .shader_integer_dot_product(self.shader_integer_dot_product)
                        .maintenance4(self.maintenance4)
                }),
            features_16bit_storage_vk: (api_version >= Version::V1_1
                || device_extensions.khr_16bit_storage)
                .then(|| {
                    <vk::PhysicalDevice16BitStorageFeatures<'_>>::default()
                        .storage_buffer16_bit_access(self.storage_buffer16_bit_access)
                        .uniform_and_storage_buffer16_bit_access(
                            self.uniform_and_storage_buffer16_bit_access,
                        )
                        .storage_push_constant16(self.storage_push_constant16)
                        .storage_input_output16(self.storage_input_output16)
                }),
            features_multiview_vk: (api_version >= Version::V1_1
                || device_extensions.khr_multiview)
                .then(|| {
                    <vk::PhysicalDeviceMultiviewFeatures<'_>>::default()
                        .multiview(self.multiview)
                        .multiview_geometry_shader(self.multiview_geometry_shader)
                        .multiview_tessellation_shader(
                            self.multiview_tessellation_shader,
                        )
                }),
            features_protected_memory_vk: (api_version >= Version::V1_1)
                .then(|| {
                    <vk::PhysicalDeviceProtectedMemoryFeatures<'_>>::default()
                        .protected_memory(self.protected_memory)
                }),
            features_sampler_ycbcr_conversion_vk: (api_version >= Version::V1_1
                || device_extensions.khr_sampler_ycbcr_conversion)
                .then(|| {
                    <vk::PhysicalDeviceSamplerYcbcrConversionFeatures<'_>>::default()
                        .sampler_ycbcr_conversion(self.sampler_ycbcr_conversion)
                }),
            features_shader_draw_parameters_vk: (api_version >= Version::V1_1)
                .then(|| {
                    <vk::PhysicalDeviceShaderDrawParametersFeatures<'_>>::default()
                        .shader_draw_parameters(self.shader_draw_parameters)
                }),
            features_variable_pointers_vk: (api_version >= Version::V1_1
                || device_extensions.khr_variable_pointers)
                .then(|| {
                    <vk::PhysicalDeviceVariablePointersFeatures<'_>>::default()
                        .variable_pointers_storage_buffer(
                            self.variable_pointers_storage_buffer,
                        )
                        .variable_pointers(self.variable_pointers)
                }),
            features_8bit_storage_vk: (api_version >= Version::V1_2
                || device_extensions.khr_8bit_storage)
                .then(|| {
                    <vk::PhysicalDevice8BitStorageFeatures<'_>>::default()
                        .storage_buffer8_bit_access(self.storage_buffer8_bit_access)
                        .uniform_and_storage_buffer8_bit_access(
                            self.uniform_and_storage_buffer8_bit_access,
                        )
                        .storage_push_constant8(self.storage_push_constant8)
                }),
            features_buffer_device_address_vk: (api_version >= Version::V1_2
                || device_extensions.khr_buffer_device_address)
                .then(|| {
                    <vk::PhysicalDeviceBufferDeviceAddressFeatures<'_>>::default()
                        .buffer_device_address(self.buffer_device_address)
                        .buffer_device_address_capture_replay(
                            self.buffer_device_address_capture_replay,
                        )
                        .buffer_device_address_multi_device(
                            self.buffer_device_address_multi_device,
                        )
                }),
            features_descriptor_indexing_vk: (api_version >= Version::V1_2
                || device_extensions.ext_descriptor_indexing)
                .then(|| {
                    <vk::PhysicalDeviceDescriptorIndexingFeatures<'_>>::default()
                        .shader_input_attachment_array_dynamic_indexing(
                            self.shader_input_attachment_array_dynamic_indexing,
                        )
                        .shader_uniform_texel_buffer_array_dynamic_indexing(
                            self.shader_uniform_texel_buffer_array_dynamic_indexing,
                        )
                        .shader_storage_texel_buffer_array_dynamic_indexing(
                            self.shader_storage_texel_buffer_array_dynamic_indexing,
                        )
                        .shader_uniform_buffer_array_non_uniform_indexing(
                            self.shader_uniform_buffer_array_non_uniform_indexing,
                        )
                        .shader_sampled_image_array_non_uniform_indexing(
                            self.shader_sampled_image_array_non_uniform_indexing,
                        )
                        .shader_storage_buffer_array_non_uniform_indexing(
                            self.shader_storage_buffer_array_non_uniform_indexing,
                        )
                        .shader_storage_image_array_non_uniform_indexing(
                            self.shader_storage_image_array_non_uniform_indexing,
                        )
                        .shader_input_attachment_array_non_uniform_indexing(
                            self.shader_input_attachment_array_non_uniform_indexing,
                        )
                        .shader_uniform_texel_buffer_array_non_uniform_indexing(
                            self.shader_uniform_texel_buffer_array_non_uniform_indexing,
                        )
                        .shader_storage_texel_buffer_array_non_uniform_indexing(
                            self.shader_storage_texel_buffer_array_non_uniform_indexing,
                        )
                        .descriptor_binding_uniform_buffer_update_after_bind(
                            self.descriptor_binding_uniform_buffer_update_after_bind,
                        )
                        .descriptor_binding_sampled_image_update_after_bind(
                            self.descriptor_binding_sampled_image_update_after_bind,
                        )
                        .descriptor_binding_storage_image_update_after_bind(
                            self.descriptor_binding_storage_image_update_after_bind,
                        )
                        .descriptor_binding_storage_buffer_update_after_bind(
                            self.descriptor_binding_storage_buffer_update_after_bind,
                        )
                        .descriptor_binding_uniform_texel_buffer_update_after_bind(
                            self
                                .descriptor_binding_uniform_texel_buffer_update_after_bind,
                        )
                        .descriptor_binding_storage_texel_buffer_update_after_bind(
                            self
                                .descriptor_binding_storage_texel_buffer_update_after_bind,
                        )
                        .descriptor_binding_update_unused_while_pending(
                            self.descriptor_binding_update_unused_while_pending,
                        )
                        .descriptor_binding_partially_bound(
                            self.descriptor_binding_partially_bound,
                        )
                        .descriptor_binding_variable_descriptor_count(
                            self.descriptor_binding_variable_descriptor_count,
                        )
                        .runtime_descriptor_array(self.runtime_descriptor_array)
                }),
            features_host_query_reset_vk: (api_version >= Version::V1_2
                || device_extensions.ext_host_query_reset)
                .then(|| {
                    <vk::PhysicalDeviceHostQueryResetFeatures<'_>>::default()
                        .host_query_reset(self.host_query_reset)
                }),
            features_imageless_framebuffer_vk: (api_version >= Version::V1_2
                || device_extensions.khr_imageless_framebuffer)
                .then(|| {
                    <vk::PhysicalDeviceImagelessFramebufferFeatures<'_>>::default()
                        .imageless_framebuffer(self.imageless_framebuffer)
                }),
            features_scalar_block_layout_vk: (api_version >= Version::V1_2
                || device_extensions.ext_scalar_block_layout)
                .then(|| {
                    <vk::PhysicalDeviceScalarBlockLayoutFeatures<'_>>::default()
                        .scalar_block_layout(self.scalar_block_layout)
                }),
            features_separate_depth_stencil_layouts_vk: (api_version >= Version::V1_2
                || device_extensions.khr_separate_depth_stencil_layouts)
                .then(|| {
                    <vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures<
                        '_,
                    >>::default()
                        .separate_depth_stencil_layouts(
                            self.separate_depth_stencil_layouts,
                        )
                }),
            features_shader_atomic_int64_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_atomic_int64)
                .then(|| {
                    <vk::PhysicalDeviceShaderAtomicInt64Features<'_>>::default()
                        .shader_buffer_int64_atomics(self.shader_buffer_int64_atomics)
                        .shader_shared_int64_atomics(self.shader_shared_int64_atomics)
                }),
            features_shader_float16_int8_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_float16_int8)
                .then(|| {
                    <vk::PhysicalDeviceShaderFloat16Int8Features<'_>>::default()
                        .shader_float16(self.shader_float16)
                        .shader_int8(self.shader_int8)
                }),
            features_shader_subgroup_extended_types_vk: (api_version >= Version::V1_2
                || device_extensions.khr_shader_subgroup_extended_types)
                .then(|| {
                    <vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures<
                        '_,
                    >>::default()
                        .shader_subgroup_extended_types(
                            self.shader_subgroup_extended_types,
                        )
                }),
            features_timeline_semaphore_vk: (api_version >= Version::V1_2
                || device_extensions.khr_timeline_semaphore)
                .then(|| {
                    <vk::PhysicalDeviceTimelineSemaphoreFeatures<'_>>::default()
                        .timeline_semaphore(self.timeline_semaphore)
                }),
            features_uniform_buffer_standard_layout_vk: (api_version >= Version::V1_2
                || device_extensions.khr_uniform_buffer_standard_layout)
                .then(|| {
                    <vk::PhysicalDeviceUniformBufferStandardLayoutFeatures<
                        '_,
                    >>::default()
                        .uniform_buffer_standard_layout(
                            self.uniform_buffer_standard_layout,
                        )
                }),
            features_vulkan_memory_model_vk: (api_version >= Version::V1_2
                || device_extensions.khr_vulkan_memory_model)
                .then(|| {
                    <vk::PhysicalDeviceVulkanMemoryModelFeatures<'_>>::default()
                        .vulkan_memory_model(self.vulkan_memory_model)
                        .vulkan_memory_model_device_scope(
                            self.vulkan_memory_model_device_scope,
                        )
                        .vulkan_memory_model_availability_visibility_chains(
                            self.vulkan_memory_model_availability_visibility_chains,
                        )
                }),
            features_dynamic_rendering_vk: (api_version >= Version::V1_3
                || device_extensions.khr_dynamic_rendering)
                .then(|| {
                    <vk::PhysicalDeviceDynamicRenderingFeatures<'_>>::default()
                        .dynamic_rendering(self.dynamic_rendering)
                }),
            features_image_robustness_vk: (api_version >= Version::V1_3
                || device_extensions.ext_image_robustness)
                .then(|| {
                    <vk::PhysicalDeviceImageRobustnessFeatures<'_>>::default()
                        .robust_image_access(self.robust_image_access)
                }),
            features_inline_uniform_block_vk: (api_version >= Version::V1_3
                || device_extensions.ext_inline_uniform_block)
                .then(|| {
                    <vk::PhysicalDeviceInlineUniformBlockFeatures<'_>>::default()
                        .inline_uniform_block(self.inline_uniform_block)
                        .descriptor_binding_inline_uniform_block_update_after_bind(
                            self
                                .descriptor_binding_inline_uniform_block_update_after_bind,
                        )
                }),
            features_maintenance4_vk: (api_version >= Version::V1_3
                || device_extensions.khr_maintenance4)
                .then(|| {
                    <vk::PhysicalDeviceMaintenance4Features<'_>>::default()
                        .maintenance4(self.maintenance4)
                }),
            features_pipeline_creation_cache_control_vk: (api_version >= Version::V1_3
                || device_extensions.ext_pipeline_creation_cache_control)
                .then(|| {
                    <vk::PhysicalDevicePipelineCreationCacheControlFeatures<
                        '_,
                    >>::default()
                        .pipeline_creation_cache_control(
                            self.pipeline_creation_cache_control,
                        )
                }),
            features_private_data_vk: (api_version >= Version::V1_3
                || device_extensions.ext_private_data)
                .then(|| {
                    <vk::PhysicalDevicePrivateDataFeatures<'_>>::default()
                        .private_data(self.private_data)
                }),
            features_shader_demote_to_helper_invocation_vk: (api_version >= Version::V1_3
                || device_extensions.ext_shader_demote_to_helper_invocation)
                .then(|| {
                    <vk::PhysicalDeviceShaderDemoteToHelperInvocationFeatures<
                        '_,
                    >>::default()
                        .shader_demote_to_helper_invocation(
                            self.shader_demote_to_helper_invocation,
                        )
                }),
            features_shader_integer_dot_product_vk: (api_version >= Version::V1_3
                || device_extensions.khr_shader_integer_dot_product)
                .then(|| {
                    <vk::PhysicalDeviceShaderIntegerDotProductFeatures<'_>>::default()
                        .shader_integer_dot_product(self.shader_integer_dot_product)
                }),
            features_shader_terminate_invocation_vk: (api_version >= Version::V1_3
                || device_extensions.khr_shader_terminate_invocation)
                .then(|| {
                    <vk::PhysicalDeviceShaderTerminateInvocationFeatures<'_>>::default()
                        .shader_terminate_invocation(self.shader_terminate_invocation)
                }),
            features_subgroup_size_control_vk: (api_version >= Version::V1_3
                || device_extensions.ext_subgroup_size_control)
                .then(|| {
                    <vk::PhysicalDeviceSubgroupSizeControlFeatures<'_>>::default()
                        .subgroup_size_control(self.subgroup_size_control)
                        .compute_full_subgroups(self.compute_full_subgroups)
                }),
            features_synchronization2_vk: (api_version >= Version::V1_3
                || device_extensions.khr_synchronization2)
                .then(|| {
                    <vk::PhysicalDeviceSynchronization2Features<'_>>::default()
                        .synchronization2(self.synchronization2)
                }),
            features_texture_compression_astchdr_vk: (api_version >= Version::V1_3
                || device_extensions.ext_texture_compression_astc_hdr)
                .then(|| {
                    <vk::PhysicalDeviceTextureCompressionASTCHDRFeatures<'_>>::default()
                        .texture_compression_astc_hdr(self.texture_compression_astc_hdr)
                }),
            features_zero_initialize_workgroup_memory_vk: (api_version >= Version::V1_3
                || device_extensions.khr_zero_initialize_workgroup_memory)
                .then(|| {
                    <vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures<
                        '_,
                    >>::default()
                        .shader_zero_initialize_workgroup_memory(
                            self.shader_zero_initialize_workgroup_memory,
                        )
                }),
            features_acceleration_structure_khr_vk: (device_extensions
                .khr_acceleration_structure)
                .then(|| {
                    <vk::PhysicalDeviceAccelerationStructureFeaturesKHR<'_>>::default()
                        .acceleration_structure(self.acceleration_structure)
                        .acceleration_structure_capture_replay(
                            self.acceleration_structure_capture_replay,
                        )
                        .acceleration_structure_indirect_build(
                            self.acceleration_structure_indirect_build,
                        )
                        .acceleration_structure_host_commands(
                            self.acceleration_structure_host_commands,
                        )
                        .descriptor_binding_acceleration_structure_update_after_bind(
                            self
                                .descriptor_binding_acceleration_structure_update_after_bind,
                        )
                }),
            features_cooperative_matrix_khr_vk: (device_extensions
                .khr_cooperative_matrix)
                .then(|| {
                    <vk::PhysicalDeviceCooperativeMatrixFeaturesKHR<'_>>::default()
                        .cooperative_matrix(self.cooperative_matrix)
                        .cooperative_matrix_robust_buffer_access(
                            self.cooperative_matrix_robust_buffer_access,
                        )
                }),
            features_dynamic_rendering_local_read_khr_vk: (device_extensions
                .khr_dynamic_rendering_local_read)
                .then(|| {
                    <vk::PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR<
                        '_,
                    >>::default()
                        .dynamic_rendering_local_read(self.dynamic_rendering_local_read)
                }),
            features_fragment_shader_barycentric_khr_vk: (device_extensions
                .khr_fragment_shader_barycentric
                || device_extensions.nv_fragment_shader_barycentric)
                .then(|| {
                    <vk::PhysicalDeviceFragmentShaderBarycentricFeaturesKHR<
                        '_,
                    >>::default()
                        .fragment_shader_barycentric(self.fragment_shader_barycentric)
                }),
            features_fragment_shading_rate_khr_vk: (device_extensions
                .khr_fragment_shading_rate)
                .then(|| {
                    <vk::PhysicalDeviceFragmentShadingRateFeaturesKHR<'_>>::default()
                        .pipeline_fragment_shading_rate(
                            self.pipeline_fragment_shading_rate,
                        )
                        .primitive_fragment_shading_rate(
                            self.primitive_fragment_shading_rate,
                        )
                        .attachment_fragment_shading_rate(
                            self.attachment_fragment_shading_rate,
                        )
                }),
            features_global_priority_query_khr_vk: (device_extensions.khr_global_priority
                || device_extensions.ext_global_priority_query)
                .then(|| {
                    <vk::PhysicalDeviceGlobalPriorityQueryFeaturesKHR<'_>>::default()
                        .global_priority_query(self.global_priority_query)
                }),
            features_index_type_uint8_khr_vk: (device_extensions.khr_index_type_uint8
                || device_extensions.ext_index_type_uint8)
                .then(|| {
                    <vk::PhysicalDeviceIndexTypeUint8FeaturesKHR<'_>>::default()
                        .index_type_uint8(self.index_type_uint8)
                }),
            features_line_rasterization_khr_vk: (device_extensions.khr_line_rasterization
                || device_extensions.ext_line_rasterization)
                .then(|| {
                    <vk::PhysicalDeviceLineRasterizationFeaturesKHR<'_>>::default()
                        .rectangular_lines(self.rectangular_lines)
                        .bresenham_lines(self.bresenham_lines)
                        .smooth_lines(self.smooth_lines)
                        .stippled_rectangular_lines(self.stippled_rectangular_lines)
                        .stippled_bresenham_lines(self.stippled_bresenham_lines)
                        .stippled_smooth_lines(self.stippled_smooth_lines)
                }),
            features_maintenance5_khr_vk: (device_extensions.khr_maintenance5)
                .then(|| {
                    <vk::PhysicalDeviceMaintenance5FeaturesKHR<'_>>::default()
                        .maintenance5(self.maintenance5)
                }),
            features_maintenance6_khr_vk: (device_extensions.khr_maintenance6)
                .then(|| {
                    <vk::PhysicalDeviceMaintenance6FeaturesKHR<'_>>::default()
                        .maintenance6(self.maintenance6)
                }),
            features_performance_query_khr_vk: (device_extensions.khr_performance_query)
                .then(|| {
                    <vk::PhysicalDevicePerformanceQueryFeaturesKHR<'_>>::default()
                        .performance_counter_query_pools(
                            self.performance_counter_query_pools,
                        )
                        .performance_counter_multiple_query_pools(
                            self.performance_counter_multiple_query_pools,
                        )
                }),
            features_pipeline_executable_properties_khr_vk: (device_extensions
                .khr_pipeline_executable_properties)
                .then(|| {
                    <vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR<
                        '_,
                    >>::default()
                        .pipeline_executable_info(self.pipeline_executable_info)
                }),
            features_portability_subset_khr_vk: (device_extensions
                .khr_portability_subset)
                .then(|| {
                    <vk::PhysicalDevicePortabilitySubsetFeaturesKHR<'_>>::default()
                        .constant_alpha_color_blend_factors(
                            self.constant_alpha_color_blend_factors,
                        )
                        .events(self.events)
                        .image_view_format_reinterpretation(
                            self.image_view_format_reinterpretation,
                        )
                        .image_view_format_swizzle(self.image_view_format_swizzle)
                        .image_view2_d_on3_d_image(self.image_view2_d_on3_d_image)
                        .multisample_array_image(self.multisample_array_image)
                        .mutable_comparison_samplers(self.mutable_comparison_samplers)
                        .point_polygons(self.point_polygons)
                        .sampler_mip_lod_bias(self.sampler_mip_lod_bias)
                        .separate_stencil_mask_ref(self.separate_stencil_mask_ref)
                        .shader_sample_rate_interpolation_functions(
                            self.shader_sample_rate_interpolation_functions,
                        )
                        .tessellation_isolines(self.tessellation_isolines)
                        .tessellation_point_mode(self.tessellation_point_mode)
                        .triangle_fans(self.triangle_fans)
                        .vertex_attribute_access_beyond_stride(
                            self.vertex_attribute_access_beyond_stride,
                        )
                }),
            features_present_id_khr_vk: (device_extensions.khr_present_id)
                .then(|| {
                    <vk::PhysicalDevicePresentIdFeaturesKHR<'_>>::default()
                        .present_id(self.present_id)
                }),
            features_present_wait_khr_vk: (device_extensions.khr_present_wait)
                .then(|| {
                    <vk::PhysicalDevicePresentWaitFeaturesKHR<'_>>::default()
                        .present_wait(self.present_wait)
                }),
            features_ray_query_khr_vk: (device_extensions.khr_ray_query)
                .then(|| {
                    <vk::PhysicalDeviceRayQueryFeaturesKHR<'_>>::default()
                        .ray_query(self.ray_query)
                }),
            features_ray_tracing_maintenance1_khr_vk: (device_extensions
                .khr_ray_tracing_maintenance1)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingMaintenance1FeaturesKHR<'_>>::default()
                        .ray_tracing_maintenance1(self.ray_tracing_maintenance1)
                        .ray_tracing_pipeline_trace_rays_indirect2(
                            self.ray_tracing_pipeline_trace_rays_indirect2,
                        )
                }),
            features_ray_tracing_pipeline_khr_vk: (device_extensions
                .khr_ray_tracing_pipeline)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingPipelineFeaturesKHR<'_>>::default()
                        .ray_tracing_pipeline(self.ray_tracing_pipeline)
                        .ray_tracing_pipeline_shader_group_handle_capture_replay(
                            self.ray_tracing_pipeline_shader_group_handle_capture_replay,
                        )
                        .ray_tracing_pipeline_shader_group_handle_capture_replay_mixed(
                            self
                                .ray_tracing_pipeline_shader_group_handle_capture_replay_mixed,
                        )
                        .ray_tracing_pipeline_trace_rays_indirect(
                            self.ray_tracing_pipeline_trace_rays_indirect,
                        )
                        .ray_traversal_primitive_culling(
                            self.ray_traversal_primitive_culling,
                        )
                }),
            features_ray_tracing_position_fetch_khr_vk: (device_extensions
                .khr_ray_tracing_position_fetch)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingPositionFetchFeaturesKHR<'_>>::default()
                        .ray_tracing_position_fetch(self.ray_tracing_position_fetch)
                }),
            features_shader_clock_khr_vk: (device_extensions.khr_shader_clock)
                .then(|| {
                    <vk::PhysicalDeviceShaderClockFeaturesKHR<'_>>::default()
                        .shader_subgroup_clock(self.shader_subgroup_clock)
                        .shader_device_clock(self.shader_device_clock)
                }),
            features_shader_expect_assume_khr_vk: (device_extensions
                .khr_shader_expect_assume)
                .then(|| {
                    <vk::PhysicalDeviceShaderExpectAssumeFeaturesKHR<'_>>::default()
                        .shader_expect_assume(self.shader_expect_assume)
                }),
            features_shader_float_controls2_khr_vk: (device_extensions
                .khr_shader_float_controls2)
                .then(|| {
                    <vk::PhysicalDeviceShaderFloatControls2FeaturesKHR<'_>>::default()
                        .shader_float_controls2(self.shader_float_controls2)
                }),
            features_shader_maximal_reconvergence_khr_vk: (device_extensions
                .khr_shader_maximal_reconvergence)
                .then(|| {
                    <vk::PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR<
                        '_,
                    >>::default()
                        .shader_maximal_reconvergence(self.shader_maximal_reconvergence)
                }),
            features_shader_quad_control_khr_vk: (device_extensions
                .khr_shader_quad_control)
                .then(|| {
                    <vk::PhysicalDeviceShaderQuadControlFeaturesKHR<'_>>::default()
                        .shader_quad_control(self.shader_quad_control)
                }),
            features_shader_subgroup_rotate_khr_vk: (device_extensions
                .khr_shader_subgroup_rotate)
                .then(|| {
                    <vk::PhysicalDeviceShaderSubgroupRotateFeaturesKHR<'_>>::default()
                        .shader_subgroup_rotate(self.shader_subgroup_rotate)
                        .shader_subgroup_rotate_clustered(
                            self.shader_subgroup_rotate_clustered,
                        )
                }),
            features_shader_subgroup_uniform_control_flow_khr_vk: (device_extensions
                .khr_shader_subgroup_uniform_control_flow)
                .then(|| {
                    <vk::PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR<
                        '_,
                    >>::default()
                        .shader_subgroup_uniform_control_flow(
                            self.shader_subgroup_uniform_control_flow,
                        )
                }),
            features_vertex_attribute_divisor_khr_vk: (device_extensions
                .khr_vertex_attribute_divisor
                || device_extensions.ext_vertex_attribute_divisor)
                .then(|| {
                    <vk::PhysicalDeviceVertexAttributeDivisorFeaturesKHR<'_>>::default()
                        .vertex_attribute_instance_rate_divisor(
                            self.vertex_attribute_instance_rate_divisor,
                        )
                        .vertex_attribute_instance_rate_zero_divisor(
                            self.vertex_attribute_instance_rate_zero_divisor,
                        )
                }),
            features_video_maintenance1_khr_vk: (device_extensions
                .khr_video_maintenance1)
                .then(|| {
                    <vk::PhysicalDeviceVideoMaintenance1FeaturesKHR<'_>>::default()
                        .video_maintenance1(self.video_maintenance1)
                }),
            features_workgroup_memory_explicit_layout_khr_vk: (device_extensions
                .khr_workgroup_memory_explicit_layout)
                .then(|| {
                    <vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR<
                        '_,
                    >>::default()
                        .workgroup_memory_explicit_layout(
                            self.workgroup_memory_explicit_layout,
                        )
                        .workgroup_memory_explicit_layout_scalar_block_layout(
                            self.workgroup_memory_explicit_layout_scalar_block_layout,
                        )
                        .workgroup_memory_explicit_layout8_bit_access(
                            self.workgroup_memory_explicit_layout8_bit_access,
                        )
                        .workgroup_memory_explicit_layout16_bit_access(
                            self.workgroup_memory_explicit_layout16_bit_access,
                        )
                }),
            features_4444formats_ext_vk: (device_extensions.ext_4444_formats)
                .then(|| {
                    <vk::PhysicalDevice4444FormatsFeaturesEXT<'_>>::default()
                        .format_a4r4g4b4(self.format_a4r4g4b4)
                        .format_a4b4g4r4(self.format_a4b4g4r4)
                }),
            features_astc_decode_ext_vk: (device_extensions.ext_astc_decode_mode)
                .then(|| {
                    <vk::PhysicalDeviceASTCDecodeFeaturesEXT<'_>>::default()
                        .decode_mode_shared_exponent(self.decode_mode_shared_exponent)
                }),
            features_address_binding_report_ext_vk: (device_extensions
                .ext_device_address_binding_report)
                .then(|| {
                    <vk::PhysicalDeviceAddressBindingReportFeaturesEXT<'_>>::default()
                        .report_address_binding(self.report_address_binding)
                }),
            features_attachment_feedback_loop_dynamic_state_ext_vk: (device_extensions
                .ext_attachment_feedback_loop_dynamic_state)
                .then(|| {
                    <vk::PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT<
                        '_,
                    >>::default()
                        .attachment_feedback_loop_dynamic_state(
                            self.attachment_feedback_loop_dynamic_state,
                        )
                }),
            features_attachment_feedback_loop_layout_ext_vk: (device_extensions
                .ext_attachment_feedback_loop_layout)
                .then(|| {
                    <vk::PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT<
                        '_,
                    >>::default()
                        .attachment_feedback_loop_layout(
                            self.attachment_feedback_loop_layout,
                        )
                }),
            features_blend_operation_advanced_ext_vk: (device_extensions
                .ext_blend_operation_advanced)
                .then(|| {
                    <vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT<'_>>::default()
                        .advanced_blend_coherent_operations(
                            self.advanced_blend_coherent_operations,
                        )
                }),
            features_border_color_swizzle_ext_vk: (device_extensions
                .ext_border_color_swizzle)
                .then(|| {
                    <vk::PhysicalDeviceBorderColorSwizzleFeaturesEXT<'_>>::default()
                        .border_color_swizzle(self.border_color_swizzle)
                        .border_color_swizzle_from_image(
                            self.border_color_swizzle_from_image,
                        )
                }),
            features_buffer_device_address_ext_vk: (device_extensions
                .ext_buffer_device_address)
                .then(|| {
                    <vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT<'_>>::default()
                        .buffer_device_address(self.buffer_device_address)
                        .buffer_device_address_capture_replay(
                            self.buffer_device_address_capture_replay,
                        )
                        .buffer_device_address_multi_device(
                            self.buffer_device_address_multi_device,
                        )
                }),
            features_color_write_enable_ext_vk: (device_extensions
                .ext_color_write_enable)
                .then(|| {
                    <vk::PhysicalDeviceColorWriteEnableFeaturesEXT<'_>>::default()
                        .color_write_enable(self.color_write_enable)
                }),
            features_conditional_rendering_ext_vk: (device_extensions
                .ext_conditional_rendering)
                .then(|| {
                    <vk::PhysicalDeviceConditionalRenderingFeaturesEXT<'_>>::default()
                        .conditional_rendering(self.conditional_rendering)
                        .inherited_conditional_rendering(
                            self.inherited_conditional_rendering,
                        )
                }),
            features_custom_border_color_ext_vk: (device_extensions
                .ext_custom_border_color)
                .then(|| {
                    <vk::PhysicalDeviceCustomBorderColorFeaturesEXT<'_>>::default()
                        .custom_border_colors(self.custom_border_colors)
                        .custom_border_color_without_format(
                            self.custom_border_color_without_format,
                        )
                }),
            features_depth_bias_control_ext_vk: (device_extensions
                .ext_depth_bias_control)
                .then(|| {
                    <vk::PhysicalDeviceDepthBiasControlFeaturesEXT<'_>>::default()
                        .depth_bias_control(self.depth_bias_control)
                        .least_representable_value_force_unorm_representation(
                            self.least_representable_value_force_unorm_representation,
                        )
                        .float_representation(self.float_representation)
                        .depth_bias_exact(self.depth_bias_exact)
                }),
            features_depth_clamp_zero_one_ext_vk: (device_extensions
                .ext_depth_clamp_zero_one)
                .then(|| {
                    <vk::PhysicalDeviceDepthClampZeroOneFeaturesEXT<'_>>::default()
                        .depth_clamp_zero_one(self.depth_clamp_zero_one)
                }),
            features_depth_clip_control_ext_vk: (device_extensions
                .ext_depth_clip_control)
                .then(|| {
                    <vk::PhysicalDeviceDepthClipControlFeaturesEXT<'_>>::default()
                        .depth_clip_control(self.depth_clip_control)
                }),
            features_depth_clip_enable_ext_vk: (device_extensions.ext_depth_clip_enable)
                .then(|| {
                    <vk::PhysicalDeviceDepthClipEnableFeaturesEXT<'_>>::default()
                        .depth_clip_enable(self.depth_clip_enable)
                }),
            features_descriptor_buffer_ext_vk: (device_extensions.ext_descriptor_buffer)
                .then(|| {
                    <vk::PhysicalDeviceDescriptorBufferFeaturesEXT<'_>>::default()
                        .descriptor_buffer(self.descriptor_buffer)
                        .descriptor_buffer_capture_replay(
                            self.descriptor_buffer_capture_replay,
                        )
                        .descriptor_buffer_image_layout_ignored(
                            self.descriptor_buffer_image_layout_ignored,
                        )
                        .descriptor_buffer_push_descriptors(
                            self.descriptor_buffer_push_descriptors,
                        )
                }),
            features_device_memory_report_ext_vk: (device_extensions
                .ext_device_memory_report)
                .then(|| {
                    <vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT<'_>>::default()
                        .device_memory_report(self.device_memory_report)
                }),
            features_dynamic_rendering_unused_attachments_ext_vk: (device_extensions
                .ext_dynamic_rendering_unused_attachments)
                .then(|| {
                    <vk::PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT<
                        '_,
                    >>::default()
                        .dynamic_rendering_unused_attachments(
                            self.dynamic_rendering_unused_attachments,
                        )
                }),
            features_extended_dynamic_state2_ext_vk: (device_extensions
                .ext_extended_dynamic_state2)
                .then(|| {
                    <vk::PhysicalDeviceExtendedDynamicState2FeaturesEXT<'_>>::default()
                        .extended_dynamic_state2(self.extended_dynamic_state2)
                        .extended_dynamic_state2_logic_op(
                            self.extended_dynamic_state2_logic_op,
                        )
                        .extended_dynamic_state2_patch_control_points(
                            self.extended_dynamic_state2_patch_control_points,
                        )
                }),
            features_extended_dynamic_state3_ext_vk: (device_extensions
                .ext_extended_dynamic_state3)
                .then(|| {
                    <vk::PhysicalDeviceExtendedDynamicState3FeaturesEXT<'_>>::default()
                        .extended_dynamic_state3_tessellation_domain_origin(
                            self.extended_dynamic_state3_tessellation_domain_origin,
                        )
                        .extended_dynamic_state3_depth_clamp_enable(
                            self.extended_dynamic_state3_depth_clamp_enable,
                        )
                        .extended_dynamic_state3_polygon_mode(
                            self.extended_dynamic_state3_polygon_mode,
                        )
                        .extended_dynamic_state3_rasterization_samples(
                            self.extended_dynamic_state3_rasterization_samples,
                        )
                        .extended_dynamic_state3_sample_mask(
                            self.extended_dynamic_state3_sample_mask,
                        )
                        .extended_dynamic_state3_alpha_to_coverage_enable(
                            self.extended_dynamic_state3_alpha_to_coverage_enable,
                        )
                        .extended_dynamic_state3_alpha_to_one_enable(
                            self.extended_dynamic_state3_alpha_to_one_enable,
                        )
                        .extended_dynamic_state3_logic_op_enable(
                            self.extended_dynamic_state3_logic_op_enable,
                        )
                        .extended_dynamic_state3_color_blend_enable(
                            self.extended_dynamic_state3_color_blend_enable,
                        )
                        .extended_dynamic_state3_color_blend_equation(
                            self.extended_dynamic_state3_color_blend_equation,
                        )
                        .extended_dynamic_state3_color_write_mask(
                            self.extended_dynamic_state3_color_write_mask,
                        )
                        .extended_dynamic_state3_rasterization_stream(
                            self.extended_dynamic_state3_rasterization_stream,
                        )
                        .extended_dynamic_state3_conservative_rasterization_mode(
                            self.extended_dynamic_state3_conservative_rasterization_mode,
                        )
                        .extended_dynamic_state3_extra_primitive_overestimation_size(
                            self
                                .extended_dynamic_state3_extra_primitive_overestimation_size,
                        )
                        .extended_dynamic_state3_depth_clip_enable(
                            self.extended_dynamic_state3_depth_clip_enable,
                        )
                        .extended_dynamic_state3_sample_locations_enable(
                            self.extended_dynamic_state3_sample_locations_enable,
                        )
                        .extended_dynamic_state3_color_blend_advanced(
                            self.extended_dynamic_state3_color_blend_advanced,
                        )
                        .extended_dynamic_state3_provoking_vertex_mode(
                            self.extended_dynamic_state3_provoking_vertex_mode,
                        )
                        .extended_dynamic_state3_line_rasterization_mode(
                            self.extended_dynamic_state3_line_rasterization_mode,
                        )
                        .extended_dynamic_state3_line_stipple_enable(
                            self.extended_dynamic_state3_line_stipple_enable,
                        )
                        .extended_dynamic_state3_depth_clip_negative_one_to_one(
                            self.extended_dynamic_state3_depth_clip_negative_one_to_one,
                        )
                        .extended_dynamic_state3_viewport_w_scaling_enable(
                            self.extended_dynamic_state3_viewport_w_scaling_enable,
                        )
                        .extended_dynamic_state3_viewport_swizzle(
                            self.extended_dynamic_state3_viewport_swizzle,
                        )
                        .extended_dynamic_state3_coverage_to_color_enable(
                            self.extended_dynamic_state3_coverage_to_color_enable,
                        )
                        .extended_dynamic_state3_coverage_to_color_location(
                            self.extended_dynamic_state3_coverage_to_color_location,
                        )
                        .extended_dynamic_state3_coverage_modulation_mode(
                            self.extended_dynamic_state3_coverage_modulation_mode,
                        )
                        .extended_dynamic_state3_coverage_modulation_table_enable(
                            self.extended_dynamic_state3_coverage_modulation_table_enable,
                        )
                        .extended_dynamic_state3_coverage_modulation_table(
                            self.extended_dynamic_state3_coverage_modulation_table,
                        )
                        .extended_dynamic_state3_coverage_reduction_mode(
                            self.extended_dynamic_state3_coverage_reduction_mode,
                        )
                        .extended_dynamic_state3_representative_fragment_test_enable(
                            self
                                .extended_dynamic_state3_representative_fragment_test_enable,
                        )
                        .extended_dynamic_state3_shading_rate_image_enable(
                            self.extended_dynamic_state3_shading_rate_image_enable,
                        )
                }),
            features_extended_dynamic_state_ext_vk: (device_extensions
                .ext_extended_dynamic_state)
                .then(|| {
                    <vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT<'_>>::default()
                        .extended_dynamic_state(self.extended_dynamic_state)
                }),
            features_fault_ext_vk: (device_extensions.ext_device_fault)
                .then(|| {
                    <vk::PhysicalDeviceFaultFeaturesEXT<'_>>::default()
                        .device_fault(self.device_fault)
                        .device_fault_vendor_binary(self.device_fault_vendor_binary)
                }),
            features_fragment_density_map2_ext_vk: (device_extensions
                .ext_fragment_density_map2)
                .then(|| {
                    <vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT<'_>>::default()
                        .fragment_density_map_deferred(
                            self.fragment_density_map_deferred,
                        )
                }),
            features_fragment_density_map_ext_vk: (device_extensions
                .ext_fragment_density_map)
                .then(|| {
                    <vk::PhysicalDeviceFragmentDensityMapFeaturesEXT<'_>>::default()
                        .fragment_density_map(self.fragment_density_map)
                        .fragment_density_map_dynamic(self.fragment_density_map_dynamic)
                        .fragment_density_map_non_subsampled_images(
                            self.fragment_density_map_non_subsampled_images,
                        )
                }),
            features_fragment_shader_interlock_ext_vk: (device_extensions
                .ext_fragment_shader_interlock)
                .then(|| {
                    <vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT<'_>>::default()
                        .fragment_shader_sample_interlock(
                            self.fragment_shader_sample_interlock,
                        )
                        .fragment_shader_pixel_interlock(
                            self.fragment_shader_pixel_interlock,
                        )
                        .fragment_shader_shading_rate_interlock(
                            self.fragment_shader_shading_rate_interlock,
                        )
                }),
            features_frame_boundary_ext_vk: (device_extensions.ext_frame_boundary)
                .then(|| {
                    <vk::PhysicalDeviceFrameBoundaryFeaturesEXT<'_>>::default()
                        .frame_boundary(self.frame_boundary)
                }),
            features_graphics_pipeline_library_ext_vk: (device_extensions
                .ext_graphics_pipeline_library)
                .then(|| {
                    <vk::PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT<'_>>::default()
                        .graphics_pipeline_library(self.graphics_pipeline_library)
                }),
            features_host_image_copy_ext_vk: (device_extensions.ext_host_image_copy)
                .then(|| {
                    <vk::PhysicalDeviceHostImageCopyFeaturesEXT<'_>>::default()
                        .host_image_copy(self.host_image_copy)
                }),
            features_image2_d_view_of3_d_ext_vk: (device_extensions
                .ext_image_2d_view_of_3d)
                .then(|| {
                    <vk::PhysicalDeviceImage2DViewOf3DFeaturesEXT<'_>>::default()
                        .image2_d_view_of3_d(self.image2_d_view_of3_d)
                        .sampler2_d_view_of3_d(self.sampler2_d_view_of3_d)
                }),
            features_image_compression_control_ext_vk: (device_extensions
                .ext_image_compression_control)
                .then(|| {
                    <vk::PhysicalDeviceImageCompressionControlFeaturesEXT<'_>>::default()
                        .image_compression_control(self.image_compression_control)
                }),
            features_image_compression_control_swapchain_ext_vk: (device_extensions
                .ext_image_compression_control_swapchain)
                .then(|| {
                    <vk::PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT<
                        '_,
                    >>::default()
                        .image_compression_control_swapchain(
                            self.image_compression_control_swapchain,
                        )
                }),
            features_image_sliced_view_of3_d_ext_vk: (device_extensions
                .ext_image_sliced_view_of_3d)
                .then(|| {
                    <vk::PhysicalDeviceImageSlicedViewOf3DFeaturesEXT<'_>>::default()
                        .image_sliced_view_of3_d(self.image_sliced_view_of3_d)
                }),
            features_image_view_min_lod_ext_vk: (device_extensions
                .ext_image_view_min_lod)
                .then(|| {
                    <vk::PhysicalDeviceImageViewMinLodFeaturesEXT<'_>>::default()
                        .min_lod(self.min_lod)
                }),
            features_legacy_dithering_ext_vk: (device_extensions.ext_legacy_dithering)
                .then(|| {
                    <vk::PhysicalDeviceLegacyDitheringFeaturesEXT<'_>>::default()
                        .legacy_dithering(self.legacy_dithering)
                }),
            features_map_memory_placed_ext_vk: (device_extensions.ext_map_memory_placed)
                .then(|| {
                    <vk::PhysicalDeviceMapMemoryPlacedFeaturesEXT<'_>>::default()
                        .memory_map_placed(self.memory_map_placed)
                        .memory_map_range_placed(self.memory_map_range_placed)
                        .memory_unmap_reserve(self.memory_unmap_reserve)
                }),
            features_memory_priority_ext_vk: (device_extensions.ext_memory_priority)
                .then(|| {
                    <vk::PhysicalDeviceMemoryPriorityFeaturesEXT<'_>>::default()
                        .memory_priority(self.memory_priority)
                }),
            features_mesh_shader_ext_vk: (device_extensions.ext_mesh_shader)
                .then(|| {
                    <vk::PhysicalDeviceMeshShaderFeaturesEXT<'_>>::default()
                        .task_shader(self.task_shader)
                        .mesh_shader(self.mesh_shader)
                        .multiview_mesh_shader(self.multiview_mesh_shader)
                        .primitive_fragment_shading_rate_mesh_shader(
                            self.primitive_fragment_shading_rate_mesh_shader,
                        )
                        .mesh_shader_queries(self.mesh_shader_queries)
                }),
            features_multi_draw_ext_vk: (device_extensions.ext_multi_draw)
                .then(|| {
                    <vk::PhysicalDeviceMultiDrawFeaturesEXT<'_>>::default()
                        .multi_draw(self.multi_draw)
                }),
            features_multisampled_render_to_single_sampled_ext_vk: (device_extensions
                .ext_multisampled_render_to_single_sampled)
                .then(|| {
                    <vk::PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT<
                        '_,
                    >>::default()
                        .multisampled_render_to_single_sampled(
                            self.multisampled_render_to_single_sampled,
                        )
                }),
            features_mutable_descriptor_type_ext_vk: (device_extensions
                .ext_mutable_descriptor_type
                || device_extensions.valve_mutable_descriptor_type)
                .then(|| {
                    <vk::PhysicalDeviceMutableDescriptorTypeFeaturesEXT<'_>>::default()
                        .mutable_descriptor_type(self.mutable_descriptor_type)
                }),
            features_nested_command_buffer_ext_vk: (device_extensions
                .ext_nested_command_buffer)
                .then(|| {
                    <vk::PhysicalDeviceNestedCommandBufferFeaturesEXT<'_>>::default()
                        .nested_command_buffer(self.nested_command_buffer)
                        .nested_command_buffer_rendering(
                            self.nested_command_buffer_rendering,
                        )
                        .nested_command_buffer_simultaneous_use(
                            self.nested_command_buffer_simultaneous_use,
                        )
                }),
            features_non_seamless_cube_map_ext_vk: (device_extensions
                .ext_non_seamless_cube_map)
                .then(|| {
                    <vk::PhysicalDeviceNonSeamlessCubeMapFeaturesEXT<'_>>::default()
                        .non_seamless_cube_map(self.non_seamless_cube_map)
                }),
            features_opacity_micromap_ext_vk: (device_extensions.ext_opacity_micromap)
                .then(|| {
                    <vk::PhysicalDeviceOpacityMicromapFeaturesEXT<'_>>::default()
                        .micromap(self.micromap)
                        .micromap_capture_replay(self.micromap_capture_replay)
                        .micromap_host_commands(self.micromap_host_commands)
                }),
            features_pageable_device_local_memory_ext_vk: (device_extensions
                .ext_pageable_device_local_memory)
                .then(|| {
                    <vk::PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT<
                        '_,
                    >>::default()
                        .pageable_device_local_memory(self.pageable_device_local_memory)
                }),
            features_pipeline_library_group_handles_ext_vk: (device_extensions
                .ext_pipeline_library_group_handles)
                .then(|| {
                    <vk::PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT<
                        '_,
                    >>::default()
                        .pipeline_library_group_handles(
                            self.pipeline_library_group_handles,
                        )
                }),
            features_pipeline_properties_ext_vk: (device_extensions
                .ext_pipeline_properties)
                .then(|| {
                    <vk::PhysicalDevicePipelinePropertiesFeaturesEXT<'_>>::default()
                        .pipeline_properties_identifier(
                            self.pipeline_properties_identifier,
                        )
                }),
            features_pipeline_protected_access_ext_vk: (device_extensions
                .ext_pipeline_protected_access)
                .then(|| {
                    <vk::PhysicalDevicePipelineProtectedAccessFeaturesEXT<'_>>::default()
                        .pipeline_protected_access(self.pipeline_protected_access)
                }),
            features_pipeline_robustness_ext_vk: (device_extensions
                .ext_pipeline_robustness)
                .then(|| {
                    <vk::PhysicalDevicePipelineRobustnessFeaturesEXT<'_>>::default()
                        .pipeline_robustness(self.pipeline_robustness)
                }),
            features_primitive_topology_list_restart_ext_vk: (device_extensions
                .ext_primitive_topology_list_restart)
                .then(|| {
                    <vk::PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT<
                        '_,
                    >>::default()
                        .primitive_topology_list_restart(
                            self.primitive_topology_list_restart,
                        )
                        .primitive_topology_patch_list_restart(
                            self.primitive_topology_patch_list_restart,
                        )
                }),
            features_primitives_generated_query_ext_vk: (device_extensions
                .ext_primitives_generated_query)
                .then(|| {
                    <vk::PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT<
                        '_,
                    >>::default()
                        .primitives_generated_query(self.primitives_generated_query)
                        .primitives_generated_query_with_rasterizer_discard(
                            self.primitives_generated_query_with_rasterizer_discard,
                        )
                        .primitives_generated_query_with_non_zero_streams(
                            self.primitives_generated_query_with_non_zero_streams,
                        )
                }),
            features_provoking_vertex_ext_vk: (device_extensions.ext_provoking_vertex)
                .then(|| {
                    <vk::PhysicalDeviceProvokingVertexFeaturesEXT<'_>>::default()
                        .provoking_vertex_last(self.provoking_vertex_last)
                        .transform_feedback_preserves_provoking_vertex(
                            self.transform_feedback_preserves_provoking_vertex,
                        )
                }),
            features_rgba10x6_formats_ext_vk: (device_extensions.ext_rgba10x6_formats)
                .then(|| {
                    <vk::PhysicalDeviceRGBA10X6FormatsFeaturesEXT<'_>>::default()
                        .format_rgba10x6_without_y_cb_cr_sampler(
                            self.format_rgba10x6_without_y_cb_cr_sampler,
                        )
                }),
            features_rasterization_order_attachment_access_ext_vk: (device_extensions
                .ext_rasterization_order_attachment_access
                || device_extensions.arm_rasterization_order_attachment_access)
                .then(|| {
                    <vk::PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT<
                        '_,
                    >>::default()
                        .rasterization_order_color_attachment_access(
                            self.rasterization_order_color_attachment_access,
                        )
                        .rasterization_order_depth_attachment_access(
                            self.rasterization_order_depth_attachment_access,
                        )
                        .rasterization_order_stencil_attachment_access(
                            self.rasterization_order_stencil_attachment_access,
                        )
                }),
            features_robustness2_ext_vk: (device_extensions.ext_robustness2)
                .then(|| {
                    <vk::PhysicalDeviceRobustness2FeaturesEXT<'_>>::default()
                        .robust_buffer_access2(self.robust_buffer_access2)
                        .robust_image_access2(self.robust_image_access2)
                        .null_descriptor(self.null_descriptor)
                }),
            features_shader_atomic_float2_ext_vk: (device_extensions
                .ext_shader_atomic_float2)
                .then(|| {
                    <vk::PhysicalDeviceShaderAtomicFloat2FeaturesEXT<'_>>::default()
                        .shader_buffer_float16_atomics(
                            self.shader_buffer_float16_atomics,
                        )
                        .shader_buffer_float16_atomic_add(
                            self.shader_buffer_float16_atomic_add,
                        )
                        .shader_buffer_float16_atomic_min_max(
                            self.shader_buffer_float16_atomic_min_max,
                        )
                        .shader_buffer_float32_atomic_min_max(
                            self.shader_buffer_float32_atomic_min_max,
                        )
                        .shader_buffer_float64_atomic_min_max(
                            self.shader_buffer_float64_atomic_min_max,
                        )
                        .shader_shared_float16_atomics(
                            self.shader_shared_float16_atomics,
                        )
                        .shader_shared_float16_atomic_add(
                            self.shader_shared_float16_atomic_add,
                        )
                        .shader_shared_float16_atomic_min_max(
                            self.shader_shared_float16_atomic_min_max,
                        )
                        .shader_shared_float32_atomic_min_max(
                            self.shader_shared_float32_atomic_min_max,
                        )
                        .shader_shared_float64_atomic_min_max(
                            self.shader_shared_float64_atomic_min_max,
                        )
                        .shader_image_float32_atomic_min_max(
                            self.shader_image_float32_atomic_min_max,
                        )
                        .sparse_image_float32_atomic_min_max(
                            self.sparse_image_float32_atomic_min_max,
                        )
                }),
            features_shader_atomic_float_ext_vk: (device_extensions
                .ext_shader_atomic_float)
                .then(|| {
                    <vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT<'_>>::default()
                        .shader_buffer_float32_atomics(
                            self.shader_buffer_float32_atomics,
                        )
                        .shader_buffer_float32_atomic_add(
                            self.shader_buffer_float32_atomic_add,
                        )
                        .shader_buffer_float64_atomics(
                            self.shader_buffer_float64_atomics,
                        )
                        .shader_buffer_float64_atomic_add(
                            self.shader_buffer_float64_atomic_add,
                        )
                        .shader_shared_float32_atomics(
                            self.shader_shared_float32_atomics,
                        )
                        .shader_shared_float32_atomic_add(
                            self.shader_shared_float32_atomic_add,
                        )
                        .shader_shared_float64_atomics(
                            self.shader_shared_float64_atomics,
                        )
                        .shader_shared_float64_atomic_add(
                            self.shader_shared_float64_atomic_add,
                        )
                        .shader_image_float32_atomics(self.shader_image_float32_atomics)
                        .shader_image_float32_atomic_add(
                            self.shader_image_float32_atomic_add,
                        )
                        .sparse_image_float32_atomics(self.sparse_image_float32_atomics)
                        .sparse_image_float32_atomic_add(
                            self.sparse_image_float32_atomic_add,
                        )
                }),
            features_shader_image_atomic_int64_ext_vk: (device_extensions
                .ext_shader_image_atomic_int64)
                .then(|| {
                    <vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT<'_>>::default()
                        .shader_image_int64_atomics(self.shader_image_int64_atomics)
                        .sparse_image_int64_atomics(self.sparse_image_int64_atomics)
                }),
            features_shader_module_identifier_ext_vk: (device_extensions
                .ext_shader_module_identifier)
                .then(|| {
                    <vk::PhysicalDeviceShaderModuleIdentifierFeaturesEXT<'_>>::default()
                        .shader_module_identifier(self.shader_module_identifier)
                }),
            features_shader_object_ext_vk: (device_extensions.ext_shader_object)
                .then(|| {
                    <vk::PhysicalDeviceShaderObjectFeaturesEXT<'_>>::default()
                        .shader_object(self.shader_object)
                }),
            features_shader_tile_image_ext_vk: (device_extensions.ext_shader_tile_image)
                .then(|| {
                    <vk::PhysicalDeviceShaderTileImageFeaturesEXT<'_>>::default()
                        .shader_tile_image_color_read_access(
                            self.shader_tile_image_color_read_access,
                        )
                        .shader_tile_image_depth_read_access(
                            self.shader_tile_image_depth_read_access,
                        )
                        .shader_tile_image_stencil_read_access(
                            self.shader_tile_image_stencil_read_access,
                        )
                }),
            features_subpass_merge_feedback_ext_vk: (device_extensions
                .ext_subpass_merge_feedback)
                .then(|| {
                    <vk::PhysicalDeviceSubpassMergeFeedbackFeaturesEXT<'_>>::default()
                        .subpass_merge_feedback(self.subpass_merge_feedback)
                }),
            features_swapchain_maintenance1_ext_vk: (device_extensions
                .ext_swapchain_maintenance1)
                .then(|| {
                    <vk::PhysicalDeviceSwapchainMaintenance1FeaturesEXT<'_>>::default()
                        .swapchain_maintenance1(self.swapchain_maintenance1)
                }),
            features_texel_buffer_alignment_ext_vk: (device_extensions
                .ext_texel_buffer_alignment)
                .then(|| {
                    <vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT<'_>>::default()
                        .texel_buffer_alignment(self.texel_buffer_alignment)
                }),
            features_transform_feedback_ext_vk: (device_extensions
                .ext_transform_feedback)
                .then(|| {
                    <vk::PhysicalDeviceTransformFeedbackFeaturesEXT<'_>>::default()
                        .transform_feedback(self.transform_feedback)
                        .geometry_streams(self.geometry_streams)
                }),
            features_vertex_input_dynamic_state_ext_vk: (device_extensions
                .ext_vertex_input_dynamic_state)
                .then(|| {
                    <vk::PhysicalDeviceVertexInputDynamicStateFeaturesEXT<'_>>::default()
                        .vertex_input_dynamic_state(self.vertex_input_dynamic_state)
                }),
            features_ycbcr2_plane444_formats_ext_vk: (device_extensions
                .ext_ycbcr_2plane_444_formats)
                .then(|| {
                    <vk::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT<'_>>::default()
                        .ycbcr2plane444_formats(self.ycbcr2plane444_formats)
                }),
            features_ycbcr_image_arrays_ext_vk: (device_extensions
                .ext_ycbcr_image_arrays)
                .then(|| {
                    <vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT<'_>>::default()
                        .ycbcr_image_arrays(self.ycbcr_image_arrays)
                }),
            features_amigo_profiling_sec_vk: (device_extensions.sec_amigo_profiling)
                .then(|| {
                    <vk::PhysicalDeviceAmigoProfilingFeaturesSEC<'_>>::default()
                        .amigo_profiling(self.amigo_profiling)
                }),
            features_cluster_culling_shader_huawei_vk: (device_extensions
                .huawei_cluster_culling_shader)
                .then(|| {
                    <vk::PhysicalDeviceClusterCullingShaderFeaturesHUAWEI<'_>>::default()
                        .clusterculling_shader(self.clusterculling_shader)
                        .multiview_cluster_culling_shader(
                            self.multiview_cluster_culling_shader,
                        )
                }),
            features_coherent_memory_amd_vk: (device_extensions
                .amd_device_coherent_memory)
                .then(|| {
                    <vk::PhysicalDeviceCoherentMemoryFeaturesAMD<'_>>::default()
                        .device_coherent_memory(self.device_coherent_memory)
                }),
            features_compute_shader_derivatives_nv_vk: (device_extensions
                .nv_compute_shader_derivatives)
                .then(|| {
                    <vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV<'_>>::default()
                        .compute_derivative_group_quads(
                            self.compute_derivative_group_quads,
                        )
                        .compute_derivative_group_linear(
                            self.compute_derivative_group_linear,
                        )
                }),
            features_cooperative_matrix_nv_vk: (device_extensions.nv_cooperative_matrix)
                .then(|| {
                    <vk::PhysicalDeviceCooperativeMatrixFeaturesNV<'_>>::default()
                        .cooperative_matrix(self.cooperative_matrix)
                        .cooperative_matrix_robust_buffer_access(
                            self.cooperative_matrix_robust_buffer_access,
                        )
                }),
            features_copy_memory_indirect_nv_vk: (device_extensions
                .nv_copy_memory_indirect)
                .then(|| {
                    <vk::PhysicalDeviceCopyMemoryIndirectFeaturesNV<'_>>::default()
                        .indirect_copy(self.indirect_copy)
                }),
            features_corner_sampled_image_nv_vk: (device_extensions
                .nv_corner_sampled_image)
                .then(|| {
                    <vk::PhysicalDeviceCornerSampledImageFeaturesNV<'_>>::default()
                        .corner_sampled_image(self.corner_sampled_image)
                }),
            features_coverage_reduction_mode_nv_vk: (device_extensions
                .nv_coverage_reduction_mode)
                .then(|| {
                    <vk::PhysicalDeviceCoverageReductionModeFeaturesNV<'_>>::default()
                        .coverage_reduction_mode(self.coverage_reduction_mode)
                }),
            features_cubic_clamp_qcom_vk: (device_extensions.qcom_filter_cubic_clamp)
                .then(|| {
                    <vk::PhysicalDeviceCubicClampFeaturesQCOM<'_>>::default()
                        .cubic_range_clamp(self.cubic_range_clamp)
                }),
            features_cubic_weights_qcom_vk: (device_extensions.qcom_filter_cubic_weights)
                .then(|| {
                    <vk::PhysicalDeviceCubicWeightsFeaturesQCOM<'_>>::default()
                        .selectable_cubic_weights(self.selectable_cubic_weights)
                }),
            features_cuda_kernel_launch_nv_vk: (device_extensions.nv_cuda_kernel_launch)
                .then(|| {
                    <vk::PhysicalDeviceCudaKernelLaunchFeaturesNV<'_>>::default()
                        .cuda_kernel_launch_features(self.cuda_kernel_launch_features)
                }),
            features_dedicated_allocation_image_aliasing_nv_vk: (device_extensions
                .nv_dedicated_allocation_image_aliasing)
                .then(|| {
                    <vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV<
                        '_,
                    >>::default()
                        .dedicated_allocation_image_aliasing(
                            self.dedicated_allocation_image_aliasing,
                        )
                }),
            features_descriptor_pool_overallocation_nv_vk: (device_extensions
                .nv_descriptor_pool_overallocation)
                .then(|| {
                    <vk::PhysicalDeviceDescriptorPoolOverallocationFeaturesNV<
                        '_,
                    >>::default()
                        .descriptor_pool_overallocation(
                            self.descriptor_pool_overallocation,
                        )
                }),
            features_descriptor_set_host_mapping_valve_vk: (device_extensions
                .valve_descriptor_set_host_mapping)
                .then(|| {
                    <vk::PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE<
                        '_,
                    >>::default()
                        .descriptor_set_host_mapping(self.descriptor_set_host_mapping)
                }),
            features_device_generated_commands_compute_nv_vk: (device_extensions
                .nv_device_generated_commands_compute)
                .then(|| {
                    <vk::PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV<
                        '_,
                    >>::default()
                        .device_generated_compute(self.device_generated_compute)
                        .device_generated_compute_pipelines(
                            self.device_generated_compute_pipelines,
                        )
                        .device_generated_compute_capture_replay(
                            self.device_generated_compute_capture_replay,
                        )
                }),
            features_device_generated_commands_nv_vk: (device_extensions
                .nv_device_generated_commands)
                .then(|| {
                    <vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV<'_>>::default()
                        .device_generated_commands(self.device_generated_commands)
                }),
            features_diagnostics_config_nv_vk: (device_extensions
                .nv_device_diagnostics_config)
                .then(|| {
                    <vk::PhysicalDeviceDiagnosticsConfigFeaturesNV<'_>>::default()
                        .diagnostics_config(self.diagnostics_config)
                }),
            features_displacement_micromap_nv_vk: (device_extensions
                .nv_displacement_micromap)
                .then(|| {
                    <vk::PhysicalDeviceDisplacementMicromapFeaturesNV<'_>>::default()
                        .displacement_micromap(self.displacement_micromap)
                }),
            features_exclusive_scissor_nv_vk: (device_extensions.nv_scissor_exclusive)
                .then(|| {
                    <vk::PhysicalDeviceExclusiveScissorFeaturesNV<'_>>::default()
                        .exclusive_scissor(self.exclusive_scissor)
                }),
            features_extended_sparse_address_space_nv_vk: (device_extensions
                .nv_extended_sparse_address_space)
                .then(|| {
                    <vk::PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV<
                        '_,
                    >>::default()
                        .extended_sparse_address_space(
                            self.extended_sparse_address_space,
                        )
                }),
            features_external_format_resolve_android_vk: (device_extensions
                .android_external_format_resolve)
                .then(|| {
                    <vk::PhysicalDeviceExternalFormatResolveFeaturesANDROID<
                        '_,
                    >>::default()
                        .external_format_resolve(self.external_format_resolve)
                }),
            features_external_memory_rdma_nv_vk: (device_extensions
                .nv_external_memory_rdma)
                .then(|| {
                    <vk::PhysicalDeviceExternalMemoryRDMAFeaturesNV<'_>>::default()
                        .external_memory_rdma(self.external_memory_rdma)
                }),
            features_external_memory_screen_buffer_qnx_vk: (device_extensions
                .qnx_external_memory_screen_buffer)
                .then(|| {
                    <vk::PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX<
                        '_,
                    >>::default()
                        .screen_buffer_import(self.screen_buffer_import)
                }),
            features_fragment_density_map_offset_qcom_vk: (device_extensions
                .qcom_fragment_density_map_offset)
                .then(|| {
                    <vk::PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM<
                        '_,
                    >>::default()
                        .fragment_density_map_offset(self.fragment_density_map_offset)
                }),
            features_fragment_shading_rate_enums_nv_vk: (device_extensions
                .nv_fragment_shading_rate_enums)
                .then(|| {
                    <vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV<'_>>::default()
                        .fragment_shading_rate_enums(self.fragment_shading_rate_enums)
                        .supersample_fragment_shading_rates(
                            self.supersample_fragment_shading_rates,
                        )
                        .no_invocation_fragment_shading_rates(
                            self.no_invocation_fragment_shading_rates,
                        )
                }),
            features_image_processing2_qcom_vk: (device_extensions
                .qcom_image_processing2)
                .then(|| {
                    <vk::PhysicalDeviceImageProcessing2FeaturesQCOM<'_>>::default()
                        .texture_block_match2(self.texture_block_match2)
                }),
            features_image_processing_qcom_vk: (device_extensions.qcom_image_processing)
                .then(|| {
                    <vk::PhysicalDeviceImageProcessingFeaturesQCOM<'_>>::default()
                        .texture_sample_weighted(self.texture_sample_weighted)
                        .texture_box_filter(self.texture_box_filter)
                        .texture_block_match(self.texture_block_match)
                }),
            features_inherited_viewport_scissor_nv_vk: (device_extensions
                .nv_inherited_viewport_scissor)
                .then(|| {
                    <vk::PhysicalDeviceInheritedViewportScissorFeaturesNV<'_>>::default()
                        .inherited_viewport_scissor2_d(
                            self.inherited_viewport_scissor2_d,
                        )
                }),
            features_invocation_mask_huawei_vk: (device_extensions
                .huawei_invocation_mask)
                .then(|| {
                    <vk::PhysicalDeviceInvocationMaskFeaturesHUAWEI<'_>>::default()
                        .invocation_mask(self.invocation_mask)
                }),
            features_linear_color_attachment_nv_vk: (device_extensions
                .nv_linear_color_attachment)
                .then(|| {
                    <vk::PhysicalDeviceLinearColorAttachmentFeaturesNV<'_>>::default()
                        .linear_color_attachment(self.linear_color_attachment)
                }),
            features_memory_decompression_nv_vk: (device_extensions
                .nv_memory_decompression)
                .then(|| {
                    <vk::PhysicalDeviceMemoryDecompressionFeaturesNV<'_>>::default()
                        .memory_decompression(self.memory_decompression)
                }),
            features_mesh_shader_nv_vk: (device_extensions.nv_mesh_shader)
                .then(|| {
                    <vk::PhysicalDeviceMeshShaderFeaturesNV<'_>>::default()
                        .task_shader(self.task_shader)
                        .mesh_shader(self.mesh_shader)
                }),
            features_multiview_per_view_render_areas_qcom_vk: (device_extensions
                .qcom_multiview_per_view_render_areas)
                .then(|| {
                    <vk::PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM<
                        '_,
                    >>::default()
                        .multiview_per_view_render_areas(
                            self.multiview_per_view_render_areas,
                        )
                }),
            features_multiview_per_view_viewports_qcom_vk: (device_extensions
                .qcom_multiview_per_view_viewports)
                .then(|| {
                    <vk::PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM<
                        '_,
                    >>::default()
                        .multiview_per_view_viewports(self.multiview_per_view_viewports)
                }),
            features_optical_flow_nv_vk: (device_extensions.nv_optical_flow)
                .then(|| {
                    <vk::PhysicalDeviceOpticalFlowFeaturesNV<'_>>::default()
                        .optical_flow(self.optical_flow)
                }),
            features_per_stage_descriptor_set_nv_vk: (device_extensions
                .nv_per_stage_descriptor_set)
                .then(|| {
                    <vk::PhysicalDevicePerStageDescriptorSetFeaturesNV<'_>>::default()
                        .per_stage_descriptor_set(self.per_stage_descriptor_set)
                        .dynamic_pipeline_layout(self.dynamic_pipeline_layout)
                }),
            features_present_barrier_nv_vk: (device_extensions.nv_present_barrier)
                .then(|| {
                    <vk::PhysicalDevicePresentBarrierFeaturesNV<'_>>::default()
                        .present_barrier(self.present_barrier)
                }),
            features_raw_access_chains_nv_vk: (device_extensions.nv_raw_access_chains)
                .then(|| {
                    <vk::PhysicalDeviceRawAccessChainsFeaturesNV<'_>>::default()
                        .shader_raw_access_chains(self.shader_raw_access_chains)
                }),
            features_ray_tracing_invocation_reorder_nv_vk: (device_extensions
                .nv_ray_tracing_invocation_reorder)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingInvocationReorderFeaturesNV<
                        '_,
                    >>::default()
                        .ray_tracing_invocation_reorder(
                            self.ray_tracing_invocation_reorder,
                        )
                }),
            features_ray_tracing_motion_blur_nv_vk: (device_extensions
                .nv_ray_tracing_motion_blur)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingMotionBlurFeaturesNV<'_>>::default()
                        .ray_tracing_motion_blur(self.ray_tracing_motion_blur)
                        .ray_tracing_motion_blur_pipeline_trace_rays_indirect(
                            self.ray_tracing_motion_blur_pipeline_trace_rays_indirect,
                        )
                }),
            features_ray_tracing_validation_nv_vk: (device_extensions
                .nv_ray_tracing_validation)
                .then(|| {
                    <vk::PhysicalDeviceRayTracingValidationFeaturesNV<'_>>::default()
                        .ray_tracing_validation(self.ray_tracing_validation)
                }),
            features_relaxed_line_rasterization_img_vk: (device_extensions
                .img_relaxed_line_rasterization)
                .then(|| {
                    <vk::PhysicalDeviceRelaxedLineRasterizationFeaturesIMG<
                        '_,
                    >>::default()
                        .relaxed_line_rasterization(self.relaxed_line_rasterization)
                }),
            features_render_pass_striped_arm_vk: (device_extensions
                .arm_render_pass_striped)
                .then(|| {
                    <vk::PhysicalDeviceRenderPassStripedFeaturesARM<'_>>::default()
                        .render_pass_striped(self.render_pass_striped)
                }),
            features_representative_fragment_test_nv_vk: (device_extensions
                .nv_representative_fragment_test)
                .then(|| {
                    <vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV<
                        '_,
                    >>::default()
                        .representative_fragment_test(self.representative_fragment_test)
                }),
            features_scheduling_controls_arm_vk: (device_extensions
                .arm_scheduling_controls)
                .then(|| {
                    <vk::PhysicalDeviceSchedulingControlsFeaturesARM<'_>>::default()
                        .scheduling_controls(self.scheduling_controls)
                }),
            features_shader_atomic_float16_vector_nv_vk: (device_extensions
                .nv_shader_atomic_float16_vector)
                .then(|| {
                    <vk::PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV<
                        '_,
                    >>::default()
                        .shader_float16_vector_atomics(
                            self.shader_float16_vector_atomics,
                        )
                }),
            features_shader_core_builtins_arm_vk: (device_extensions
                .arm_shader_core_builtins)
                .then(|| {
                    <vk::PhysicalDeviceShaderCoreBuiltinsFeaturesARM<'_>>::default()
                        .shader_core_builtins(self.shader_core_builtins)
                }),
            features_shader_early_and_late_fragment_tests_amd_vk: (device_extensions
                .amd_shader_early_and_late_fragment_tests)
                .then(|| {
                    <vk::PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD<
                        '_,
                    >>::default()
                        .shader_early_and_late_fragment_tests(
                            self.shader_early_and_late_fragment_tests,
                        )
                }),
            features_shader_enqueue_amdx_vk: (device_extensions.amdx_shader_enqueue)
                .then(|| {
                    <vk::PhysicalDeviceShaderEnqueueFeaturesAMDX<'_>>::default()
                        .shader_enqueue(self.shader_enqueue)
                }),
            features_shader_image_footprint_nv_vk: (device_extensions
                .nv_shader_image_footprint)
                .then(|| {
                    <vk::PhysicalDeviceShaderImageFootprintFeaturesNV<'_>>::default()
                        .image_footprint(self.image_footprint)
                }),
            features_shader_integer_functions2_intel_vk: (device_extensions
                .intel_shader_integer_functions2)
                .then(|| {
                    <vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL<
                        '_,
                    >>::default()
                        .shader_integer_functions2(self.shader_integer_functions2)
                }),
            features_shader_sm_builtins_nv_vk: (device_extensions.nv_shader_sm_builtins)
                .then(|| {
                    <vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV<'_>>::default()
                        .shader_sm_builtins(self.shader_sm_builtins)
                }),
            features_shading_rate_image_nv_vk: (device_extensions.nv_shading_rate_image)
                .then(|| {
                    <vk::PhysicalDeviceShadingRateImageFeaturesNV<'_>>::default()
                        .shading_rate_image(self.shading_rate_image)
                        .shading_rate_coarse_sample_order(
                            self.shading_rate_coarse_sample_order,
                        )
                }),
            features_subpass_shading_huawei_vk: (device_extensions
                .huawei_subpass_shading)
                .then(|| {
                    <vk::PhysicalDeviceSubpassShadingFeaturesHUAWEI<'_>>::default()
                        .subpass_shading(self.subpass_shading)
                }),
            features_tile_properties_qcom_vk: (device_extensions.qcom_tile_properties)
                .then(|| {
                    <vk::PhysicalDeviceTilePropertiesFeaturesQCOM<'_>>::default()
                        .tile_properties(self.tile_properties)
                }),
            features_ycbcr_degamma_qcom_vk: (device_extensions.qcom_ycbcr_degamma)
                .then(|| {
                    <vk::PhysicalDeviceYcbcrDegammaFeaturesQCOM<'_>>::default()
                        .ycbcr_degamma(self.ycbcr_degamma)
                }),
        }
    }
}
impl std::fmt::Debug for DeviceFeatures {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
        f.debug_list()
            .entries(
                self
                    .iter()
                    .flat_map(|(feature_name_c, enabled)| {
                        enabled.then_some(feature_name_c)
                    }),
            )
            .finish()
    }
}
impl Default for DeviceFeatures {
    #[inline]
    fn default() -> Self {
        Self::empty()
    }
}
impl<'a> IntoIterator for &'a DeviceFeatures {
    type Item = (&'static str, bool);
    type IntoIter = features::Iter<'a>;
    #[inline]
    fn into_iter(self) -> Self::IntoIter {
        self.iter()
    }
}
mod features {
    pub struct Iter<'a> {
        pub(crate) inner: std::iter::Zip<
            std::iter::Copied<std::slice::Iter<'a, &'static str>>,
            std::iter::Copied<std::slice::Iter<'a, bool>>,
        >,
    }
    impl<'a> Iterator for Iter<'a> {
        type Item = (&'static str, bool);
        #[inline]
        fn next(&mut self) -> Option<Self::Item> {
            self.inner.next()
        }
        #[inline]
        fn size_hint(&self) -> (usize, Option<usize>) {
            self.inner.size_hint()
        }
        #[inline]
        fn nth(&mut self, n: usize) -> Option<Self::Item> {
            self.inner.nth(n)
        }
    }
    impl<'a> DoubleEndedIterator for Iter<'a> {
        #[inline]
        fn next_back(&mut self) -> Option<Self::Item> {
            self.inner.next_back()
        }
    }
    impl ExactSizeIterator for Iter<'_> {
        #[inline]
        fn len(&self) -> usize {
            self.inner.len()
        }
    }
    impl std::iter::FusedIterator for Iter<'_> {}
}
impl std::ops::BitAnd for DeviceFeatures {
    type Output = DeviceFeatures;
    #[inline]
    fn bitand(self, rhs: Self) -> Self::Output {
        self.intersection(&rhs)
    }
}
impl std::ops::BitAndAssign for DeviceFeatures {
    #[inline]
    fn bitand_assign(&mut self, rhs: Self) {
        *self = self.intersection(&rhs);
    }
}
impl std::ops::BitOr for DeviceFeatures {
    type Output = DeviceFeatures;
    #[inline]
    fn bitor(self, rhs: Self) -> Self::Output {
        self.union(&rhs)
    }
}
impl std::ops::BitOrAssign for DeviceFeatures {
    #[inline]
    fn bitor_assign(&mut self, rhs: Self) {
        *self = self.union(&rhs);
    }
}
impl std::ops::BitXor for DeviceFeatures {
    type Output = DeviceFeatures;
    #[inline]
    fn bitxor(self, rhs: Self) -> Self::Output {
        self.symmetric_difference(&rhs)
    }
}
impl std::ops::BitXorAssign for DeviceFeatures {
    #[inline]
    fn bitxor_assign(&mut self, rhs: Self) {
        *self = self.symmetric_difference(&rhs);
    }
}
impl std::ops::Sub for DeviceFeatures {
    type Output = DeviceFeatures;
    #[inline]
    fn sub(self, rhs: Self) -> Self::Output {
        self.difference(&rhs)
    }
}
impl std::ops::SubAssign for DeviceFeatures {
    #[inline]
    fn sub_assign(&mut self, rhs: Self) {
        *self = self.difference(&rhs);
    }
}
pub(crate) struct PhysicalDeviceFeatures2ExtensionsVk {
    pub(crate) features_vulkan11_vk: Option<vk::PhysicalDeviceVulkan11Features<'static>>,
    pub(crate) features_vulkan12_vk: Option<vk::PhysicalDeviceVulkan12Features<'static>>,
    pub(crate) features_vulkan13_vk: Option<vk::PhysicalDeviceVulkan13Features<'static>>,
    pub(crate) features_16bit_storage_vk: Option<
        vk::PhysicalDevice16BitStorageFeatures<'static>,
    >,
    pub(crate) features_multiview_vk: Option<
        vk::PhysicalDeviceMultiviewFeatures<'static>,
    >,
    pub(crate) features_protected_memory_vk: Option<
        vk::PhysicalDeviceProtectedMemoryFeatures<'static>,
    >,
    pub(crate) features_sampler_ycbcr_conversion_vk: Option<
        vk::PhysicalDeviceSamplerYcbcrConversionFeatures<'static>,
    >,
    pub(crate) features_shader_draw_parameters_vk: Option<
        vk::PhysicalDeviceShaderDrawParametersFeatures<'static>,
    >,
    pub(crate) features_variable_pointers_vk: Option<
        vk::PhysicalDeviceVariablePointersFeatures<'static>,
    >,
    pub(crate) features_8bit_storage_vk: Option<
        vk::PhysicalDevice8BitStorageFeatures<'static>,
    >,
    pub(crate) features_buffer_device_address_vk: Option<
        vk::PhysicalDeviceBufferDeviceAddressFeatures<'static>,
    >,
    pub(crate) features_descriptor_indexing_vk: Option<
        vk::PhysicalDeviceDescriptorIndexingFeatures<'static>,
    >,
    pub(crate) features_host_query_reset_vk: Option<
        vk::PhysicalDeviceHostQueryResetFeatures<'static>,
    >,
    pub(crate) features_imageless_framebuffer_vk: Option<
        vk::PhysicalDeviceImagelessFramebufferFeatures<'static>,
    >,
    pub(crate) features_scalar_block_layout_vk: Option<
        vk::PhysicalDeviceScalarBlockLayoutFeatures<'static>,
    >,
    pub(crate) features_separate_depth_stencil_layouts_vk: Option<
        vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures<'static>,
    >,
    pub(crate) features_shader_atomic_int64_vk: Option<
        vk::PhysicalDeviceShaderAtomicInt64Features<'static>,
    >,
    pub(crate) features_shader_float16_int8_vk: Option<
        vk::PhysicalDeviceShaderFloat16Int8Features<'static>,
    >,
    pub(crate) features_shader_subgroup_extended_types_vk: Option<
        vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures<'static>,
    >,
    pub(crate) features_timeline_semaphore_vk: Option<
        vk::PhysicalDeviceTimelineSemaphoreFeatures<'static>,
    >,
    pub(crate) features_uniform_buffer_standard_layout_vk: Option<
        vk::PhysicalDeviceUniformBufferStandardLayoutFeatures<'static>,
    >,
    pub(crate) features_vulkan_memory_model_vk: Option<
        vk::PhysicalDeviceVulkanMemoryModelFeatures<'static>,
    >,
    pub(crate) features_dynamic_rendering_vk: Option<
        vk::PhysicalDeviceDynamicRenderingFeatures<'static>,
    >,
    pub(crate) features_image_robustness_vk: Option<
        vk::PhysicalDeviceImageRobustnessFeatures<'static>,
    >,
    pub(crate) features_inline_uniform_block_vk: Option<
        vk::PhysicalDeviceInlineUniformBlockFeatures<'static>,
    >,
    pub(crate) features_maintenance4_vk: Option<
        vk::PhysicalDeviceMaintenance4Features<'static>,
    >,
    pub(crate) features_pipeline_creation_cache_control_vk: Option<
        vk::PhysicalDevicePipelineCreationCacheControlFeatures<'static>,
    >,
    pub(crate) features_private_data_vk: Option<
        vk::PhysicalDevicePrivateDataFeatures<'static>,
    >,
    pub(crate) features_shader_demote_to_helper_invocation_vk: Option<
        vk::PhysicalDeviceShaderDemoteToHelperInvocationFeatures<'static>,
    >,
    pub(crate) features_shader_integer_dot_product_vk: Option<
        vk::PhysicalDeviceShaderIntegerDotProductFeatures<'static>,
    >,
    pub(crate) features_shader_terminate_invocation_vk: Option<
        vk::PhysicalDeviceShaderTerminateInvocationFeatures<'static>,
    >,
    pub(crate) features_subgroup_size_control_vk: Option<
        vk::PhysicalDeviceSubgroupSizeControlFeatures<'static>,
    >,
    pub(crate) features_synchronization2_vk: Option<
        vk::PhysicalDeviceSynchronization2Features<'static>,
    >,
    pub(crate) features_texture_compression_astchdr_vk: Option<
        vk::PhysicalDeviceTextureCompressionASTCHDRFeatures<'static>,
    >,
    pub(crate) features_zero_initialize_workgroup_memory_vk: Option<
        vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures<'static>,
    >,
    pub(crate) features_acceleration_structure_khr_vk: Option<
        vk::PhysicalDeviceAccelerationStructureFeaturesKHR<'static>,
    >,
    pub(crate) features_cooperative_matrix_khr_vk: Option<
        vk::PhysicalDeviceCooperativeMatrixFeaturesKHR<'static>,
    >,
    pub(crate) features_dynamic_rendering_local_read_khr_vk: Option<
        vk::PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR<'static>,
    >,
    pub(crate) features_fragment_shader_barycentric_khr_vk: Option<
        vk::PhysicalDeviceFragmentShaderBarycentricFeaturesKHR<'static>,
    >,
    pub(crate) features_fragment_shading_rate_khr_vk: Option<
        vk::PhysicalDeviceFragmentShadingRateFeaturesKHR<'static>,
    >,
    pub(crate) features_global_priority_query_khr_vk: Option<
        vk::PhysicalDeviceGlobalPriorityQueryFeaturesKHR<'static>,
    >,
    pub(crate) features_index_type_uint8_khr_vk: Option<
        vk::PhysicalDeviceIndexTypeUint8FeaturesKHR<'static>,
    >,
    pub(crate) features_line_rasterization_khr_vk: Option<
        vk::PhysicalDeviceLineRasterizationFeaturesKHR<'static>,
    >,
    pub(crate) features_maintenance5_khr_vk: Option<
        vk::PhysicalDeviceMaintenance5FeaturesKHR<'static>,
    >,
    pub(crate) features_maintenance6_khr_vk: Option<
        vk::PhysicalDeviceMaintenance6FeaturesKHR<'static>,
    >,
    pub(crate) features_performance_query_khr_vk: Option<
        vk::PhysicalDevicePerformanceQueryFeaturesKHR<'static>,
    >,
    pub(crate) features_pipeline_executable_properties_khr_vk: Option<
        vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR<'static>,
    >,
    pub(crate) features_portability_subset_khr_vk: Option<
        vk::PhysicalDevicePortabilitySubsetFeaturesKHR<'static>,
    >,
    pub(crate) features_present_id_khr_vk: Option<
        vk::PhysicalDevicePresentIdFeaturesKHR<'static>,
    >,
    pub(crate) features_present_wait_khr_vk: Option<
        vk::PhysicalDevicePresentWaitFeaturesKHR<'static>,
    >,
    pub(crate) features_ray_query_khr_vk: Option<
        vk::PhysicalDeviceRayQueryFeaturesKHR<'static>,
    >,
    pub(crate) features_ray_tracing_maintenance1_khr_vk: Option<
        vk::PhysicalDeviceRayTracingMaintenance1FeaturesKHR<'static>,
    >,
    pub(crate) features_ray_tracing_pipeline_khr_vk: Option<
        vk::PhysicalDeviceRayTracingPipelineFeaturesKHR<'static>,
    >,
    pub(crate) features_ray_tracing_position_fetch_khr_vk: Option<
        vk::PhysicalDeviceRayTracingPositionFetchFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_clock_khr_vk: Option<
        vk::PhysicalDeviceShaderClockFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_expect_assume_khr_vk: Option<
        vk::PhysicalDeviceShaderExpectAssumeFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_float_controls2_khr_vk: Option<
        vk::PhysicalDeviceShaderFloatControls2FeaturesKHR<'static>,
    >,
    pub(crate) features_shader_maximal_reconvergence_khr_vk: Option<
        vk::PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_quad_control_khr_vk: Option<
        vk::PhysicalDeviceShaderQuadControlFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_subgroup_rotate_khr_vk: Option<
        vk::PhysicalDeviceShaderSubgroupRotateFeaturesKHR<'static>,
    >,
    pub(crate) features_shader_subgroup_uniform_control_flow_khr_vk: Option<
        vk::PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR<'static>,
    >,
    pub(crate) features_vertex_attribute_divisor_khr_vk: Option<
        vk::PhysicalDeviceVertexAttributeDivisorFeaturesKHR<'static>,
    >,
    pub(crate) features_video_maintenance1_khr_vk: Option<
        vk::PhysicalDeviceVideoMaintenance1FeaturesKHR<'static>,
    >,
    pub(crate) features_workgroup_memory_explicit_layout_khr_vk: Option<
        vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR<'static>,
    >,
    pub(crate) features_4444formats_ext_vk: Option<
        vk::PhysicalDevice4444FormatsFeaturesEXT<'static>,
    >,
    pub(crate) features_astc_decode_ext_vk: Option<
        vk::PhysicalDeviceASTCDecodeFeaturesEXT<'static>,
    >,
    pub(crate) features_address_binding_report_ext_vk: Option<
        vk::PhysicalDeviceAddressBindingReportFeaturesEXT<'static>,
    >,
    pub(crate) features_attachment_feedback_loop_dynamic_state_ext_vk: Option<
        vk::PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT<'static>,
    >,
    pub(crate) features_attachment_feedback_loop_layout_ext_vk: Option<
        vk::PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT<'static>,
    >,
    pub(crate) features_blend_operation_advanced_ext_vk: Option<
        vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT<'static>,
    >,
    pub(crate) features_border_color_swizzle_ext_vk: Option<
        vk::PhysicalDeviceBorderColorSwizzleFeaturesEXT<'static>,
    >,
    pub(crate) features_buffer_device_address_ext_vk: Option<
        vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT<'static>,
    >,
    pub(crate) features_color_write_enable_ext_vk: Option<
        vk::PhysicalDeviceColorWriteEnableFeaturesEXT<'static>,
    >,
    pub(crate) features_conditional_rendering_ext_vk: Option<
        vk::PhysicalDeviceConditionalRenderingFeaturesEXT<'static>,
    >,
    pub(crate) features_custom_border_color_ext_vk: Option<
        vk::PhysicalDeviceCustomBorderColorFeaturesEXT<'static>,
    >,
    pub(crate) features_depth_bias_control_ext_vk: Option<
        vk::PhysicalDeviceDepthBiasControlFeaturesEXT<'static>,
    >,
    pub(crate) features_depth_clamp_zero_one_ext_vk: Option<
        vk::PhysicalDeviceDepthClampZeroOneFeaturesEXT<'static>,
    >,
    pub(crate) features_depth_clip_control_ext_vk: Option<
        vk::PhysicalDeviceDepthClipControlFeaturesEXT<'static>,
    >,
    pub(crate) features_depth_clip_enable_ext_vk: Option<
        vk::PhysicalDeviceDepthClipEnableFeaturesEXT<'static>,
    >,
    pub(crate) features_descriptor_buffer_ext_vk: Option<
        vk::PhysicalDeviceDescriptorBufferFeaturesEXT<'static>,
    >,
    pub(crate) features_device_memory_report_ext_vk: Option<
        vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT<'static>,
    >,
    pub(crate) features_dynamic_rendering_unused_attachments_ext_vk: Option<
        vk::PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT<'static>,
    >,
    pub(crate) features_extended_dynamic_state2_ext_vk: Option<
        vk::PhysicalDeviceExtendedDynamicState2FeaturesEXT<'static>,
    >,
    pub(crate) features_extended_dynamic_state3_ext_vk: Option<
        vk::PhysicalDeviceExtendedDynamicState3FeaturesEXT<'static>,
    >,
    pub(crate) features_extended_dynamic_state_ext_vk: Option<
        vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT<'static>,
    >,
    pub(crate) features_fault_ext_vk: Option<
        vk::PhysicalDeviceFaultFeaturesEXT<'static>,
    >,
    pub(crate) features_fragment_density_map2_ext_vk: Option<
        vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT<'static>,
    >,
    pub(crate) features_fragment_density_map_ext_vk: Option<
        vk::PhysicalDeviceFragmentDensityMapFeaturesEXT<'static>,
    >,
    pub(crate) features_fragment_shader_interlock_ext_vk: Option<
        vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT<'static>,
    >,
    pub(crate) features_frame_boundary_ext_vk: Option<
        vk::PhysicalDeviceFrameBoundaryFeaturesEXT<'static>,
    >,
    pub(crate) features_graphics_pipeline_library_ext_vk: Option<
        vk::PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT<'static>,
    >,
    pub(crate) features_host_image_copy_ext_vk: Option<
        vk::PhysicalDeviceHostImageCopyFeaturesEXT<'static>,
    >,
    pub(crate) features_image2_d_view_of3_d_ext_vk: Option<
        vk::PhysicalDeviceImage2DViewOf3DFeaturesEXT<'static>,
    >,
    pub(crate) features_image_compression_control_ext_vk: Option<
        vk::PhysicalDeviceImageCompressionControlFeaturesEXT<'static>,
    >,
    pub(crate) features_image_compression_control_swapchain_ext_vk: Option<
        vk::PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT<'static>,
    >,
    pub(crate) features_image_sliced_view_of3_d_ext_vk: Option<
        vk::PhysicalDeviceImageSlicedViewOf3DFeaturesEXT<'static>,
    >,
    pub(crate) features_image_view_min_lod_ext_vk: Option<
        vk::PhysicalDeviceImageViewMinLodFeaturesEXT<'static>,
    >,
    pub(crate) features_legacy_dithering_ext_vk: Option<
        vk::PhysicalDeviceLegacyDitheringFeaturesEXT<'static>,
    >,
    pub(crate) features_map_memory_placed_ext_vk: Option<
        vk::PhysicalDeviceMapMemoryPlacedFeaturesEXT<'static>,
    >,
    pub(crate) features_memory_priority_ext_vk: Option<
        vk::PhysicalDeviceMemoryPriorityFeaturesEXT<'static>,
    >,
    pub(crate) features_mesh_shader_ext_vk: Option<
        vk::PhysicalDeviceMeshShaderFeaturesEXT<'static>,
    >,
    pub(crate) features_multi_draw_ext_vk: Option<
        vk::PhysicalDeviceMultiDrawFeaturesEXT<'static>,
    >,
    pub(crate) features_multisampled_render_to_single_sampled_ext_vk: Option<
        vk::PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT<'static>,
    >,
    pub(crate) features_mutable_descriptor_type_ext_vk: Option<
        vk::PhysicalDeviceMutableDescriptorTypeFeaturesEXT<'static>,
    >,
    pub(crate) features_nested_command_buffer_ext_vk: Option<
        vk::PhysicalDeviceNestedCommandBufferFeaturesEXT<'static>,
    >,
    pub(crate) features_non_seamless_cube_map_ext_vk: Option<
        vk::PhysicalDeviceNonSeamlessCubeMapFeaturesEXT<'static>,
    >,
    pub(crate) features_opacity_micromap_ext_vk: Option<
        vk::PhysicalDeviceOpacityMicromapFeaturesEXT<'static>,
    >,
    pub(crate) features_pageable_device_local_memory_ext_vk: Option<
        vk::PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT<'static>,
    >,
    pub(crate) features_pipeline_library_group_handles_ext_vk: Option<
        vk::PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT<'static>,
    >,
    pub(crate) features_pipeline_properties_ext_vk: Option<
        vk::PhysicalDevicePipelinePropertiesFeaturesEXT<'static>,
    >,
    pub(crate) features_pipeline_protected_access_ext_vk: Option<
        vk::PhysicalDevicePipelineProtectedAccessFeaturesEXT<'static>,
    >,
    pub(crate) features_pipeline_robustness_ext_vk: Option<
        vk::PhysicalDevicePipelineRobustnessFeaturesEXT<'static>,
    >,
    pub(crate) features_primitive_topology_list_restart_ext_vk: Option<
        vk::PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT<'static>,
    >,
    pub(crate) features_primitives_generated_query_ext_vk: Option<
        vk::PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT<'static>,
    >,
    pub(crate) features_provoking_vertex_ext_vk: Option<
        vk::PhysicalDeviceProvokingVertexFeaturesEXT<'static>,
    >,
    pub(crate) features_rgba10x6_formats_ext_vk: Option<
        vk::PhysicalDeviceRGBA10X6FormatsFeaturesEXT<'static>,
    >,
    pub(crate) features_rasterization_order_attachment_access_ext_vk: Option<
        vk::PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT<'static>,
    >,
    pub(crate) features_robustness2_ext_vk: Option<
        vk::PhysicalDeviceRobustness2FeaturesEXT<'static>,
    >,
    pub(crate) features_shader_atomic_float2_ext_vk: Option<
        vk::PhysicalDeviceShaderAtomicFloat2FeaturesEXT<'static>,
    >,
    pub(crate) features_shader_atomic_float_ext_vk: Option<
        vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT<'static>,
    >,
    pub(crate) features_shader_image_atomic_int64_ext_vk: Option<
        vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT<'static>,
    >,
    pub(crate) features_shader_module_identifier_ext_vk: Option<
        vk::PhysicalDeviceShaderModuleIdentifierFeaturesEXT<'static>,
    >,
    pub(crate) features_shader_object_ext_vk: Option<
        vk::PhysicalDeviceShaderObjectFeaturesEXT<'static>,
    >,
    pub(crate) features_shader_tile_image_ext_vk: Option<
        vk::PhysicalDeviceShaderTileImageFeaturesEXT<'static>,
    >,
    pub(crate) features_subpass_merge_feedback_ext_vk: Option<
        vk::PhysicalDeviceSubpassMergeFeedbackFeaturesEXT<'static>,
    >,
    pub(crate) features_swapchain_maintenance1_ext_vk: Option<
        vk::PhysicalDeviceSwapchainMaintenance1FeaturesEXT<'static>,
    >,
    pub(crate) features_texel_buffer_alignment_ext_vk: Option<
        vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT<'static>,
    >,
    pub(crate) features_transform_feedback_ext_vk: Option<
        vk::PhysicalDeviceTransformFeedbackFeaturesEXT<'static>,
    >,
    pub(crate) features_vertex_input_dynamic_state_ext_vk: Option<
        vk::PhysicalDeviceVertexInputDynamicStateFeaturesEXT<'static>,
    >,
    pub(crate) features_ycbcr2_plane444_formats_ext_vk: Option<
        vk::PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT<'static>,
    >,
    pub(crate) features_ycbcr_image_arrays_ext_vk: Option<
        vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT<'static>,
    >,
    pub(crate) features_amigo_profiling_sec_vk: Option<
        vk::PhysicalDeviceAmigoProfilingFeaturesSEC<'static>,
    >,
    pub(crate) features_cluster_culling_shader_huawei_vk: Option<
        vk::PhysicalDeviceClusterCullingShaderFeaturesHUAWEI<'static>,
    >,
    pub(crate) features_coherent_memory_amd_vk: Option<
        vk::PhysicalDeviceCoherentMemoryFeaturesAMD<'static>,
    >,
    pub(crate) features_compute_shader_derivatives_nv_vk: Option<
        vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV<'static>,
    >,
    pub(crate) features_cooperative_matrix_nv_vk: Option<
        vk::PhysicalDeviceCooperativeMatrixFeaturesNV<'static>,
    >,
    pub(crate) features_copy_memory_indirect_nv_vk: Option<
        vk::PhysicalDeviceCopyMemoryIndirectFeaturesNV<'static>,
    >,
    pub(crate) features_corner_sampled_image_nv_vk: Option<
        vk::PhysicalDeviceCornerSampledImageFeaturesNV<'static>,
    >,
    pub(crate) features_coverage_reduction_mode_nv_vk: Option<
        vk::PhysicalDeviceCoverageReductionModeFeaturesNV<'static>,
    >,
    pub(crate) features_cubic_clamp_qcom_vk: Option<
        vk::PhysicalDeviceCubicClampFeaturesQCOM<'static>,
    >,
    pub(crate) features_cubic_weights_qcom_vk: Option<
        vk::PhysicalDeviceCubicWeightsFeaturesQCOM<'static>,
    >,
    pub(crate) features_cuda_kernel_launch_nv_vk: Option<
        vk::PhysicalDeviceCudaKernelLaunchFeaturesNV<'static>,
    >,
    pub(crate) features_dedicated_allocation_image_aliasing_nv_vk: Option<
        vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV<'static>,
    >,
    pub(crate) features_descriptor_pool_overallocation_nv_vk: Option<
        vk::PhysicalDeviceDescriptorPoolOverallocationFeaturesNV<'static>,
    >,
    pub(crate) features_descriptor_set_host_mapping_valve_vk: Option<
        vk::PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE<'static>,
    >,
    pub(crate) features_device_generated_commands_compute_nv_vk: Option<
        vk::PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV<'static>,
    >,
    pub(crate) features_device_generated_commands_nv_vk: Option<
        vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV<'static>,
    >,
    pub(crate) features_diagnostics_config_nv_vk: Option<
        vk::PhysicalDeviceDiagnosticsConfigFeaturesNV<'static>,
    >,
    pub(crate) features_displacement_micromap_nv_vk: Option<
        vk::PhysicalDeviceDisplacementMicromapFeaturesNV<'static>,
    >,
    pub(crate) features_exclusive_scissor_nv_vk: Option<
        vk::PhysicalDeviceExclusiveScissorFeaturesNV<'static>,
    >,
    pub(crate) features_extended_sparse_address_space_nv_vk: Option<
        vk::PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV<'static>,
    >,
    pub(crate) features_external_format_resolve_android_vk: Option<
        vk::PhysicalDeviceExternalFormatResolveFeaturesANDROID<'static>,
    >,
    pub(crate) features_external_memory_rdma_nv_vk: Option<
        vk::PhysicalDeviceExternalMemoryRDMAFeaturesNV<'static>,
    >,
    pub(crate) features_external_memory_screen_buffer_qnx_vk: Option<
        vk::PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX<'static>,
    >,
    pub(crate) features_fragment_density_map_offset_qcom_vk: Option<
        vk::PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM<'static>,
    >,
    pub(crate) features_fragment_shading_rate_enums_nv_vk: Option<
        vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV<'static>,
    >,
    pub(crate) features_image_processing2_qcom_vk: Option<
        vk::PhysicalDeviceImageProcessing2FeaturesQCOM<'static>,
    >,
    pub(crate) features_image_processing_qcom_vk: Option<
        vk::PhysicalDeviceImageProcessingFeaturesQCOM<'static>,
    >,
    pub(crate) features_inherited_viewport_scissor_nv_vk: Option<
        vk::PhysicalDeviceInheritedViewportScissorFeaturesNV<'static>,
    >,
    pub(crate) features_invocation_mask_huawei_vk: Option<
        vk::PhysicalDeviceInvocationMaskFeaturesHUAWEI<'static>,
    >,
    pub(crate) features_linear_color_attachment_nv_vk: Option<
        vk::PhysicalDeviceLinearColorAttachmentFeaturesNV<'static>,
    >,
    pub(crate) features_memory_decompression_nv_vk: Option<
        vk::PhysicalDeviceMemoryDecompressionFeaturesNV<'static>,
    >,
    pub(crate) features_mesh_shader_nv_vk: Option<
        vk::PhysicalDeviceMeshShaderFeaturesNV<'static>,
    >,
    pub(crate) features_multiview_per_view_render_areas_qcom_vk: Option<
        vk::PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM<'static>,
    >,
    pub(crate) features_multiview_per_view_viewports_qcom_vk: Option<
        vk::PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM<'static>,
    >,
    pub(crate) features_optical_flow_nv_vk: Option<
        vk::PhysicalDeviceOpticalFlowFeaturesNV<'static>,
    >,
    pub(crate) features_per_stage_descriptor_set_nv_vk: Option<
        vk::PhysicalDevicePerStageDescriptorSetFeaturesNV<'static>,
    >,
    pub(crate) features_present_barrier_nv_vk: Option<
        vk::PhysicalDevicePresentBarrierFeaturesNV<'static>,
    >,
    pub(crate) features_raw_access_chains_nv_vk: Option<
        vk::PhysicalDeviceRawAccessChainsFeaturesNV<'static>,
    >,
    pub(crate) features_ray_tracing_invocation_reorder_nv_vk: Option<
        vk::PhysicalDeviceRayTracingInvocationReorderFeaturesNV<'static>,
    >,
    pub(crate) features_ray_tracing_motion_blur_nv_vk: Option<
        vk::PhysicalDeviceRayTracingMotionBlurFeaturesNV<'static>,
    >,
    pub(crate) features_ray_tracing_validation_nv_vk: Option<
        vk::PhysicalDeviceRayTracingValidationFeaturesNV<'static>,
    >,
    pub(crate) features_relaxed_line_rasterization_img_vk: Option<
        vk::PhysicalDeviceRelaxedLineRasterizationFeaturesIMG<'static>,
    >,
    pub(crate) features_render_pass_striped_arm_vk: Option<
        vk::PhysicalDeviceRenderPassStripedFeaturesARM<'static>,
    >,
    pub(crate) features_representative_fragment_test_nv_vk: Option<
        vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV<'static>,
    >,
    pub(crate) features_scheduling_controls_arm_vk: Option<
        vk::PhysicalDeviceSchedulingControlsFeaturesARM<'static>,
    >,
    pub(crate) features_shader_atomic_float16_vector_nv_vk: Option<
        vk::PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV<'static>,
    >,
    pub(crate) features_shader_core_builtins_arm_vk: Option<
        vk::PhysicalDeviceShaderCoreBuiltinsFeaturesARM<'static>,
    >,
    pub(crate) features_shader_early_and_late_fragment_tests_amd_vk: Option<
        vk::PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD<'static>,
    >,
    pub(crate) features_shader_enqueue_amdx_vk: Option<
        vk::PhysicalDeviceShaderEnqueueFeaturesAMDX<'static>,
    >,
    pub(crate) features_shader_image_footprint_nv_vk: Option<
        vk::PhysicalDeviceShaderImageFootprintFeaturesNV<'static>,
    >,
    pub(crate) features_shader_integer_functions2_intel_vk: Option<
        vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL<'static>,
    >,
    pub(crate) features_shader_sm_builtins_nv_vk: Option<
        vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV<'static>,
    >,
    pub(crate) features_shading_rate_image_nv_vk: Option<
        vk::PhysicalDeviceShadingRateImageFeaturesNV<'static>,
    >,
    pub(crate) features_subpass_shading_huawei_vk: Option<
        vk::PhysicalDeviceSubpassShadingFeaturesHUAWEI<'static>,
    >,
    pub(crate) features_tile_properties_qcom_vk: Option<
        vk::PhysicalDeviceTilePropertiesFeaturesQCOM<'static>,
    >,
    pub(crate) features_ycbcr_degamma_qcom_vk: Option<
        vk::PhysicalDeviceYcbcrDegammaFeaturesQCOM<'static>,
    >,
}
